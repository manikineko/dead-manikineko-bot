import { Flashcore } from "robo.js";
import path from "path";
export let prefix = 'm>';
import commands from "../services/legacy_commandloader.js";
import aliases from "../services/legacy_commandloader.js";
export let commandsPath = path.join(path.dirname('../commands'));
export default (async (message)=>{
    var powerlevel = await Flashcore.get('powerlevel', {
        namespace: message.author.id
    });
    if (powerlevel >= 10) {
        if (!message.content.startsWith(prefix) || message.author.bot) return;
        const args = message.content.slice(prefix.length).trim().split(/ +/);
        const commandName = args[0].toLowerCase();
        console.log(commandName);
        const command = await commands.get(commandName) || await commands.get(await aliases.get(commandName));
        if (!command) return;
        try {
            await command.run(client, message, args);
        } catch (error) {
            console.error(error);
            message.reply('There was an error executing that command.');
        }
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxkaXNjb3JkXFxtYW5pa2luZWtvLWRpc2NvcmRcXGJvdHNcXG1hbmlraW5la28tYm90XFxzcmNcXGV2ZW50c1xcbWVzc2FnZUNyZWF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQsIENvbGxlY3Rpb24sIE1lc3NhZ2UgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuXG5pbXBvcnQgeyBGbGFzaGNvcmUgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHsgQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZSwgQXR0YWNobWVudCwgQ29tbWFuZEludGVyYWN0aW9uLCBDb21tYW5kSW50ZXJhY3Rpb25PcHRpb25SZXNvbHZlciwgRW1iZWRCdWlsZGVyLCBFbWJlZEZpZWxkLCBJbnRlcmFjdGlvbiB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IGVtYmVkIGZyb20gXCIuLi9jb21tYW5kcy9lbWJlZFwiO1xuaW1wb3J0IGxvYWRDb21tYW5kcyBmcm9tIFwiLi4vc2VydmljZXMvbGVnYWN5X2NvbW1hbmRsb2FkZXJcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5leHBvcnQgbGV0IHByZWZpeCA9ICdtPic7XG5pbXBvcnQgY29tbWFuZHMgZnJvbSAnLi4vc2VydmljZXMvbGVnYWN5X2NvbW1hbmRsb2FkZXInO1xuaW1wb3J0IGFsaWFzZXMgZnJvbSAnLi4vc2VydmljZXMvbGVnYWN5X2NvbW1hbmRsb2FkZXInO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5cbmV4cG9ydCBsZXQgY29tbWFuZHNQYXRoID0gcGF0aC5qb2luKHBhdGguZGlybmFtZSgnLi4vY29tbWFuZHMnKSk7XG5cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKG1lc3NhZ2UgOiBNZXNzYWdlKSA9PiB7XG5cdHZhciBwb3dlcmxldmVsID0gYXdhaXQgRmxhc2hjb3JlLmdldCgncG93ZXJsZXZlbCcsIHtcbiAgICAgICAgbmFtZXNwYWNlOiBtZXNzYWdlLmF1dGhvci5pZCxcbiAgICB9KSBhcyBudW1iZXI7XG5cbiAgICBpZiAocG93ZXJsZXZlbCA+PSAxMCkge1xuICAgICAgICBpZiAoIW1lc3NhZ2UuY29udGVudC5zdGFydHNXaXRoKHByZWZpeCkgfHwgbWVzc2FnZS5hdXRob3IuYm90KSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgYXJncyA9IG1lc3NhZ2UuY29udGVudC5zbGljZShwcmVmaXgubGVuZ3RoKS50cmltKCkuc3BsaXQoLyArLyk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmROYW1lID0gYXJnc1swXS50b0xvd2VyQ2FzZSgpO1xuXHRcdGNvbnNvbGUubG9nKGNvbW1hbmROYW1lKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGF3YWl0IGNvbW1hbmRzLmdldChjb21tYW5kTmFtZSkgfHwgIGF3YWl0IGNvbW1hbmRzLmdldChhd2FpdCBhbGlhc2VzLmdldChjb21tYW5kTmFtZSkpO1xuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgKGNvbW1hbmQgYXMgeyBydW46IChjbGllbnQ6IENsaWVudCwgbWVzc2FnZTogTWVzc2FnZSwgYXJnczogYW55KSA9PiBQcm9taXNlPHZvaWQ+IH0pLnJ1bihjbGllbnQsIG1lc3NhZ2UsIGFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBtZXNzYWdlLnJlcGx5KCdUaGVyZSB3YXMgYW4gZXJyb3IgZXhlY3V0aW5nIHRoYXQgY29tbWFuZC4nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuIl0sIm5hbWVzIjpbIkZsYXNoY29yZSIsInBhdGgiLCJwcmVmaXgiLCJjb21tYW5kcyIsImFsaWFzZXMiLCJjb21tYW5kc1BhdGgiLCJqb2luIiwiZGlybmFtZSIsIm1lc3NhZ2UiLCJwb3dlcmxldmVsIiwiZ2V0IiwibmFtZXNwYWNlIiwiYXV0aG9yIiwiaWQiLCJjb250ZW50Iiwic3RhcnRzV2l0aCIsImJvdCIsImFyZ3MiLCJzbGljZSIsImxlbmd0aCIsInRyaW0iLCJzcGxpdCIsImNvbW1hbmROYW1lIiwidG9Mb3dlckNhc2UiLCJjb25zb2xlIiwibG9nIiwiY29tbWFuZCIsInJ1biIsImNsaWVudCIsImVycm9yIiwicmVwbHkiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFFQSxTQUFTQSxTQUFTLFFBQVEsVUFBUztBQUluQyxPQUFPQyxVQUFVLE9BQU87QUFDeEIsT0FBTyxJQUFJQyxTQUFTLEtBQUs7QUFDekIsT0FBT0MsY0FBYyxzQ0FBbUM7QUFDeEQsT0FBT0MsYUFBYSxzQ0FBbUM7QUFHdkQsT0FBTyxJQUFJQyxlQUFlSixLQUFLSyxJQUFJLENBQUNMLEtBQUtNLE9BQU8sQ0FBQyxnQkFBZ0I7QUFHakUsZUFBZSxDQUFBLE9BQU9DO0lBQ3JCLElBQUlDLGFBQWEsTUFBTVQsVUFBVVUsR0FBRyxDQUFDLGNBQWM7UUFDNUNDLFdBQVdILFFBQVFJLE1BQU0sQ0FBQ0MsRUFBRTtJQUNoQztJQUVBLElBQUlKLGNBQWMsSUFBSTtRQUNsQixJQUFJLENBQUNELFFBQVFNLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDYixXQUFXTSxRQUFRSSxNQUFNLENBQUNJLEdBQUcsRUFBRTtRQUUvRCxNQUFNQyxPQUFPVCxRQUFRTSxPQUFPLENBQUNJLEtBQUssQ0FBQ2hCLE9BQU9pQixNQUFNLEVBQUVDLElBQUksR0FBR0MsS0FBSyxDQUFDO1FBQy9ELE1BQU1DLGNBQWNMLElBQUksQ0FBQyxFQUFFLENBQUNNLFdBQVc7UUFDN0NDLFFBQVFDLEdBQUcsQ0FBQ0g7UUFDTixNQUFNSSxVQUFVLE1BQU12QixTQUFTTyxHQUFHLENBQUNZLGdCQUFpQixNQUFNbkIsU0FBU08sR0FBRyxDQUFDLE1BQU1OLFFBQVFNLEdBQUcsQ0FBQ1k7UUFDekYsSUFBSSxDQUFDSSxTQUFTO1FBRWQsSUFBSTtZQUNBLE1BQU0sQUFBQ0EsUUFBb0ZDLEdBQUcsQ0FBQ0MsUUFBUXBCLFNBQVNTO1FBQ3BILEVBQUUsT0FBT1ksT0FBTztZQUNaTCxRQUFRSyxLQUFLLENBQUNBO1lBQ2RyQixRQUFRc0IsS0FBSyxDQUFDO1FBQ2xCO0lBQ0o7QUFDSixDQUFBLEVBQUMifQ==