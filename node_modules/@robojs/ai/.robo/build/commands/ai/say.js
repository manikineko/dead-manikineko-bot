import { AI } from "../../../../.robo/build/core/ai.js";
import { logger } from "../../../../.robo/build/core/logger.js";
import { ChannelType } from "discord.js";
export const config = {
    description: 'What would you like me to say?',
    options: [
        {
            description: 'What should I say?',
            name: 'message',
            required: true
        },
        {
            description: 'Say exactly?',
            name: 'exact',
            type: 'boolean'
        },
        {
            description: 'Where should I send the message to?',
            name: 'channel',
            type: 'channel'
        },
        {
            description: 'Who should I mention?',
            name: 'mention',
            type: 'mention'
        }
    ]
};
export default (async (interaction)=>{
    // Get the message and channel
    const message = interaction.options.get('message')?.value;
    const exact = interaction.options.get('exact')?.value;
    const channel = interaction.options.get('channel')?.channel ?? interaction.channel;
    const mention = interaction.options.get('mention')?.member;
    // Validate the message and channel
    if (!message?.trim()) {
        return 'You need to provide a message to send!';
    }
    if (!channel) {
        return 'Invalid channel.';
    }
    if (![
        ChannelType.GuildAnnouncement,
        ChannelType.GuildText
    ].includes(channel.type) || !('send' in channel)) {
        return 'The specified channel is not a text channel.';
    }
    // Send the exact message if that's what we need (& handle newlines)
    if (exact) {
        logger.debug('Sending exact message:', message.replace(/\\n\\n/g, '\n\n'));
        await channel.send(message.replace(/\\n\\n/g, '\n\n'));
        return {
            content: 'Message sent!',
            ephemeral: true
        };
    }
    // Reply using the AI engine
    let result = undefined;
    try {
        result = await new Promise((resolve)=>{
            AI.chat([
                {
                    role: 'user',
                    content: 'Reword the following in your style: ' + message
                }
            ], {
                channel: interaction.channel ?? undefined,
                onReply: (reply)=>{
                    resolve(reply);
                }
            });
        });
    } catch (error) {
        return {
            content: 'I could not send the message. Please try again later.',
            ephemeral: true
        };
    }
    // Send the message to the text channel
    if (mention) {
        result.text = mention.toString() + ' ' + result.text;
    }
    channel.send({
        content: result.text,
        components: result.components,
        embeds: result.embeds,
        files: result.files
    });
    return {
        content: 'Message sent!',
        ephemeral: true
    };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYWkvc3JjL2NvbW1hbmRzL2FpL3NheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBSSB9IGZyb20gJ0AvY29yZS9haS5qcydcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0AvY29yZS9sb2dnZXIuanMnXG5pbXBvcnQgeyBDaGFubmVsVHlwZSwgQ29tbWFuZEludGVyYWN0aW9uIH0gZnJvbSAnZGlzY29yZC5qcydcbmltcG9ydCB0eXBlIHsgQ2hhdFJlcGx5IH0gZnJvbSAnQC9jb3JlL2FpLmpzJ1xuaW1wb3J0IHR5cGUgeyBDb21tYW5kQ29uZmlnIH0gZnJvbSAncm9iby5qcydcblxuZXhwb3J0IGNvbnN0IGNvbmZpZzogQ29tbWFuZENvbmZpZyA9IHtcblx0ZGVzY3JpcHRpb246ICdXaGF0IHdvdWxkIHlvdSBsaWtlIG1lIHRvIHNheT8nLFxuXHRvcHRpb25zOiBbXG5cdFx0e1xuXHRcdFx0ZGVzY3JpcHRpb246ICdXaGF0IHNob3VsZCBJIHNheT8nLFxuXHRcdFx0bmFtZTogJ21lc3NhZ2UnLFxuXHRcdFx0cmVxdWlyZWQ6IHRydWVcblx0XHR9LFxuXHRcdHtcblx0XHRcdGRlc2NyaXB0aW9uOiAnU2F5IGV4YWN0bHk/Jyxcblx0XHRcdG5hbWU6ICdleGFjdCcsXG5cdFx0XHR0eXBlOiAnYm9vbGVhbidcblx0XHR9LFxuXHRcdHtcblx0XHRcdGRlc2NyaXB0aW9uOiAnV2hlcmUgc2hvdWxkIEkgc2VuZCB0aGUgbWVzc2FnZSB0bz8nLFxuXHRcdFx0bmFtZTogJ2NoYW5uZWwnLFxuXHRcdFx0dHlwZTogJ2NoYW5uZWwnXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRkZXNjcmlwdGlvbjogJ1dobyBzaG91bGQgSSBtZW50aW9uPycsXG5cdFx0XHRuYW1lOiAnbWVudGlvbicsXG5cdFx0XHR0eXBlOiAnbWVudGlvbidcblx0XHR9XG5cdF1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBDb21tYW5kSW50ZXJhY3Rpb24pID0+IHtcblx0Ly8gR2V0IHRoZSBtZXNzYWdlIGFuZCBjaGFubmVsXG5cdGNvbnN0IG1lc3NhZ2UgPSBpbnRlcmFjdGlvbi5vcHRpb25zLmdldCgnbWVzc2FnZScpPy52YWx1ZSBhcyBzdHJpbmdcblx0Y29uc3QgZXhhY3QgPSBpbnRlcmFjdGlvbi5vcHRpb25zLmdldCgnZXhhY3QnKT8udmFsdWUgYXMgYm9vbGVhblxuXHRjb25zdCBjaGFubmVsID0gaW50ZXJhY3Rpb24ub3B0aW9ucy5nZXQoJ2NoYW5uZWwnKT8uY2hhbm5lbCA/PyBpbnRlcmFjdGlvbi5jaGFubmVsXG5cdGNvbnN0IG1lbnRpb24gPSBpbnRlcmFjdGlvbi5vcHRpb25zLmdldCgnbWVudGlvbicpPy5tZW1iZXJcblxuXHQvLyBWYWxpZGF0ZSB0aGUgbWVzc2FnZSBhbmQgY2hhbm5lbFxuXHRpZiAoIW1lc3NhZ2U/LnRyaW0oKSkge1xuXHRcdHJldHVybiAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIG1lc3NhZ2UgdG8gc2VuZCEnXG5cdH1cblxuXHRpZiAoIWNoYW5uZWwpIHtcblx0XHRyZXR1cm4gJ0ludmFsaWQgY2hhbm5lbC4nXG5cdH1cblxuXHRpZiAoIVtDaGFubmVsVHlwZS5HdWlsZEFubm91bmNlbWVudCwgQ2hhbm5lbFR5cGUuR3VpbGRUZXh0XS5pbmNsdWRlcyhjaGFubmVsLnR5cGUpIHx8ICEoJ3NlbmQnIGluIGNoYW5uZWwpKSB7XG5cdFx0cmV0dXJuICdUaGUgc3BlY2lmaWVkIGNoYW5uZWwgaXMgbm90IGEgdGV4dCBjaGFubmVsLidcblx0fVxuXG5cdC8vIFNlbmQgdGhlIGV4YWN0IG1lc3NhZ2UgaWYgdGhhdCdzIHdoYXQgd2UgbmVlZCAoJiBoYW5kbGUgbmV3bGluZXMpXG5cdGlmIChleGFjdCkge1xuXHRcdGxvZ2dlci5kZWJ1ZygnU2VuZGluZyBleGFjdCBtZXNzYWdlOicsIG1lc3NhZ2UucmVwbGFjZSgvXFxcXG5cXFxcbi9nLCAnXFxuXFxuJykpXG5cdFx0YXdhaXQgY2hhbm5lbC5zZW5kKG1lc3NhZ2UucmVwbGFjZSgvXFxcXG5cXFxcbi9nLCAnXFxuXFxuJykpXG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29udGVudDogJ01lc3NhZ2Ugc2VudCEnLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVwbHkgdXNpbmcgdGhlIEFJIGVuZ2luZVxuXHRsZXQgcmVzdWx0OiBDaGF0UmVwbHkgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcblx0dHJ5IHtcblx0XHRyZXN1bHQgPSBhd2FpdCBuZXcgUHJvbWlzZTxDaGF0UmVwbHk+KChyZXNvbHZlKSA9PiB7XG5cdFx0XHRBSS5jaGF0KFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cm9sZTogJ3VzZXInLFxuXHRcdFx0XHRcdFx0Y29udGVudDogJ1Jld29yZCB0aGUgZm9sbG93aW5nIGluIHlvdXIgc3R5bGU6ICcgKyBtZXNzYWdlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y2hhbm5lbDogaW50ZXJhY3Rpb24uY2hhbm5lbCA/PyB1bmRlZmluZWQsXG5cdFx0XHRcdFx0b25SZXBseTogKHJlcGx5KSA9PiB7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHJlcGx5KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0KVxuXHRcdH0pXG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbnRlbnQ6ICdJIGNvdWxkIG5vdCBzZW5kIHRoZSBtZXNzYWdlLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG5cdFx0XHRlcGhlbWVyYWw6IHRydWVcblx0XHR9XG5cdH1cblxuXHQvLyBTZW5kIHRoZSBtZXNzYWdlIHRvIHRoZSB0ZXh0IGNoYW5uZWxcblx0aWYgKG1lbnRpb24pIHtcblx0XHRyZXN1bHQudGV4dCA9IG1lbnRpb24udG9TdHJpbmcoKSArICcgJyArIHJlc3VsdC50ZXh0XG5cdH1cblx0Y2hhbm5lbC5zZW5kKHtcblx0XHRjb250ZW50OiByZXN1bHQudGV4dCxcblx0XHRjb21wb25lbnRzOiByZXN1bHQuY29tcG9uZW50cyxcblx0XHRlbWJlZHM6IHJlc3VsdC5lbWJlZHMsXG5cdFx0ZmlsZXM6IHJlc3VsdC5maWxlc1xuXHR9KVxuXHRyZXR1cm4ge1xuXHRcdGNvbnRlbnQ6ICdNZXNzYWdlIHNlbnQhJyxcblx0XHRlcGhlbWVyYWw6IHRydWVcblx0fVxufVxuIl0sIm5hbWVzIjpbIkFJIiwibG9nZ2VyIiwiQ2hhbm5lbFR5cGUiLCJjb25maWciLCJkZXNjcmlwdGlvbiIsIm9wdGlvbnMiLCJuYW1lIiwicmVxdWlyZWQiLCJ0eXBlIiwiaW50ZXJhY3Rpb24iLCJtZXNzYWdlIiwiZ2V0IiwidmFsdWUiLCJleGFjdCIsImNoYW5uZWwiLCJtZW50aW9uIiwibWVtYmVyIiwidHJpbSIsIkd1aWxkQW5ub3VuY2VtZW50IiwiR3VpbGRUZXh0IiwiaW5jbHVkZXMiLCJkZWJ1ZyIsInJlcGxhY2UiLCJzZW5kIiwiY29udGVudCIsImVwaGVtZXJhbCIsInJlc3VsdCIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2hhdCIsInJvbGUiLCJvblJlcGx5IiwicmVwbHkiLCJlcnJvciIsInRleHQiLCJ0b1N0cmluZyIsImNvbXBvbmVudHMiLCJlbWJlZHMiLCJmaWxlcyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsRUFBRSxRQUFRLHFDQUFjO0FBQ2pDLFNBQVNDLE1BQU0sUUFBUSx5Q0FBa0I7QUFDekMsU0FBU0MsV0FBVyxRQUE0QixhQUFZO0FBSTVELE9BQU8sTUFBTUMsU0FBd0I7SUFDcENDLGFBQWE7SUFDYkMsU0FBUztRQUNSO1lBQ0NELGFBQWE7WUFDYkUsTUFBTTtZQUNOQyxVQUFVLElBQUk7UUFDZjtRQUNBO1lBQ0NILGFBQWE7WUFDYkUsTUFBTTtZQUNORSxNQUFNO1FBQ1A7UUFDQTtZQUNDSixhQUFhO1lBQ2JFLE1BQU07WUFDTkUsTUFBTTtRQUNQO1FBQ0E7WUFDQ0osYUFBYTtZQUNiRSxNQUFNO1lBQ05FLE1BQU07UUFDUDtLQUNBO0FBQ0YsRUFBQztBQUVELGVBQWUsQ0FBQSxPQUFPQyxjQUFvQztJQUN6RCw4QkFBOEI7SUFDOUIsTUFBTUMsVUFBVUQsWUFBWUosT0FBTyxDQUFDTSxHQUFHLENBQUMsWUFBWUM7SUFDcEQsTUFBTUMsUUFBUUosWUFBWUosT0FBTyxDQUFDTSxHQUFHLENBQUMsVUFBVUM7SUFDaEQsTUFBTUUsVUFBVUwsWUFBWUosT0FBTyxDQUFDTSxHQUFHLENBQUMsWUFBWUcsV0FBV0wsWUFBWUssT0FBTztJQUNsRixNQUFNQyxVQUFVTixZQUFZSixPQUFPLENBQUNNLEdBQUcsQ0FBQyxZQUFZSztJQUVwRCxtQ0FBbUM7SUFDbkMsSUFBSSxDQUFDTixTQUFTTyxRQUFRO1FBQ3JCLE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxDQUFDSCxTQUFTO1FBQ2IsT0FBTztJQUNSLENBQUM7SUFFRCxJQUFJLENBQUM7UUFBQ1osWUFBWWdCLGlCQUFpQjtRQUFFaEIsWUFBWWlCLFNBQVM7S0FBQyxDQUFDQyxRQUFRLENBQUNOLFFBQVFOLElBQUksS0FBSyxDQUFFLENBQUEsVUFBVU0sT0FBTSxHQUFJO1FBQzNHLE9BQU87SUFDUixDQUFDO0lBRUQsb0VBQW9FO0lBQ3BFLElBQUlELE9BQU87UUFDVlosT0FBT29CLEtBQUssQ0FBQywwQkFBMEJYLFFBQVFZLE9BQU8sQ0FBQyxXQUFXO1FBQ2xFLE1BQU1SLFFBQVFTLElBQUksQ0FBQ2IsUUFBUVksT0FBTyxDQUFDLFdBQVc7UUFFOUMsT0FBTztZQUNORSxTQUFTO1lBQ1RDLFdBQVcsSUFBSTtRQUNoQjtJQUNELENBQUM7SUFFRCw0QkFBNEI7SUFDNUIsSUFBSUMsU0FBZ0NDO0lBQ3BDLElBQUk7UUFDSEQsU0FBUyxNQUFNLElBQUlFLFFBQW1CLENBQUNDLFVBQVk7WUFDbEQ3QixHQUFHOEIsSUFBSSxDQUNOO2dCQUNDO29CQUNDQyxNQUFNO29CQUNOUCxTQUFTLHlDQUF5Q2Q7Z0JBQ25EO2FBQ0EsRUFDRDtnQkFDQ0ksU0FBU0wsWUFBWUssT0FBTyxJQUFJYTtnQkFDaENLLFNBQVMsQ0FBQ0MsUUFBVTtvQkFDbkJKLFFBQVFJO2dCQUNUO1lBQ0Q7UUFFRjtJQUNELEVBQUUsT0FBT0MsT0FBTztRQUNmLE9BQU87WUFDTlYsU0FBUztZQUNUQyxXQUFXLElBQUk7UUFDaEI7SUFDRDtJQUVBLHVDQUF1QztJQUN2QyxJQUFJVixTQUFTO1FBQ1pXLE9BQU9TLElBQUksR0FBR3BCLFFBQVFxQixRQUFRLEtBQUssTUFBTVYsT0FBT1MsSUFBSTtJQUNyRCxDQUFDO0lBQ0RyQixRQUFRUyxJQUFJLENBQUM7UUFDWkMsU0FBU0UsT0FBT1MsSUFBSTtRQUNwQkUsWUFBWVgsT0FBT1csVUFBVTtRQUM3QkMsUUFBUVosT0FBT1ksTUFBTTtRQUNyQkMsT0FBT2IsT0FBT2EsS0FBSztJQUNwQjtJQUNBLE9BQU87UUFDTmYsU0FBUztRQUNUQyxXQUFXLElBQUk7SUFDaEI7QUFDRCxDQUFBLEVBQUMifQ==