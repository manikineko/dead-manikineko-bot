import { randomUUID } from "crypto";
import { Flashcore } from "robo.js";
async function getAllModes() {
    const modes = await Flashcore.get('ai/modes') ?? [];
    return modes;
}
async function upsertMode(mode) {
    const modes = await getAllModes();
    const index = modes.findIndex((m)=>m.name === mode.name);
    let newMode;
    if (index === -1) {
        newMode = {
            ...mode,
            id: randomUUID()
        };
        modes.push(newMode);
    } else {
        newMode = {
            ...modes[index],
            ...mode
        };
        modes[index] = newMode;
    }
    await Flashcore.set('ai/modes', modes);
    return newMode;
}
export const AiEngine = {
    Modes: {
        getAll: getAllModes,
        upsert: upsertMode
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYWkvc3JjL2NvcmUvZW5naW5lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdjcnlwdG8nXG5pbXBvcnQgeyBGbGFzaGNvcmUgfSBmcm9tICdyb2JvLmpzJ1xuXG5pbnRlcmZhY2UgTW9kZSB7XG5cdGlkOiBzdHJpbmdcblx0bmFtZTogc3RyaW5nXG5cdHN5c3RlbU1lc3NhZ2U/OiBzdHJpbmdcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QWxsTW9kZXMoKTogUHJvbWlzZTxNb2RlW10+IHtcblx0Y29uc3QgbW9kZXMgPSAoYXdhaXQgRmxhc2hjb3JlLmdldDxNb2RlW10+KCdhaS9tb2RlcycpKSA/PyBbXVxuXG5cdHJldHVybiBtb2Rlc1xufVxuXG5hc3luYyBmdW5jdGlvbiB1cHNlcnRNb2RlKG1vZGU6IE9taXQ8TW9kZSwgJ2lkJz4pOiBQcm9taXNlPE1vZGU+IHtcblx0Y29uc3QgbW9kZXMgPSBhd2FpdCBnZXRBbGxNb2RlcygpXG5cdGNvbnN0IGluZGV4ID0gbW9kZXMuZmluZEluZGV4KChtKSA9PiBtLm5hbWUgPT09IG1vZGUubmFtZSlcblx0bGV0IG5ld01vZGU6IE1vZGVcblxuXHRpZiAoaW5kZXggPT09IC0xKSB7XG5cdFx0bmV3TW9kZSA9IHtcblx0XHRcdC4uLm1vZGUsXG5cdFx0XHRpZDogcmFuZG9tVVVJRCgpXG5cdFx0fVxuXHRcdG1vZGVzLnB1c2gobmV3TW9kZSlcblx0fSBlbHNlIHtcblx0XHRuZXdNb2RlID0ge1xuXHRcdFx0Li4ubW9kZXNbaW5kZXhdLFxuXHRcdFx0Li4ubW9kZVxuXHRcdH1cblx0XHRtb2Rlc1tpbmRleF0gPSBuZXdNb2RlXG5cdH1cblxuXHRhd2FpdCBGbGFzaGNvcmUuc2V0KCdhaS9tb2RlcycsIG1vZGVzKVxuXHRyZXR1cm4gbmV3TW9kZVxufVxuXG5leHBvcnQgY29uc3QgQWlFbmdpbmUgPSB7XG5cdE1vZGVzOiB7XG5cdFx0Z2V0QWxsOiBnZXRBbGxNb2Rlcyxcblx0XHR1cHNlcnQ6IHVwc2VydE1vZGVcblx0fVxufVxuIl0sIm5hbWVzIjpbInJhbmRvbVVVSUQiLCJGbGFzaGNvcmUiLCJnZXRBbGxNb2RlcyIsIm1vZGVzIiwiZ2V0IiwidXBzZXJ0TW9kZSIsIm1vZGUiLCJpbmRleCIsImZpbmRJbmRleCIsIm0iLCJuYW1lIiwibmV3TW9kZSIsImlkIiwicHVzaCIsInNldCIsIkFpRW5naW5lIiwiTW9kZXMiLCJnZXRBbGwiLCJ1cHNlcnQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFVBQVUsUUFBUSxTQUFRO0FBQ25DLFNBQVNDLFNBQVMsUUFBUSxVQUFTO0FBUW5DLGVBQWVDLGNBQStCO0lBQzdDLE1BQU1DLFFBQVEsQUFBQyxNQUFNRixVQUFVRyxHQUFHLENBQVMsZUFBZ0IsRUFBRTtJQUU3RCxPQUFPRDtBQUNSO0FBRUEsZUFBZUUsV0FBV0MsSUFBc0IsRUFBaUI7SUFDaEUsTUFBTUgsUUFBUSxNQUFNRDtJQUNwQixNQUFNSyxRQUFRSixNQUFNSyxTQUFTLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsSUFBSSxLQUFLSixLQUFLSSxJQUFJO0lBQ3pELElBQUlDO0lBRUosSUFBSUosVUFBVSxDQUFDLEdBQUc7UUFDakJJLFVBQVU7WUFDVCxHQUFHTCxJQUFJO1lBQ1BNLElBQUlaO1FBQ0w7UUFDQUcsTUFBTVUsSUFBSSxDQUFDRjtJQUNaLE9BQU87UUFDTkEsVUFBVTtZQUNULEdBQUdSLEtBQUssQ0FBQ0ksTUFBTTtZQUNmLEdBQUdELElBQUk7UUFDUjtRQUNBSCxLQUFLLENBQUNJLE1BQU0sR0FBR0k7SUFDaEIsQ0FBQztJQUVELE1BQU1WLFVBQVVhLEdBQUcsQ0FBQyxZQUFZWDtJQUNoQyxPQUFPUTtBQUNSO0FBRUEsT0FBTyxNQUFNSSxXQUFXO0lBQ3ZCQyxPQUFPO1FBQ05DLFFBQVFmO1FBQ1JnQixRQUFRYjtJQUNUO0FBQ0QsRUFBQyJ9