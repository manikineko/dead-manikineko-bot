import type { GuildMember, TextBasedChannel } from 'discord.js';
import type { Command } from 'robo.js';
export type Hook = (context: HookContext, iteration: number) => Promise<ChatMessage[]>;
type HookEvent = 'chat';
interface HookContext {
    channel?: TextBasedChannel | null;
    member?: GuildMember | null;
    messages: ChatMessage[];
}
export interface ChatMessage {
    content: ChatMessageContent;
    function_call?: ChatFunctionCall;
    name?: string;
    role: 'assistant' | 'function' | 'system' | 'user';
}
interface ChatMessageContentObject {
    image_url?: string;
    text?: string;
    type: 'image_url' | 'text';
}
export type ChatMessageContent = string | ChatMessageContentObject[];
export interface ChatFunction {
    name: string;
    description: string;
    parameters: ChatFunctionParameters;
}
export interface ChatFunctionParameters {
    properties: Record<string, ChatFunctionProperty>;
    required?: string[];
    type?: 'array' | 'object';
}
export interface ChatFunctionCall {
    name: string;
    arguments: Record<string, string>;
}
export interface ChatFunctionProperty {
    description?: string;
    enum?: string[];
    items?: ChatFunctionProperty;
    type: 'array' | 'string';
}
export interface ChatOptions {
    functions?: ChatFunction[];
    model?: string;
    showTyping?: boolean;
    temperature?: number;
    threadId?: string | null;
    userId?: string | null;
}
export interface GenerateImageOptions {
    model?: string;
    prompt: string;
}
export interface GenerateImageResult {
    images: Array<{
        url: string;
    }>;
}
export interface ChatResult {
    finish_reason: string;
    message?: ChatMessage;
}
export declare abstract class BaseEngine {
    protected _hooks: Record<HookEvent, Hook[]>;
    callHooks(event: HookEvent, context: HookContext, iteration: number): Promise<ChatMessage[]>;
    abstract chat(messages: ChatMessage[], options: ChatOptions): Promise<ChatResult>;
    abstract generateImage(options: GenerateImageOptions): Promise<GenerateImageResult>;
    abstract getFunctionHandlers(): Record<string, Command>;
    abstract getInfo(): Record<string, unknown>;
    /**
     * Perform any initialization required by the engine here.
     */
    init(): Promise<void>;
    off(event: HookEvent, hook: Hook): void;
    on(event: HookEvent, hook: Hook): void;
}
export {};
