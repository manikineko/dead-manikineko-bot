export class BaseEngine {
    async callHooks(event, context, iteration) {
        for (const hook of this._hooks[event]){
            const result = await hook(context, iteration);
            if (result) {
                context.messages = result;
            }
        }
        return context.messages;
    }
    /**
	 * Perform any initialization required by the engine here.
	 */ async init() {
    // Do nothing by default
    }
    off(event, hook) {
        const index = this._hooks[event].indexOf(hook);
        if (index !== -1) {
            this._hooks[event].splice(index, 1);
        }
    }
    on(event, hook) {
        this._hooks[event].push(hook);
    }
    constructor(){
        this._hooks = {
            chat: []
        };
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYWkvc3JjL2VuZ2luZXMvYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEd1aWxkTWVtYmVyLCBUZXh0QmFzZWRDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcydcbmltcG9ydCB0eXBlIHsgQ29tbWFuZCB9IGZyb20gJ3JvYm8uanMnXG5cbmV4cG9ydCB0eXBlIEhvb2sgPSAoY29udGV4dDogSG9va0NvbnRleHQsIGl0ZXJhdGlvbjogbnVtYmVyKSA9PiBQcm9taXNlPENoYXRNZXNzYWdlW10+XG5cbnR5cGUgSG9va0V2ZW50ID0gJ2NoYXQnXG5cbmludGVyZmFjZSBIb29rQ29udGV4dCB7XG5cdGNoYW5uZWw/OiBUZXh0QmFzZWRDaGFubmVsIHwgbnVsbFxuXHRtZW1iZXI/OiBHdWlsZE1lbWJlciB8IG51bGxcblx0bWVzc2FnZXM6IENoYXRNZXNzYWdlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0TWVzc2FnZSB7XG5cdGNvbnRlbnQ6IENoYXRNZXNzYWdlQ29udGVudFxuXHRmdW5jdGlvbl9jYWxsPzogQ2hhdEZ1bmN0aW9uQ2FsbFxuXHRuYW1lPzogc3RyaW5nXG5cdHJvbGU6ICdhc3Npc3RhbnQnIHwgJ2Z1bmN0aW9uJyB8ICdzeXN0ZW0nIHwgJ3VzZXInXG59XG5cbmludGVyZmFjZSBDaGF0TWVzc2FnZUNvbnRlbnRPYmplY3Qge1xuXHRpbWFnZV91cmw/OiBzdHJpbmdcblx0dGV4dD86IHN0cmluZ1xuXHR0eXBlOiAnaW1hZ2VfdXJsJyB8ICd0ZXh0J1xufVxuXG5leHBvcnQgdHlwZSBDaGF0TWVzc2FnZUNvbnRlbnQgPSBzdHJpbmcgfCBDaGF0TWVzc2FnZUNvbnRlbnRPYmplY3RbXVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRGdW5jdGlvbiB7XG5cdG5hbWU6IHN0cmluZ1xuXHRkZXNjcmlwdGlvbjogc3RyaW5nXG5cdHBhcmFtZXRlcnM6IENoYXRGdW5jdGlvblBhcmFtZXRlcnNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0RnVuY3Rpb25QYXJhbWV0ZXJzIHtcblx0cHJvcGVydGllczogUmVjb3JkPHN0cmluZywgQ2hhdEZ1bmN0aW9uUHJvcGVydHk+XG5cdHJlcXVpcmVkPzogc3RyaW5nW11cblx0dHlwZT86ICdhcnJheScgfCAnb2JqZWN0J1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRGdW5jdGlvbkNhbGwge1xuXHRuYW1lOiBzdHJpbmdcblx0YXJndW1lbnRzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdEZ1bmN0aW9uUHJvcGVydHkge1xuXHRkZXNjcmlwdGlvbj86IHN0cmluZ1xuXHRlbnVtPzogc3RyaW5nW11cblx0aXRlbXM/OiBDaGF0RnVuY3Rpb25Qcm9wZXJ0eVxuXHR0eXBlOiAnYXJyYXknIHwgJ3N0cmluZydcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0T3B0aW9ucyB7XG5cdGZ1bmN0aW9ucz86IENoYXRGdW5jdGlvbltdXG5cdG1vZGVsPzogc3RyaW5nXG5cdHNob3dUeXBpbmc/OiBib29sZWFuXG5cdHRlbXBlcmF0dXJlPzogbnVtYmVyXG5cdHRocmVhZElkPzogc3RyaW5nIHwgbnVsbFxuXHR1c2VySWQ/OiBzdHJpbmcgfCBudWxsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhdGVJbWFnZU9wdGlvbnMge1xuXHRtb2RlbD86IHN0cmluZ1xuXHRwcm9tcHQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlSW1hZ2VSZXN1bHQge1xuXHRpbWFnZXM6IEFycmF5PHtcblx0XHR1cmw6IHN0cmluZ1xuXHR9PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRSZXN1bHQge1xuXHRmaW5pc2hfcmVhc29uOiBzdHJpbmdcblx0bWVzc2FnZT86IENoYXRNZXNzYWdlXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRW5naW5lIHtcblx0cHJvdGVjdGVkIF9ob29rczogUmVjb3JkPEhvb2tFdmVudCwgSG9va1tdPiA9IHtcblx0XHRjaGF0OiBbXVxuXHR9XG5cblx0cHVibGljIGFzeW5jIGNhbGxIb29rcyhldmVudDogSG9va0V2ZW50LCBjb250ZXh0OiBIb29rQ29udGV4dCwgaXRlcmF0aW9uOiBudW1iZXIpOiBQcm9taXNlPENoYXRNZXNzYWdlW10+IHtcblx0XHRmb3IgKGNvbnN0IGhvb2sgb2YgdGhpcy5faG9va3NbZXZlbnRdKSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBob29rKGNvbnRleHQsIGl0ZXJhdGlvbilcblx0XHRcdGlmIChyZXN1bHQpIHtcblx0XHRcdFx0Y29udGV4dC5tZXNzYWdlcyA9IHJlc3VsdFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjb250ZXh0Lm1lc3NhZ2VzXG5cdH1cblxuXHRwdWJsaWMgYWJzdHJhY3QgY2hhdChtZXNzYWdlczogQ2hhdE1lc3NhZ2VbXSwgb3B0aW9uczogQ2hhdE9wdGlvbnMpOiBQcm9taXNlPENoYXRSZXN1bHQ+XG5cblx0cHVibGljIGFic3RyYWN0IGdlbmVyYXRlSW1hZ2Uob3B0aW9uczogR2VuZXJhdGVJbWFnZU9wdGlvbnMpOiBQcm9taXNlPEdlbmVyYXRlSW1hZ2VSZXN1bHQ+XG5cblx0cHVibGljIGFic3RyYWN0IGdldEZ1bmN0aW9uSGFuZGxlcnMoKTogUmVjb3JkPHN0cmluZywgQ29tbWFuZD5cblxuXHRwdWJsaWMgYWJzdHJhY3QgZ2V0SW5mbygpOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuXG5cdC8qKlxuXHQgKiBQZXJmb3JtIGFueSBpbml0aWFsaXphdGlvbiByZXF1aXJlZCBieSB0aGUgZW5naW5lIGhlcmUuXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgaW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyBEbyBub3RoaW5nIGJ5IGRlZmF1bHRcblx0fVxuXG5cdHB1YmxpYyBvZmYoZXZlbnQ6IEhvb2tFdmVudCwgaG9vazogSG9vaykge1xuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5faG9va3NbZXZlbnRdLmluZGV4T2YoaG9vaylcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHR0aGlzLl9ob29rc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBvbihldmVudDogSG9va0V2ZW50LCBob29rOiBIb29rKSB7XG5cdFx0dGhpcy5faG9va3NbZXZlbnRdLnB1c2goaG9vaylcblx0fVxufVxuIl0sIm5hbWVzIjpbIkJhc2VFbmdpbmUiLCJjYWxsSG9va3MiLCJldmVudCIsImNvbnRleHQiLCJpdGVyYXRpb24iLCJob29rIiwiX2hvb2tzIiwicmVzdWx0IiwibWVzc2FnZXMiLCJpbml0Iiwib2ZmIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwib24iLCJwdXNoIiwiY2hhdCJdLCJtYXBwaW5ncyI6IkFBNkVBLE9BQU8sTUFBZUE7SUFLckIsTUFBYUMsVUFBVUMsS0FBZ0IsRUFBRUMsT0FBb0IsRUFBRUMsU0FBaUIsRUFBMEI7UUFDekcsS0FBSyxNQUFNQyxRQUFRLElBQUksQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUU7WUFDdEMsTUFBTUssU0FBUyxNQUFNRixLQUFLRixTQUFTQztZQUNuQyxJQUFJRyxRQUFRO2dCQUNYSixRQUFRSyxRQUFRLEdBQUdEO1lBQ3BCLENBQUM7UUFDRjtRQUVBLE9BQU9KLFFBQVFLLFFBQVE7SUFDeEI7SUFVQTs7RUFFQyxHQUNELE1BQWFDLE9BQXNCO0lBQ2xDLHdCQUF3QjtJQUN6QjtJQUVPQyxJQUFJUixLQUFnQixFQUFFRyxJQUFVLEVBQUU7UUFDeEMsTUFBTU0sUUFBUSxJQUFJLENBQUNMLE1BQU0sQ0FBQ0osTUFBTSxDQUFDVSxPQUFPLENBQUNQO1FBQ3pDLElBQUlNLFVBQVUsQ0FBQyxHQUFHO1lBQ2pCLElBQUksQ0FBQ0wsTUFBTSxDQUFDSixNQUFNLENBQUNXLE1BQU0sQ0FBQ0YsT0FBTztRQUNsQyxDQUFDO0lBQ0Y7SUFFT0csR0FBR1osS0FBZ0IsRUFBRUcsSUFBVSxFQUFFO1FBQ3ZDLElBQUksQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUNhLElBQUksQ0FBQ1Y7SUFDekI7O2FBdkNVQyxTQUFvQztZQUM3Q1UsTUFBTSxFQUFFO1FBQ1Q7O0FBc0NELENBQUMifQ==