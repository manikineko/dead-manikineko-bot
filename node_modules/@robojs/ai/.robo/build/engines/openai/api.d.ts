import { Assistant } from '@/engines/openai/assistant.js';
import type { File, Message, Run, Thread } from './types.js';
/**
 * API bindings for OpenAI.
 * @see https://platform.openai.com/docs/api-reference
 */
export declare const openai: {
    cancelRun: typeof cancelRun;
    chat: typeof chat;
    createAssistant: typeof createAssistant;
    createImage: typeof createImage;
    createMessage: typeof createMessage;
    createRun: typeof createRun;
    createThread: typeof createThread;
    deleteFile: typeof deleteFile;
    getAssistant: typeof getAssistant;
    getRun: typeof getRun;
    getThread: typeof getThread;
    getThreadMessages: typeof getThreadMessages;
    listAssistants: typeof listAssistants;
    listFiles: typeof listFiles;
    listRuns: typeof listRuns;
    modifyAssistant: typeof modifyAssistant;
    uploadFile: typeof uploadFile;
};
interface RequestOptions {
    apiKey?: string;
    backoff?: boolean;
    body?: unknown;
    headers?: Record<string, string>;
    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS';
    query?: Record<string, unknown>;
    retries?: number;
}
interface CancelRunOptions extends RequestOptions {
    run_id: string;
    thread_id: string;
}
declare function cancelRun(options: CancelRunOptions): Promise<unknown>;
declare function chat(options: GptChatOptions): Promise<ChatResult>;
interface CreateAssistantOptions extends RequestOptions {
    description?: string | null;
    file_ids?: string[];
    instructions?: string;
    metadata?: Record<string, string>;
    model: string;
    name?: string;
    tools?: Array<{
        function?: {
            description?: string;
            name: string;
            parameters: GptFunctionParameters;
        };
        type: 'code_interpreter' | 'function' | 'retrieval';
    }>;
}
declare function createAssistant(options: CreateAssistantOptions): Promise<Assistant>;
declare function createImage(options: CreateImageOptions): Promise<CreateImageResult>;
interface CreateMessageOptions extends RequestOptions {
    thread_id: string;
    role: 'user';
    content: string;
    file_ids?: string[];
    metadata?: Record<string, string>;
}
declare function createMessage(options: CreateMessageOptions): Promise<Message>;
interface CreateRunOptions extends RequestOptions {
    assistant_id: string;
    thread_id: string;
    model?: string;
    instructions?: string;
    tools?: Array<{
        function?: {
            description?: string;
            name: string;
            parameters: GptFunctionParameters;
        };
        type: 'code_interpreter' | 'function' | 'retrieval';
    }>;
    metadata?: Record<string, string>;
}
declare function createRun(options: CreateRunOptions): Promise<Run>;
export interface CreateThreadOptions extends RequestOptions {
    messages?: Array<{
        role: 'user';
        content: string;
        file_ids?: string[];
        metadata?: Record<string, string>;
    }>;
    metadata?: Record<string, string>;
}
declare function createThread(options: CreateThreadOptions): Promise<Thread>;
interface DeleteFileOptions extends RequestOptions {
    file_id: string;
}
declare function deleteFile(options: DeleteFileOptions): Promise<unknown>;
interface GetAssistantOptions extends RequestOptions {
    assistant_id: string;
}
declare function getAssistant(options: GetAssistantOptions): Promise<Assistant>;
interface GetRunOptions extends RequestOptions {
    run_id: string;
    thread_id: string;
}
declare function getRun(options: GetRunOptions): Promise<Run>;
interface GetThreadOptions extends RequestOptions {
    thread_id: string;
}
declare function getThread(options: GetThreadOptions): Promise<Thread>;
interface GetThreadMessagesOptions extends RequestOptions {
    thread_id: string;
    limit?: number;
    order?: 'asc' | 'desc';
    after?: string;
    before?: string;
}
interface GetThreadMessagesResult {
    object: 'list';
    data: Message[];
    first_id: string;
    has_more: boolean;
    last_id: string;
}
declare function getThreadMessages(options: GetThreadMessagesOptions): Promise<GetThreadMessagesResult>;
interface ListAssistantsOptions extends RequestOptions {
    after?: string;
    before?: string;
    limit?: number;
    order?: 'asc' | 'desc';
}
interface ListResult<T> {
    data: T[];
    first_id: string;
    has_more: boolean;
    last_id: string;
    object: string;
}
declare function listAssistants(options?: ListAssistantsOptions): Promise<Assistant[]>;
interface ListFilesOptions extends RequestOptions {
    purpose?: string;
}
declare function listFiles(options?: ListFilesOptions): Promise<ListResult<File>>;
interface ListRunsOptions extends RequestOptions {
    thread_id: string;
}
declare function listRuns(options?: ListRunsOptions): Promise<ListResult<Run>>;
interface ModifyAssistantOptions extends CreateAssistantOptions {
    assistant_id: string;
}
declare function modifyAssistant(options: ModifyAssistantOptions): Promise<Assistant>;
interface UploadFileOptions extends RequestOptions {
    file: Blob;
    fileName: string;
    purpose: string;
}
declare function uploadFile(options: UploadFileOptions): Promise<File>;
interface GptChatMessage {
    content: GptChatMessageContent;
    function_call?: GptFunctionCall;
    name?: string;
    role: 'assistant' | 'function' | 'system' | 'user';
}
type GptChatMessageContentObject = {
    image_url?: string;
    text?: string;
    type: 'image_url' | 'text';
};
type GptChatMessageContent = string | GptChatMessageContentObject[];
interface GptChatOptions extends RequestOptions {
    functions?: GptFunction[];
    max_tokens?: number;
    messages: GptChatMessage[];
    model?: string;
    temperature?: number;
}
interface GptFunction {
    name: string;
    description: string;
    parameters: GptFunctionParameters;
}
interface GptFunctionParameters {
    properties: Record<string, GptFunctionProperty>;
    required?: string[];
    type?: 'array' | 'object';
}
interface GptFunctionCall {
    name: string;
    arguments: Record<string, string>;
}
interface GptFunctionProperty {
    description?: string;
    enum?: string[];
    items?: GptFunctionProperty;
    type: 'array' | 'string';
}
interface ChatResult {
    choices: Array<{
        finish_reason: string;
        index: number;
        message: GptChatMessage;
    }>;
}
interface CreateImageOptions extends RequestOptions {
    prompt: string;
    model?: string;
    n?: number;
    quality?: string;
    response_format?: string;
    size?: string;
    style?: string;
    user?: string;
}
interface CreateImageResult {
    created: number;
    data: Array<{
        url: string;
    }>;
}
export {};
