import { logger } from "../../../../.robo/build/core/logger.js";
import { hasProperties } from "../../../../.robo/build/utils/other-utils.js";
import { FormData } from "formdata-node";
import { color } from "robo.js";
import { Assistant } from "../../../../.robo/build/engines/openai/assistant.js";
/**
 * API bindings for OpenAI.
 * @see https://platform.openai.com/docs/api-reference
 */ export const openai = {
    cancelRun,
    chat,
    createAssistant,
    createImage,
    createMessage,
    createRun,
    createThread,
    deleteFile,
    getAssistant,
    getRun,
    getThread,
    getThreadMessages,
    listAssistants,
    listFiles,
    listRuns,
    modifyAssistant,
    uploadFile
};
/**
 * Calls the OpenAI chat endpoint.
 *
 * @param options The chat options.
 * @returns The chat response.
 */ async function request(urlPath, options) {
    const { apiKey =process.env.OPENAI_API_KEY , backoff =true , body , headers , method ='GET' , query , retries =3  } = options;
    let retryCount = 0;
    if (!apiKey) {
        throw new Error('OpenAI API key not found, please set it as an environment variable called OPENAI_API_KEY.');
    }
    let queryString = '';
    if (query) {
        const normalizedQuery = {};
        Object.entries(query).forEach(([key, value])=>{
            if (value !== undefined) {
                normalizedQuery[key] = String(value);
            }
        });
        queryString = '?' + new URLSearchParams(normalizedQuery).toString();
    }
    while(retryCount <= retries){
        try {
            const extraHeaders = {};
            let requestBody;
            if (body instanceof FormData) {
                requestBody = body;
            } else if (body) {
                requestBody = JSON.stringify(body);
                extraHeaders['Content-Type'] = 'application/json';
            }
            const response = await fetch('https://api.openai.com/v1' + urlPath + queryString, {
                method: method,
                headers: {
                    Authorization: `Bearer ${apiKey}`,
                    ...extraHeaders,
                    ...headers ?? {}
                },
                body: requestBody
            });
            const jsonResponse = await response.json();
            if (jsonResponse.error) {
                throw new Error(jsonResponse.error.message);
            }
            if (!response.ok) {
                throw new Error(`HTTP Error status code: ${response.status}`);
            }
            return jsonResponse;
        } catch (error) {
            // Throw error if we've reached the max number of retries
            if (retryCount === retries) {
                logger.error(error);
                throw error;
            }
            // Wait for 2^retryCount * 1000 ms (exponential backoff)
            const delay = backoff ? 2 ** retryCount * 1000 : 1000;
            const message = hasProperties(error, [
                'message'
            ]) ? error.message + ' - ' : '';
            logger.debug(error);
            logger.warn(`${message}Retrying in ${delay}ms...`);
            await new Promise((r)=>setTimeout(r, delay));
            retryCount++;
        }
    }
    throw new Error('Failed to call OpenAI API');
}
function splitOptions(options) {
    const { apiKey , backoff , body , headers , method , retries , ...rest } = options ?? {};
    return {
        bodyOptions: rest,
        requestOptions: {
            apiKey,
            backoff,
            body,
            headers,
            method,
            retries
        }
    };
}
async function cancelRun(options) {
    const { requestOptions  } = splitOptions(options);
    return request(`/threads/${options.thread_id}/runs/${options.run_id}/cancel`, {
        ...requestOptions,
        method: 'POST',
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        }
    });
}
async function chat(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { functions , max_tokens =1024 , messages , model ='gpt-3.5-turbo' , temperature =0  } = bodyOptions;
    return request('/chat/completions', {
        ...requestOptions,
        method: 'POST',
        body: {
            functions: functions?.length && !model.includes('vision') ? functions : undefined,
            max_tokens: max_tokens,
            messages: messages,
            model: model,
            temperature: temperature
        }
    });
}
async function createAssistant(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const assistantData = await request('/assistants', {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        },
        method: 'POST',
        body: bodyOptions
    });
    return new Assistant(assistantData);
}
async function createImage(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    return request('/images/generations', {
        ...requestOptions,
        method: 'POST',
        body: bodyOptions
    });
}
async function createMessage(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { thread_id , ...rest } = bodyOptions;
    return request('/threads/' + thread_id + '/messages', {
        ...requestOptions,
        method: 'POST',
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        },
        body: rest
    });
}
async function createRun(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { thread_id , ...rest } = bodyOptions;
    return request('/threads/' + thread_id + '/runs', {
        ...requestOptions,
        method: 'POST',
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        },
        body: rest
    });
}
async function createThread(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    logger.debug(`Creating ${color.bold('thread')} with options:`, bodyOptions);
    return request('/threads', {
        ...requestOptions,
        method: 'POST',
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        },
        body: bodyOptions
    });
}
async function deleteFile(options) {
    const { requestOptions  } = splitOptions(options);
    return request(`/files/${options.file_id}`, {
        ...requestOptions,
        method: 'DELETE'
    });
}
async function getAssistant(options) {
    const { requestOptions  } = splitOptions(options);
    const assistantData = await request(`/assistants/${options.assistant_id}`, {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        }
    });
    return new Assistant(assistantData);
}
async function getRun(options) {
    const { requestOptions  } = splitOptions(options);
    return request(`/threads/${options.thread_id}/runs/${options.run_id}`, {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        }
    });
}
async function getThread(options) {
    const { requestOptions  } = splitOptions(options);
    return request(`/threads/${options.thread_id}`, {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        }
    });
}
async function getThreadMessages(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { thread_id , ...rest } = bodyOptions;
    return request(`/threads/${thread_id}/messages`, {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        },
        query: rest
    });
}
async function listAssistants(options) {
    const { requestOptions  } = splitOptions(options);
    const assistantData = await request(`/assistants`, {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        }
    });
    return assistantData.data.map((data)=>new Assistant(data));
}
async function listFiles(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { purpose  } = bodyOptions;
    const query = purpose ? `?purpose=${purpose}` : '';
    return request(`/files${query}`, {
        ...requestOptions
    });
}
async function listRuns(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { thread_id  } = bodyOptions;
    return request(`/threads/${thread_id}/runs`, {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        }
    });
}
async function modifyAssistant(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { assistant_id , ...rest } = bodyOptions;
    const assistantData = await request(`/assistants/${assistant_id}`, {
        ...requestOptions,
        headers: {
            'OpenAI-Beta': 'assistants=v1'
        },
        method: 'POST',
        body: rest
    });
    return new Assistant(assistantData);
}
async function uploadFile(options) {
    const { bodyOptions , requestOptions  } = splitOptions(options);
    const { file , fileName , purpose  } = bodyOptions;
    const formData = new FormData();
    formData.set('file', file, fileName);
    formData.set('purpose', purpose);
    //return uploadFileTest()
    return request(`/files`, {
        ...requestOptions,
        method: 'POST',
        body: formData
    });
}

//# sourceMappingURL=data:application/json;base64,