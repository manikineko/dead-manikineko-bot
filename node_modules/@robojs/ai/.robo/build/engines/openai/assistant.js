import { _PREFIX } from "../../../../.robo/build/core/constants.js";
import { openai } from "./api.js";
import { Flashcore, color, logger } from "robo.js";
export class Assistant {
    constructor(data){
        this._data = data;
    }
    get data() {
        return this._data;
    }
    async thread(options) {
        const { threadId , threadMessage  } = options;
        // First let's load the thread data
        const openaiThreadId = await Flashcore.get(threadId, {
            namespace: _PREFIX + '/thread-index'
        });
        let thread = await Flashcore.get(openaiThreadId, {
            namespace: _PREFIX + '/thread'
        });
        const threadExists = !!thread // Do not re-assign this later!
        ;
        logger.debug(`Found cached thread for "${color.bold(threadId)}":`, thread);
        // No thread data? Try getting it from OpenAI and cache it
        if (!threadExists && openaiThreadId) {
            thread = await openai.getThread({
                thread_id: openaiThreadId
            });
            logger.debug(`Retrieved fresh thread data:`, thread);
        }
        // Create a new thread if it really doesn't exist
        let isThreadCreated = false;
        if (!thread) {
            thread = await openai.createThread({
                messages: [
                    threadMessage
                ],
                metadata: {
                    threadId: threadId
                }
            });
            isThreadCreated = true;
            logger.debug(`Created new thread:`, thread);
        }
        // Still no thread? That's not good, abort!
        if (!thread) {
            throw new Error(`Failed to create thread for "${threadId}"`);
        }
        // Index the thread and its OpenAI ID equivalent
        if (!threadExists) {
            logger.debug(`Caching thread data for ${threadId}:`, thread);
            await Flashcore.set(thread.id, thread, {
                namespace: _PREFIX + '/thread'
            });
            await Flashcore.set(threadId, thread.id, {
                namespace: _PREFIX + '/thread-index'
            });
        }
        return {
            thread,
            threadCreated: isThreadCreated
        };
    }
    toJSON() {
        return JSON.stringify(this._data, null, 2);
    }
    toString() {
        return this._data.id;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYWkvc3JjL2VuZ2luZXMvb3BlbmFpL2Fzc2lzdGFudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaHJlYWQgfSBmcm9tICcuL3R5cGVzLmpzJ1xuaW1wb3J0IHsgX1BSRUZJWCB9IGZyb20gJ0AvY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyBDcmVhdGVUaHJlYWRPcHRpb25zLCBvcGVuYWkgfSBmcm9tICcuL2FwaS5qcydcbmltcG9ydCB7IENoYXRGdW5jdGlvbiwgQ2hhdE1lc3NhZ2UgfSBmcm9tICcuLi9iYXNlLmpzJ1xuaW1wb3J0IHsgRmxhc2hjb3JlLCBjb2xvciwgbG9nZ2VyIH0gZnJvbSAncm9iby5qcydcblxuZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnREYXRhIHtcblx0aWQ6IHN0cmluZ1xuXHRvYmplY3Q6IHN0cmluZ1xuXHRjcmVhdGVkX2F0OiBudW1iZXJcblx0bmFtZTogc3RyaW5nXG5cdGRlc2NyaXB0aW9uOiBzdHJpbmcgfCBudWxsXG5cdG1vZGVsOiBzdHJpbmdcblx0aW5zdHJ1Y3Rpb25zOiBzdHJpbmdcblx0dG9vbHM6IEFycmF5PHtcblx0XHRmdW5jdGlvbj86IENoYXRGdW5jdGlvblxuXHRcdHR5cGU6ICdjb2RlX2ludGVycHJldGVyJyB8ICdmdW5jdGlvbicgfCAncmV0cmlldmFsJ1xuXHR9PlxuXHRmaWxlX2lkczogc3RyaW5nW11cblx0bWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbn1cblxuaW50ZXJmYWNlIFRocmVhZE9wdGlvbnMge1xuXHRtZXNzYWdlczogQ2hhdE1lc3NhZ2VbXVxuXHR0aHJlYWRJZDogc3RyaW5nXG5cdHRocmVhZE1lc3NhZ2U6IE5vbk51bGxhYmxlPENyZWF0ZVRocmVhZE9wdGlvbnNbJ21lc3NhZ2VzJ10+W251bWJlcl1cblx0dXNlcklkPzogc3RyaW5nIHwgbnVsbFxufVxuXG5pbnRlcmZhY2UgVGhyZWFkUmVzdWx0IHtcblx0dGhyZWFkOiBUaHJlYWRcblx0dGhyZWFkQ3JlYXRlZDogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgQXNzaXN0YW50IHtcblx0cHJpdmF0ZSBfZGF0YTogQXNzaXN0YW50RGF0YVxuXG5cdGNvbnN0cnVjdG9yKGRhdGE6IEFzc2lzdGFudERhdGEpIHtcblx0XHR0aGlzLl9kYXRhID0gZGF0YVxuXHR9XG5cblx0cHVibGljIGdldCBkYXRhKCk6IEFzc2lzdGFudERhdGEge1xuXHRcdHJldHVybiB0aGlzLl9kYXRhXG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgdGhyZWFkKG9wdGlvbnM6IFRocmVhZE9wdGlvbnMpOiBQcm9taXNlPFRocmVhZFJlc3VsdD4ge1xuXHRcdGNvbnN0IHsgdGhyZWFkSWQsIHRocmVhZE1lc3NhZ2UgfSA9IG9wdGlvbnNcblxuXHRcdC8vIEZpcnN0IGxldCdzIGxvYWQgdGhlIHRocmVhZCBkYXRhXG5cdFx0Y29uc3Qgb3BlbmFpVGhyZWFkSWQgPSBhd2FpdCBGbGFzaGNvcmUuZ2V0PHN0cmluZz4odGhyZWFkSWQsIHtcblx0XHRcdG5hbWVzcGFjZTogX1BSRUZJWCArICcvdGhyZWFkLWluZGV4J1xuXHRcdH0pXG5cdFx0bGV0IHRocmVhZCA9IGF3YWl0IEZsYXNoY29yZS5nZXQ8VGhyZWFkPihvcGVuYWlUaHJlYWRJZCwge1xuXHRcdFx0bmFtZXNwYWNlOiBfUFJFRklYICsgJy90aHJlYWQnXG5cdFx0fSlcblx0XHRjb25zdCB0aHJlYWRFeGlzdHMgPSAhIXRocmVhZCAvLyBEbyBub3QgcmUtYXNzaWduIHRoaXMgbGF0ZXIhXG5cdFx0bG9nZ2VyLmRlYnVnKGBGb3VuZCBjYWNoZWQgdGhyZWFkIGZvciBcIiR7Y29sb3IuYm9sZCh0aHJlYWRJZCl9XCI6YCwgdGhyZWFkKVxuXG5cdFx0Ly8gTm8gdGhyZWFkIGRhdGE/IFRyeSBnZXR0aW5nIGl0IGZyb20gT3BlbkFJIGFuZCBjYWNoZSBpdFxuXHRcdGlmICghdGhyZWFkRXhpc3RzICYmIG9wZW5haVRocmVhZElkKSB7XG5cdFx0XHR0aHJlYWQgPSBhd2FpdCBvcGVuYWkuZ2V0VGhyZWFkKHtcblx0XHRcdFx0dGhyZWFkX2lkOiBvcGVuYWlUaHJlYWRJZFxuXHRcdFx0fSlcblx0XHRcdGxvZ2dlci5kZWJ1ZyhgUmV0cmlldmVkIGZyZXNoIHRocmVhZCBkYXRhOmAsIHRocmVhZClcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSBuZXcgdGhyZWFkIGlmIGl0IHJlYWxseSBkb2Vzbid0IGV4aXN0XG5cdFx0bGV0IGlzVGhyZWFkQ3JlYXRlZCA9IGZhbHNlXG5cdFx0aWYgKCF0aHJlYWQpIHtcblx0XHRcdHRocmVhZCA9IGF3YWl0IG9wZW5haS5jcmVhdGVUaHJlYWQoe1xuXHRcdFx0XHRtZXNzYWdlczogW3RocmVhZE1lc3NhZ2VdLFxuXHRcdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHRcdHRocmVhZElkOiB0aHJlYWRJZFxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0aXNUaHJlYWRDcmVhdGVkID0gdHJ1ZVxuXHRcdFx0bG9nZ2VyLmRlYnVnKGBDcmVhdGVkIG5ldyB0aHJlYWQ6YCwgdGhyZWFkKVxuXHRcdH1cblxuXHRcdC8vIFN0aWxsIG5vIHRocmVhZD8gVGhhdCdzIG5vdCBnb29kLCBhYm9ydCFcblx0XHRpZiAoIXRocmVhZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIHRocmVhZCBmb3IgXCIke3RocmVhZElkfVwiYClcblx0XHR9XG5cblx0XHQvLyBJbmRleCB0aGUgdGhyZWFkIGFuZCBpdHMgT3BlbkFJIElEIGVxdWl2YWxlbnRcblx0XHRpZiAoIXRocmVhZEV4aXN0cykge1xuXHRcdFx0bG9nZ2VyLmRlYnVnKGBDYWNoaW5nIHRocmVhZCBkYXRhIGZvciAke3RocmVhZElkfTpgLCB0aHJlYWQpXG5cdFx0XHRhd2FpdCBGbGFzaGNvcmUuc2V0KHRocmVhZC5pZCwgdGhyZWFkLCB7XG5cdFx0XHRcdG5hbWVzcGFjZTogX1BSRUZJWCArICcvdGhyZWFkJ1xuXHRcdFx0fSlcblx0XHRcdGF3YWl0IEZsYXNoY29yZS5zZXQodGhyZWFkSWQsIHRocmVhZC5pZCwge1xuXHRcdFx0XHRuYW1lc3BhY2U6IF9QUkVGSVggKyAnL3RocmVhZC1pbmRleCdcblx0XHRcdH0pXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHsgdGhyZWFkLCB0aHJlYWRDcmVhdGVkOiBpc1RocmVhZENyZWF0ZWQgfVxuXHR9XG5cblx0cHVibGljIHRvSlNPTigpOiBzdHJpbmcge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLl9kYXRhLCBudWxsLCAyKVxuXHR9XG5cblx0cHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX2RhdGEuaWRcblx0fVxufVxuIl0sIm5hbWVzIjpbIl9QUkVGSVgiLCJvcGVuYWkiLCJGbGFzaGNvcmUiLCJjb2xvciIsImxvZ2dlciIsIkFzc2lzdGFudCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsIl9kYXRhIiwidGhyZWFkIiwib3B0aW9ucyIsInRocmVhZElkIiwidGhyZWFkTWVzc2FnZSIsIm9wZW5haVRocmVhZElkIiwiZ2V0IiwibmFtZXNwYWNlIiwidGhyZWFkRXhpc3RzIiwiZGVidWciLCJib2xkIiwiZ2V0VGhyZWFkIiwidGhyZWFkX2lkIiwiaXNUaHJlYWRDcmVhdGVkIiwiY3JlYXRlVGhyZWFkIiwibWVzc2FnZXMiLCJtZXRhZGF0YSIsIkVycm9yIiwic2V0IiwiaWQiLCJ0aHJlYWRDcmVhdGVkIiwidG9KU09OIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTQSxPQUFPLFFBQVEsNENBQXFCO0FBQzdDLFNBQThCQyxNQUFNLFFBQVEsV0FBVTtBQUV0RCxTQUFTQyxTQUFTLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxRQUFRLFVBQVM7QUE4QmxELE9BQU8sTUFBTUM7SUFHWkMsWUFBWUMsSUFBbUIsQ0FBRTtRQUNoQyxJQUFJLENBQUNDLEtBQUssR0FBR0Q7SUFDZDtJQUVBLElBQVdBLE9BQXNCO1FBQ2hDLE9BQU8sSUFBSSxDQUFDQyxLQUFLO0lBQ2xCO0lBRUEsTUFBYUMsT0FBT0MsT0FBc0IsRUFBeUI7UUFDbEUsTUFBTSxFQUFFQyxTQUFRLEVBQUVDLGNBQWEsRUFBRSxHQUFHRjtRQUVwQyxtQ0FBbUM7UUFDbkMsTUFBTUcsaUJBQWlCLE1BQU1YLFVBQVVZLEdBQUcsQ0FBU0gsVUFBVTtZQUM1REksV0FBV2YsVUFBVTtRQUN0QjtRQUNBLElBQUlTLFNBQVMsTUFBTVAsVUFBVVksR0FBRyxDQUFTRCxnQkFBZ0I7WUFDeERFLFdBQVdmLFVBQVU7UUFDdEI7UUFDQSxNQUFNZ0IsZUFBZSxDQUFDLENBQUNQLE9BQU8sK0JBQStCOztRQUM3REwsT0FBT2EsS0FBSyxDQUFDLENBQUMseUJBQXlCLEVBQUVkLE1BQU1lLElBQUksQ0FBQ1AsVUFBVSxFQUFFLENBQUMsRUFBRUY7UUFFbkUsMERBQTBEO1FBQzFELElBQUksQ0FBQ08sZ0JBQWdCSCxnQkFBZ0I7WUFDcENKLFNBQVMsTUFBTVIsT0FBT2tCLFNBQVMsQ0FBQztnQkFDL0JDLFdBQVdQO1lBQ1o7WUFDQVQsT0FBT2EsS0FBSyxDQUFDLENBQUMsNEJBQTRCLENBQUMsRUFBRVI7UUFDOUMsQ0FBQztRQUVELGlEQUFpRDtRQUNqRCxJQUFJWSxrQkFBa0IsS0FBSztRQUMzQixJQUFJLENBQUNaLFFBQVE7WUFDWkEsU0FBUyxNQUFNUixPQUFPcUIsWUFBWSxDQUFDO2dCQUNsQ0MsVUFBVTtvQkFBQ1g7aUJBQWM7Z0JBQ3pCWSxVQUFVO29CQUNUYixVQUFVQTtnQkFDWDtZQUNEO1lBQ0FVLGtCQUFrQixJQUFJO1lBQ3RCakIsT0FBT2EsS0FBSyxDQUFDLENBQUMsbUJBQW1CLENBQUMsRUFBRVI7UUFDckMsQ0FBQztRQUVELDJDQUEyQztRQUMzQyxJQUFJLENBQUNBLFFBQVE7WUFDWixNQUFNLElBQUlnQixNQUFNLENBQUMsNkJBQTZCLEVBQUVkLFNBQVMsQ0FBQyxDQUFDLEVBQUM7UUFDN0QsQ0FBQztRQUVELGdEQUFnRDtRQUNoRCxJQUFJLENBQUNLLGNBQWM7WUFDbEJaLE9BQU9hLEtBQUssQ0FBQyxDQUFDLHdCQUF3QixFQUFFTixTQUFTLENBQUMsQ0FBQyxFQUFFRjtZQUNyRCxNQUFNUCxVQUFVd0IsR0FBRyxDQUFDakIsT0FBT2tCLEVBQUUsRUFBRWxCLFFBQVE7Z0JBQ3RDTSxXQUFXZixVQUFVO1lBQ3RCO1lBQ0EsTUFBTUUsVUFBVXdCLEdBQUcsQ0FBQ2YsVUFBVUYsT0FBT2tCLEVBQUUsRUFBRTtnQkFDeENaLFdBQVdmLFVBQVU7WUFDdEI7UUFDRCxDQUFDO1FBRUQsT0FBTztZQUFFUztZQUFRbUIsZUFBZVA7UUFBZ0I7SUFDakQ7SUFFT1EsU0FBaUI7UUFDdkIsT0FBT0MsS0FBS0MsU0FBUyxDQUFDLElBQUksQ0FBQ3ZCLEtBQUssRUFBRSxJQUFJLEVBQUU7SUFDekM7SUFFT3dCLFdBQW1CO1FBQ3pCLE9BQU8sSUFBSSxDQUFDeEIsS0FBSyxDQUFDbUIsRUFBRTtJQUNyQjtBQUNELENBQUMifQ==