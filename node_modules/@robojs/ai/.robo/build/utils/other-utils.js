export function compare(obj1, obj2, keys) {
    const differentFields = [];
    keys.forEach((key)=>{
        // Check if both objects have the key
        if (obj1[key] && obj2[key]) {
            const value1 = obj1[key];
            const value2 = obj2[key];
            // Compare values based on their type
            if (typeof value1 !== 'object' && typeof value2 !== 'object') {
                if (value1 !== value2) {
                    differentFields.push(key);
                }
            } else {
                // Object or array: compare stringified values (but sort arrays first)
                if (Array.isArray(value1)) {
                    value1.sort();
                }
                if (Array.isArray(value2)) {
                    value2.sort();
                }
                if (JSON.stringify(value1) !== JSON.stringify(value2)) {
                    differentFields.push(key);
                }
            }
        } else {
            // Key does not exist in one of the objects
            differentFields.push(key);
        }
    });
    return differentFields;
}
export function hasProperties(obj, props) {
    return typeof obj === 'object' && obj !== null && props.every((prop)=>prop in obj);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tYWkvc3JjL3V0aWxzL290aGVyLXV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjb21wYXJlKG9iajE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBvYmoyOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwga2V5czogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG5cdGNvbnN0IGRpZmZlcmVudEZpZWxkczogc3RyaW5nW10gPSBbXVxuXG5cdGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0Ly8gQ2hlY2sgaWYgYm90aCBvYmplY3RzIGhhdmUgdGhlIGtleVxuXHRcdGlmIChvYmoxW2tleV0gJiYgb2JqMltrZXldKSB7XG5cdFx0XHRjb25zdCB2YWx1ZTEgPSBvYmoxW2tleV1cblx0XHRcdGNvbnN0IHZhbHVlMiA9IG9iajJba2V5XVxuXG5cdFx0XHQvLyBDb21wYXJlIHZhbHVlcyBiYXNlZCBvbiB0aGVpciB0eXBlXG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlMSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlMiAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aWYgKHZhbHVlMSAhPT0gdmFsdWUyKSB7XG5cdFx0XHRcdFx0ZGlmZmVyZW50RmllbGRzLnB1c2goa2V5KVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBPYmplY3Qgb3IgYXJyYXk6IGNvbXBhcmUgc3RyaW5naWZpZWQgdmFsdWVzIChidXQgc29ydCBhcnJheXMgZmlyc3QpXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlMSkpIHtcblx0XHRcdFx0XHR2YWx1ZTEuc29ydCgpXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUyKSkge1xuXHRcdFx0XHRcdHZhbHVlMi5zb3J0KClcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoSlNPTi5zdHJpbmdpZnkodmFsdWUxKSAhPT0gSlNPTi5zdHJpbmdpZnkodmFsdWUyKSkge1xuXHRcdFx0XHRcdGRpZmZlcmVudEZpZWxkcy5wdXNoKGtleSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBLZXkgZG9lcyBub3QgZXhpc3QgaW4gb25lIG9mIHRoZSBvYmplY3RzXG5cdFx0XHRkaWZmZXJlbnRGaWVsZHMucHVzaChrZXkpXG5cdFx0fVxuXHR9KVxuXG5cdHJldHVybiBkaWZmZXJlbnRGaWVsZHNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BlcnRpZXM8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+Pihcblx0b2JqOiB1bmtub3duLFxuXHRwcm9wczogKGtleW9mIFQpW11cbik6IG9iaiBpcyBUICYgUmVjb3JkPGtleW9mIFQsIHVua25vd24+IHtcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCAmJiBwcm9wcy5ldmVyeSgocHJvcCkgPT4gcHJvcCBpbiBvYmopXG59XG4iXSwibmFtZXMiOlsiY29tcGFyZSIsIm9iajEiLCJvYmoyIiwia2V5cyIsImRpZmZlcmVudEZpZWxkcyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5Iiwic29ydCIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXNQcm9wZXJ0aWVzIiwib2JqIiwicHJvcHMiLCJldmVyeSIsInByb3AiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sU0FBU0EsUUFBUUMsSUFBNkIsRUFBRUMsSUFBNkIsRUFBRUMsSUFBYyxFQUFZO0lBQy9HLE1BQU1DLGtCQUE0QixFQUFFO0lBRXBDRCxLQUFLRSxPQUFPLENBQUMsQ0FBQ0MsTUFBUTtRQUNyQixxQ0FBcUM7UUFDckMsSUFBSUwsSUFBSSxDQUFDSyxJQUFJLElBQUlKLElBQUksQ0FBQ0ksSUFBSSxFQUFFO1lBQzNCLE1BQU1DLFNBQVNOLElBQUksQ0FBQ0ssSUFBSTtZQUN4QixNQUFNRSxTQUFTTixJQUFJLENBQUNJLElBQUk7WUFFeEIscUNBQXFDO1lBQ3JDLElBQUksT0FBT0MsV0FBVyxZQUFZLE9BQU9DLFdBQVcsVUFBVTtnQkFDN0QsSUFBSUQsV0FBV0MsUUFBUTtvQkFDdEJKLGdCQUFnQkssSUFBSSxDQUFDSDtnQkFDdEIsQ0FBQztZQUNGLE9BQU87Z0JBQ04sc0VBQXNFO2dCQUN0RSxJQUFJSSxNQUFNQyxPQUFPLENBQUNKLFNBQVM7b0JBQzFCQSxPQUFPSyxJQUFJO2dCQUNaLENBQUM7Z0JBQ0QsSUFBSUYsTUFBTUMsT0FBTyxDQUFDSCxTQUFTO29CQUMxQkEsT0FBT0ksSUFBSTtnQkFDWixDQUFDO2dCQUNELElBQUlDLEtBQUtDLFNBQVMsQ0FBQ1AsWUFBWU0sS0FBS0MsU0FBUyxDQUFDTixTQUFTO29CQUN0REosZ0JBQWdCSyxJQUFJLENBQUNIO2dCQUN0QixDQUFDO1lBQ0YsQ0FBQztRQUNGLE9BQU87WUFDTiwyQ0FBMkM7WUFDM0NGLGdCQUFnQkssSUFBSSxDQUFDSDtRQUN0QixDQUFDO0lBQ0Y7SUFFQSxPQUFPRjtBQUNSLENBQUM7QUFFRCxPQUFPLFNBQVNXLGNBQ2ZDLEdBQVksRUFDWkMsS0FBa0IsRUFDb0I7SUFDdEMsT0FBTyxPQUFPRCxRQUFRLFlBQVlBLFFBQVEsSUFBSSxJQUFJQyxNQUFNQyxLQUFLLENBQUMsQ0FBQ0MsT0FBU0EsUUFBUUg7QUFDakYsQ0FBQyJ9