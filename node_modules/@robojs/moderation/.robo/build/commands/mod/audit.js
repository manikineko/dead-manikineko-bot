import { Buttons, ID_NAMESPACE } from '../../core/constants.js';
import { isBanned } from '../../core/utils.js';
import { Flashcore } from 'robo.js';
import { ButtonStyle, Colors, ComponentType, PermissionFlagsBits } from 'discord.js';
export const config = {
    defaultMemberPermissions: PermissionFlagsBits.ModerateMembers,
    description: `Audit a user's activity in the server`,
    dmPermission: false,
    options: [
        {
            name: 'user',
            description: 'The user to audit',
            type: 'user',
            required: true
        }
    ]
};
export default (async (interaction)=>{
    const user = interaction.options.get('user')?.user;
    const member = interaction.guild?.members.cache.get(user?.id);
    // See if this user is currently banned
    let status = 'Active';
    const banData = await Flashcore.get('ban', {
        namespace: ID_NAMESPACE + interaction.guildId + user.id
    });
    const isUserBanned = await isBanned(interaction.guild, user.id);
    if (isUserBanned) {
        status = ('Banned for: ' + banData?.reason) ?? 'Unknown';
    }
    const infractions = await Flashcore.get('infractions', {
        namespace: interaction.guildId + user.id
    }) ?? 0;
    return {
        embeds: [
            createAuditEmbed(user, member, status, infractions)
        ],
        components: [
            {
                type: ComponentType.ActionRow,
                components: [
                    {
                        type: ComponentType.Button,
                        style: ButtonStyle.Danger,
                        label: isUserBanned ? 'Unban' : 'Ban',
                        customId: (isUserBanned ? Buttons.Unban.id : Buttons.Ban.id) + '/' + user.id
                    }
                ]
            }
        ]
    };
});
export function createAuditEmbed(user, member, status, infractions) {
    return {
        color: Colors.Blurple,
        title: `Audit for ${user.username}`,
        thumbnail: {
            url: user.displayAvatarURL()
        },
        fields: [
            {
                name: 'Member',
                value: user.toString()
            },
            {
                name: 'Status',
                value: status
            },
            {
                name: 'Infractions',
                value: infractions.toString()
            }
        ],
        footer: {
            text: `Joined ${member?.joinedAt?.toISOString()}`
        }
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2NvbW1hbmRzL21vZC9hdWRpdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYW5EYXRhLCBCdXR0b25zLCBJRF9OQU1FU1BBQ0UgfSBmcm9tICcuLi8uLi9jb3JlL2NvbnN0YW50cy5qcydcbmltcG9ydCB7IGlzQmFubmVkIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy5qcydcbmltcG9ydCB7IEZsYXNoY29yZSB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgeyBCdXR0b25TdHlsZSwgQ29sb3JzLCBDb21wb25lbnRUeXBlLCBQZXJtaXNzaW9uRmxhZ3NCaXRzIH0gZnJvbSAnZGlzY29yZC5qcydcbmltcG9ydCB0eXBlIHsgQ29tbWFuZENvbmZpZywgQ29tbWFuZFJlc3VsdCB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgdHlwZSB7IEFQSUVtYmVkLCBDb21tYW5kSW50ZXJhY3Rpb24sIEd1aWxkLCBHdWlsZE1lbWJlciwgVXNlciB9IGZyb20gJ2Rpc2NvcmQuanMnXG5cbmV4cG9ydCBjb25zdCBjb25maWc6IENvbW1hbmRDb25maWcgPSB7XG5cdGRlZmF1bHRNZW1iZXJQZXJtaXNzaW9uczogUGVybWlzc2lvbkZsYWdzQml0cy5Nb2RlcmF0ZU1lbWJlcnMsXG5cdGRlc2NyaXB0aW9uOiBgQXVkaXQgYSB1c2VyJ3MgYWN0aXZpdHkgaW4gdGhlIHNlcnZlcmAsXG5cdGRtUGVybWlzc2lvbjogZmFsc2UsXG5cdG9wdGlvbnM6IFtcblx0XHR7XG5cdFx0XHRuYW1lOiAndXNlcicsXG5cdFx0XHRkZXNjcmlwdGlvbjogJ1RoZSB1c2VyIHRvIGF1ZGl0Jyxcblx0XHRcdHR5cGU6ICd1c2VyJyxcblx0XHRcdHJlcXVpcmVkOiB0cnVlXG5cdFx0fVxuXHRdXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChpbnRlcmFjdGlvbjogQ29tbWFuZEludGVyYWN0aW9uKTogUHJvbWlzZTxDb21tYW5kUmVzdWx0PiA9PiB7XG5cdGNvbnN0IHVzZXIgPSBpbnRlcmFjdGlvbi5vcHRpb25zLmdldCgndXNlcicpPy51c2VyIGFzIFVzZXJcblx0Y29uc3QgbWVtYmVyID0gaW50ZXJhY3Rpb24uZ3VpbGQ/Lm1lbWJlcnMuY2FjaGUuZ2V0KHVzZXI/LmlkKSBhcyBHdWlsZE1lbWJlclxuXG5cdC8vIFNlZSBpZiB0aGlzIHVzZXIgaXMgY3VycmVudGx5IGJhbm5lZFxuXHRsZXQgc3RhdHVzID0gJ0FjdGl2ZSdcblx0Y29uc3QgYmFuRGF0YSA9IGF3YWl0IEZsYXNoY29yZS5nZXQ8QmFuRGF0YT4oJ2JhbicsIHtcblx0XHRuYW1lc3BhY2U6IElEX05BTUVTUEFDRSArIGludGVyYWN0aW9uLmd1aWxkSWQgKyB1c2VyLmlkXG5cdH0pXG5cdGNvbnN0IGlzVXNlckJhbm5lZCA9IGF3YWl0IGlzQmFubmVkKGludGVyYWN0aW9uLmd1aWxkIGFzIEd1aWxkLCB1c2VyLmlkKVxuXG5cdGlmIChpc1VzZXJCYW5uZWQpIHtcblx0XHRzdGF0dXMgPSAnQmFubmVkIGZvcjogJyArIGJhbkRhdGE/LnJlYXNvbiA/PyAnVW5rbm93bidcblx0fVxuXHRjb25zdCBpbmZyYWN0aW9ucyA9XG5cdFx0KGF3YWl0IEZsYXNoY29yZS5nZXQ8bnVtYmVyPignaW5mcmFjdGlvbnMnLCB7XG5cdFx0XHRuYW1lc3BhY2U6IGludGVyYWN0aW9uLmd1aWxkSWQgKyB1c2VyLmlkXG5cdFx0fSkpID8/IDBcblxuXHRyZXR1cm4ge1xuXHRcdGVtYmVkczogW2NyZWF0ZUF1ZGl0RW1iZWQodXNlciwgbWVtYmVyLCBzdGF0dXMsIGluZnJhY3Rpb25zKV0sXG5cdFx0Y29tcG9uZW50czogW1xuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiBDb21wb25lbnRUeXBlLkFjdGlvblJvdyxcblx0XHRcdFx0Y29tcG9uZW50czogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6IENvbXBvbmVudFR5cGUuQnV0dG9uLFxuXHRcdFx0XHRcdFx0c3R5bGU6IEJ1dHRvblN0eWxlLkRhbmdlcixcblx0XHRcdFx0XHRcdGxhYmVsOiBpc1VzZXJCYW5uZWQgPyAnVW5iYW4nIDogJ0JhbicsXG5cdFx0XHRcdFx0XHRjdXN0b21JZDogKGlzVXNlckJhbm5lZCA/IEJ1dHRvbnMuVW5iYW4uaWQgOiBCdXR0b25zLkJhbi5pZCkgKyAnLycgKyB1c2VyLmlkXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0XVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBdWRpdEVtYmVkKHVzZXI6IFVzZXIsIG1lbWJlcjogR3VpbGRNZW1iZXIsIHN0YXR1czogc3RyaW5nLCBpbmZyYWN0aW9uczogbnVtYmVyKTogQVBJRW1iZWQge1xuXHRyZXR1cm4ge1xuXHRcdGNvbG9yOiBDb2xvcnMuQmx1cnBsZSxcblx0XHR0aXRsZTogYEF1ZGl0IGZvciAke3VzZXIudXNlcm5hbWV9YCxcblx0XHR0aHVtYm5haWw6IHtcblx0XHRcdHVybDogdXNlci5kaXNwbGF5QXZhdGFyVVJMKClcblx0XHR9LFxuXHRcdGZpZWxkczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiAnTWVtYmVyJyxcblx0XHRcdFx0dmFsdWU6IHVzZXIudG9TdHJpbmcoKVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogJ1N0YXR1cycsXG5cdFx0XHRcdHZhbHVlOiBzdGF0dXNcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6ICdJbmZyYWN0aW9ucycsXG5cdFx0XHRcdHZhbHVlOiBpbmZyYWN0aW9ucy50b1N0cmluZygpXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRmb290ZXI6IHtcblx0XHRcdHRleHQ6IGBKb2luZWQgJHttZW1iZXI/LmpvaW5lZEF0Py50b0lTT1N0cmluZygpfWBcblx0XHR9XG5cdH1cbn1cbiJdLCJuYW1lcyI6WyJCdXR0b25zIiwiSURfTkFNRVNQQUNFIiwiaXNCYW5uZWQiLCJGbGFzaGNvcmUiLCJCdXR0b25TdHlsZSIsIkNvbG9ycyIsIkNvbXBvbmVudFR5cGUiLCJQZXJtaXNzaW9uRmxhZ3NCaXRzIiwiY29uZmlnIiwiZGVmYXVsdE1lbWJlclBlcm1pc3Npb25zIiwiTW9kZXJhdGVNZW1iZXJzIiwiZGVzY3JpcHRpb24iLCJkbVBlcm1pc3Npb24iLCJvcHRpb25zIiwibmFtZSIsInR5cGUiLCJyZXF1aXJlZCIsImludGVyYWN0aW9uIiwidXNlciIsImdldCIsIm1lbWJlciIsImd1aWxkIiwibWVtYmVycyIsImNhY2hlIiwiaWQiLCJzdGF0dXMiLCJiYW5EYXRhIiwibmFtZXNwYWNlIiwiZ3VpbGRJZCIsImlzVXNlckJhbm5lZCIsInJlYXNvbiIsImluZnJhY3Rpb25zIiwiZW1iZWRzIiwiY3JlYXRlQXVkaXRFbWJlZCIsImNvbXBvbmVudHMiLCJBY3Rpb25Sb3ciLCJCdXR0b24iLCJzdHlsZSIsIkRhbmdlciIsImxhYmVsIiwiY3VzdG9tSWQiLCJVbmJhbiIsIkJhbiIsImNvbG9yIiwiQmx1cnBsZSIsInRpdGxlIiwidXNlcm5hbWUiLCJ0aHVtYm5haWwiLCJ1cmwiLCJkaXNwbGF5QXZhdGFyVVJMIiwiZmllbGRzIiwidmFsdWUiLCJ0b1N0cmluZyIsImZvb3RlciIsInRleHQiLCJqb2luZWRBdCIsInRvSVNPU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFrQkEsT0FBTyxFQUFFQyxZQUFZLFFBQVEsMEJBQXlCO0FBQ3hFLFNBQVNDLFFBQVEsUUFBUSxzQkFBcUI7QUFDOUMsU0FBU0MsU0FBUyxRQUFRLFVBQVM7QUFDbkMsU0FBU0MsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLGFBQWEsRUFBRUMsbUJBQW1CLFFBQVEsYUFBWTtBQUlwRixPQUFPLE1BQU1DLFNBQXdCO0lBQ3BDQywwQkFBMEJGLG9CQUFvQkcsZUFBZTtJQUM3REMsYUFBYSxDQUFDLHFDQUFxQyxDQUFDO0lBQ3BEQyxjQUFjLEtBQUs7SUFDbkJDLFNBQVM7UUFDUjtZQUNDQyxNQUFNO1lBQ05ILGFBQWE7WUFDYkksTUFBTTtZQUNOQyxVQUFVLElBQUk7UUFDZjtLQUNBO0FBQ0YsRUFBQztBQUVELGVBQWUsQ0FBQSxPQUFPQyxjQUE0RDtJQUNqRixNQUFNQyxPQUFPRCxZQUFZSixPQUFPLENBQUNNLEdBQUcsQ0FBQyxTQUFTRDtJQUM5QyxNQUFNRSxTQUFTSCxZQUFZSSxLQUFLLEVBQUVDLFFBQVFDLEtBQUssQ0FBQ0osR0FBRyxDQUFDRCxNQUFNTTtJQUUxRCx1Q0FBdUM7SUFDdkMsSUFBSUMsU0FBUztJQUNiLE1BQU1DLFVBQVUsTUFBTXZCLFVBQVVnQixHQUFHLENBQVUsT0FBTztRQUNuRFEsV0FBVzFCLGVBQWVnQixZQUFZVyxPQUFPLEdBQUdWLEtBQUtNLEVBQUU7SUFDeEQ7SUFDQSxNQUFNSyxlQUFlLE1BQU0zQixTQUFTZSxZQUFZSSxLQUFLLEVBQVdILEtBQUtNLEVBQUU7SUFFdkUsSUFBSUssY0FBYztRQUNqQkosU0FBUyxDQUFBLGlCQUFpQkMsU0FBU0ksTUFBSyxLQUFLO0lBQzlDLENBQUM7SUFDRCxNQUFNQyxjQUNMLEFBQUMsTUFBTTVCLFVBQVVnQixHQUFHLENBQVMsZUFBZTtRQUMzQ1EsV0FBV1YsWUFBWVcsT0FBTyxHQUFHVixLQUFLTSxFQUFFO0lBQ3pDLE1BQU87SUFFUixPQUFPO1FBQ05RLFFBQVE7WUFBQ0MsaUJBQWlCZixNQUFNRSxRQUFRSyxRQUFRTTtTQUFhO1FBQzdERyxZQUFZO1lBQ1g7Z0JBQ0NuQixNQUFNVCxjQUFjNkIsU0FBUztnQkFDN0JELFlBQVk7b0JBQ1g7d0JBQ0NuQixNQUFNVCxjQUFjOEIsTUFBTTt3QkFDMUJDLE9BQU9qQyxZQUFZa0MsTUFBTTt3QkFDekJDLE9BQU9WLGVBQWUsVUFBVSxLQUFLO3dCQUNyQ1csVUFBVSxBQUFDWCxDQUFBQSxlQUFlN0IsUUFBUXlDLEtBQUssQ0FBQ2pCLEVBQUUsR0FBR3hCLFFBQVEwQyxHQUFHLENBQUNsQixFQUFFLEFBQUQsSUFBSyxNQUFNTixLQUFLTSxFQUFFO29CQUM3RTtpQkFDQTtZQUNGO1NBQ0E7SUFDRjtBQUNELENBQUEsRUFBQztBQUVELE9BQU8sU0FBU1MsaUJBQWlCZixJQUFVLEVBQUVFLE1BQW1CLEVBQUVLLE1BQWMsRUFBRU0sV0FBbUIsRUFBWTtJQUNoSCxPQUFPO1FBQ05ZLE9BQU90QyxPQUFPdUMsT0FBTztRQUNyQkMsT0FBTyxDQUFDLFVBQVUsRUFBRTNCLEtBQUs0QixRQUFRLENBQUMsQ0FBQztRQUNuQ0MsV0FBVztZQUNWQyxLQUFLOUIsS0FBSytCLGdCQUFnQjtRQUMzQjtRQUNBQyxRQUFRO1lBQ1A7Z0JBQ0NwQyxNQUFNO2dCQUNOcUMsT0FBT2pDLEtBQUtrQyxRQUFRO1lBQ3JCO1lBQ0E7Z0JBQ0N0QyxNQUFNO2dCQUNOcUMsT0FBTzFCO1lBQ1I7WUFDQTtnQkFDQ1gsTUFBTTtnQkFDTnFDLE9BQU9wQixZQUFZcUIsUUFBUTtZQUM1QjtTQUNBO1FBQ0RDLFFBQVE7WUFDUEMsTUFBTSxDQUFDLE9BQU8sRUFBRWxDLFFBQVFtQyxVQUFVQyxjQUFjLENBQUM7UUFDbEQ7SUFDRDtBQUNELENBQUMifQ==