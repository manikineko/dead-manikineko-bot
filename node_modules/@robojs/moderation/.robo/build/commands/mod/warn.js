import { getSettings } from '../../core/settings.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { Colors, PermissionFlagsBits } from 'discord.js';
import { logger, color, Flashcore } from 'robo.js';
export const config = {
    defaultMemberPermissions: PermissionFlagsBits.ModerateMembers,
    dmPermission: false,
    description: `Warns a member and adds a strike`,
    options: [
        {
            name: 'member',
            description: 'The @member to warn',
            type: 'user',
            required: true
        },
        {
            name: 'reason',
            description: 'The reason for the warn',
            required: true
        },
        {
            name: 'message',
            description: 'The message ID that triggered the warn'
        },
        {
            name: 'anonymous',
            description: 'Whether to send the warning anonymously',
            type: 'boolean'
        }
    ]
};
export default (async (interaction)=>{
    const anonymous = (interaction.options.get('anonymous')?.value) ?? false;
    const member = interaction.options.get('member')?.member;
    const message = interaction.options.get('message')?.value;
    const reason = interaction.options.get('reason')?.value;
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to run ${color.bold('/mod warn')}`);
        return {
            content: `You don't have permission to use this.`,
            ephemeral: true
        };
    }
    let messageLink = '';
    if (message) {
        messageLink = `https://discord.com/channels/${interaction.guild?.id}/${interaction.channel?.id}/${message}`;
    }
    const fields = [
        {
            name: 'Reason',
            value: reason
        }
    ];
    if (messageLink) {
        fields.push({
            name: 'Message',
            value: messageLink
        });
    }
    // Get current infractions
    const infractions = await Flashcore.get('infractions', {
        namespace: interaction.guildId + member.id
    }) ?? 0;
    const newInfractions = infractions + 1;
    const plural = infractions === 1 ? '' : 's';
    // Prepare message payload
    const messagePayload = {
        content: member.toString(),
        embeds: [
            {
                title: `You've been warned`,
                thumbnail: {
                    url: member.displayAvatarURL()
                },
                color: Colors.Yellow,
                fields: fields,
                footer: {
                    text: `⚠️ You now have ${infractions} infraction${plural}.`
                }
            }
        ]
    };
    // Log action to modlogs channel if this is not it
    const { logsChannelId , testMode  } = getSettings(interaction.guildId);
    if (interaction.channelId !== logsChannelId) {
        const testPrefix = testMode ? '[TEST] ' : '';
        logAction(interaction.guildId, {
            embeds: [
                {
                    title: testPrefix + 'Member warned',
                    description: `${member} has been warned`,
                    thumbnail: {
                        url: member.displayAvatarURL()
                    },
                    color: Colors.Yellow,
                    fields: fields,
                    timestamp: new Date().toISOString(),
                    footer: {
                        icon_url: interaction.user.displayAvatarURL(),
                        text: 'by @' + interaction.user.username
                    }
                }
            ]
        });
    }
    // Test mode - don't send warning
    if (testMode) {
        return {
            embeds: [
                {
                    title: 'Test mode',
                    description: 'This is a test. No action has been taken.',
                    color: Colors.Yellow,
                    footer: {
                        text: (logsChannelId ? 'See' : 'Setup') + ` modlogs channel for details`
                    }
                }
            ],
            ephemeral: true
        };
    }
    // Add infraction to member
    await Flashcore.set('infractions', newInfractions, {
        namespace: interaction.guildId + member.id
    });
    if (anonymous) {
        await interaction.channel?.send(messagePayload);
        return {
            content: 'Warning has been sent.',
            ephemeral: true
        };
    }
    return messagePayload;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2NvbW1hbmRzL21vZC93YXJuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFNldHRpbmdzIH0gZnJvbSAnLi4vLi4vY29yZS9zZXR0aW5ncy5qcydcbmltcG9ydCB7IGhhc1Blcm1pc3Npb24sIGxvZ0FjdGlvbiB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMuanMnXG5pbXBvcnQgeyBDb2xvcnMsIFBlcm1pc3Npb25GbGFnc0JpdHMgfSBmcm9tICdkaXNjb3JkLmpzJ1xuaW1wb3J0IHsgbG9nZ2VyLCBjb2xvciwgRmxhc2hjb3JlIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB0eXBlIHsgQ29tbWFuZENvbmZpZywgQ29tbWFuZFJlc3VsdCB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgdHlwZSB7IEFQSUVtYmVkRmllbGQsIENvbW1hbmRJbnRlcmFjdGlvbiwgR3VpbGRNZW1iZXIsIE1lc3NhZ2VDcmVhdGVPcHRpb25zIH0gZnJvbSAnZGlzY29yZC5qcydcblxuZXhwb3J0IGNvbnN0IGNvbmZpZzogQ29tbWFuZENvbmZpZyA9IHtcblx0ZGVmYXVsdE1lbWJlclBlcm1pc3Npb25zOiBQZXJtaXNzaW9uRmxhZ3NCaXRzLk1vZGVyYXRlTWVtYmVycyxcblx0ZG1QZXJtaXNzaW9uOiBmYWxzZSxcblx0ZGVzY3JpcHRpb246IGBXYXJucyBhIG1lbWJlciBhbmQgYWRkcyBhIHN0cmlrZWAsXG5cdG9wdGlvbnM6IFtcblx0XHR7XG5cdFx0XHRuYW1lOiAnbWVtYmVyJyxcblx0XHRcdGRlc2NyaXB0aW9uOiAnVGhlIEBtZW1iZXIgdG8gd2FybicsXG5cdFx0XHR0eXBlOiAndXNlcicsXG5cdFx0XHRyZXF1aXJlZDogdHJ1ZVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bmFtZTogJ3JlYXNvbicsXG5cdFx0XHRkZXNjcmlwdGlvbjogJ1RoZSByZWFzb24gZm9yIHRoZSB3YXJuJyxcblx0XHRcdHJlcXVpcmVkOiB0cnVlXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRuYW1lOiAnbWVzc2FnZScsXG5cdFx0XHRkZXNjcmlwdGlvbjogJ1RoZSBtZXNzYWdlIElEIHRoYXQgdHJpZ2dlcmVkIHRoZSB3YXJuJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdFx0bmFtZTogJ2Fub255bW91cycsXG5cdFx0XHRkZXNjcmlwdGlvbjogJ1doZXRoZXIgdG8gc2VuZCB0aGUgd2FybmluZyBhbm9ueW1vdXNseScsXG5cdFx0XHR0eXBlOiAnYm9vbGVhbidcblx0XHR9XG5cdF1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBDb21tYW5kSW50ZXJhY3Rpb24pOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+ID0+IHtcblx0Y29uc3QgYW5vbnltb3VzID0gKGludGVyYWN0aW9uLm9wdGlvbnMuZ2V0KCdhbm9ueW1vdXMnKT8udmFsdWUgYXMgYm9vbGVhbikgPz8gZmFsc2Vcblx0Y29uc3QgbWVtYmVyID0gaW50ZXJhY3Rpb24ub3B0aW9ucy5nZXQoJ21lbWJlcicpPy5tZW1iZXIgYXMgR3VpbGRNZW1iZXJcblx0Y29uc3QgbWVzc2FnZSA9IGludGVyYWN0aW9uLm9wdGlvbnMuZ2V0KCdtZXNzYWdlJyk/LnZhbHVlIGFzIHN0cmluZ1xuXHRjb25zdCByZWFzb24gPSBpbnRlcmFjdGlvbi5vcHRpb25zLmdldCgncmVhc29uJyk/LnZhbHVlIGFzIHN0cmluZ1xuXG5cdC8vIFZhbGlkYXRlIHBlcm1pc3Npb25zXG5cdGlmICghaGFzUGVybWlzc2lvbihpbnRlcmFjdGlvbiwgJ01vZGVyYXRlTWVtYmVycycpKSB7XG5cdFx0bG9nZ2VyLmRlYnVnKGBVc2VyIEAke2ludGVyYWN0aW9uLnVzZXIudXNlcm5hbWV9IGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byBydW4gJHtjb2xvci5ib2xkKCcvbW9kIHdhcm4nKX1gKVxuXHRcdHJldHVybiB7XG5cdFx0XHRjb250ZW50OiBgWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcy5gLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fVxuXHR9XG5cblx0bGV0IG1lc3NhZ2VMaW5rID0gJydcblx0aWYgKG1lc3NhZ2UpIHtcblx0XHRtZXNzYWdlTGluayA9IGBodHRwczovL2Rpc2NvcmQuY29tL2NoYW5uZWxzLyR7aW50ZXJhY3Rpb24uZ3VpbGQ/LmlkfS8ke2ludGVyYWN0aW9uLmNoYW5uZWw/LmlkfS8ke21lc3NhZ2V9YFxuXHR9XG5cblx0Y29uc3QgZmllbGRzOiBBUElFbWJlZEZpZWxkW10gPSBbXG5cdFx0e1xuXHRcdFx0bmFtZTogJ1JlYXNvbicsXG5cdFx0XHR2YWx1ZTogcmVhc29uXG5cdFx0fVxuXHRdXG5cdGlmIChtZXNzYWdlTGluaykge1xuXHRcdGZpZWxkcy5wdXNoKHtcblx0XHRcdG5hbWU6ICdNZXNzYWdlJyxcblx0XHRcdHZhbHVlOiBtZXNzYWdlTGlua1xuXHRcdH0pXG5cdH1cblxuXHQvLyBHZXQgY3VycmVudCBpbmZyYWN0aW9uc1xuXHRjb25zdCBpbmZyYWN0aW9ucyA9XG5cdFx0KGF3YWl0IEZsYXNoY29yZS5nZXQ8bnVtYmVyPignaW5mcmFjdGlvbnMnLCB7XG5cdFx0XHRuYW1lc3BhY2U6IGludGVyYWN0aW9uLmd1aWxkSWQgKyBtZW1iZXIuaWRcblx0XHR9KSkgPz8gMFxuXHRjb25zdCBuZXdJbmZyYWN0aW9ucyA9IGluZnJhY3Rpb25zICsgMVxuXHRjb25zdCBwbHVyYWwgPSBpbmZyYWN0aW9ucyA9PT0gMSA/ICcnIDogJ3MnXG5cblx0Ly8gUHJlcGFyZSBtZXNzYWdlIHBheWxvYWRcblx0Y29uc3QgbWVzc2FnZVBheWxvYWQ6IENvbW1hbmRSZXN1bHQgPSB7XG5cdFx0Y29udGVudDogbWVtYmVyLnRvU3RyaW5nKCksXG5cdFx0ZW1iZWRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHRpdGxlOiBgWW91J3ZlIGJlZW4gd2FybmVkYCxcblx0XHRcdFx0dGh1bWJuYWlsOiB7XG5cdFx0XHRcdFx0dXJsOiBtZW1iZXIuZGlzcGxheUF2YXRhclVSTCgpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbG9yOiBDb2xvcnMuWWVsbG93LFxuXHRcdFx0XHRmaWVsZHM6IGZpZWxkcyxcblx0XHRcdFx0Zm9vdGVyOiB7XG5cdFx0XHRcdFx0dGV4dDogYOKaoO+4jyBZb3Ugbm93IGhhdmUgJHtpbmZyYWN0aW9uc30gaW5mcmFjdGlvbiR7cGx1cmFsfS5gXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdXG5cdH1cblxuXHQvLyBMb2cgYWN0aW9uIHRvIG1vZGxvZ3MgY2hhbm5lbCBpZiB0aGlzIGlzIG5vdCBpdFxuXHRjb25zdCB7IGxvZ3NDaGFubmVsSWQsIHRlc3RNb2RlIH0gPSBnZXRTZXR0aW5ncyhpbnRlcmFjdGlvbi5ndWlsZElkKVxuXHRpZiAoaW50ZXJhY3Rpb24uY2hhbm5lbElkICE9PSBsb2dzQ2hhbm5lbElkKSB7XG5cdFx0Y29uc3QgdGVzdFByZWZpeCA9IHRlc3RNb2RlID8gJ1tURVNUXSAnIDogJydcblx0XHRsb2dBY3Rpb24oaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdFx0ZW1iZWRzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aXRsZTogdGVzdFByZWZpeCArICdNZW1iZXIgd2FybmVkJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogYCR7bWVtYmVyfSBoYXMgYmVlbiB3YXJuZWRgLFxuXHRcdFx0XHRcdHRodW1ibmFpbDoge1xuXHRcdFx0XHRcdFx0dXJsOiBtZW1iZXIuZGlzcGxheUF2YXRhclVSTCgpXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjb2xvcjogQ29sb3JzLlllbGxvdyxcblx0XHRcdFx0XHRmaWVsZHM6IGZpZWxkcyxcblx0XHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdFx0XHRmb290ZXI6IHtcblx0XHRcdFx0XHRcdGljb25fdXJsOiBpbnRlcmFjdGlvbi51c2VyLmRpc3BsYXlBdmF0YXJVUkwoKSxcblx0XHRcdFx0XHRcdHRleHQ6ICdieSBAJyArIGludGVyYWN0aW9uLnVzZXIudXNlcm5hbWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9KVxuXHR9XG5cblx0Ly8gVGVzdCBtb2RlIC0gZG9uJ3Qgc2VuZCB3YXJuaW5nXG5cdGlmICh0ZXN0TW9kZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRlbWJlZHM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRpdGxlOiAnVGVzdCBtb2RlJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogJ1RoaXMgaXMgYSB0ZXN0LiBObyBhY3Rpb24gaGFzIGJlZW4gdGFrZW4uJyxcblx0XHRcdFx0XHRjb2xvcjogQ29sb3JzLlllbGxvdyxcblx0XHRcdFx0XHRmb290ZXI6IHtcblx0XHRcdFx0XHRcdHRleHQ6IChsb2dzQ2hhbm5lbElkID8gJ1NlZScgOiAnU2V0dXAnKSArIGAgbW9kbG9ncyBjaGFubmVsIGZvciBkZXRhaWxzYFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH1cblx0fVxuXG5cdC8vIEFkZCBpbmZyYWN0aW9uIHRvIG1lbWJlclxuXHRhd2FpdCBGbGFzaGNvcmUuc2V0KCdpbmZyYWN0aW9ucycsIG5ld0luZnJhY3Rpb25zLCB7XG5cdFx0bmFtZXNwYWNlOiBpbnRlcmFjdGlvbi5ndWlsZElkICsgbWVtYmVyLmlkXG5cdH0pXG5cblx0aWYgKGFub255bW91cykge1xuXHRcdGF3YWl0IGludGVyYWN0aW9uLmNoYW5uZWw/LnNlbmQobWVzc2FnZVBheWxvYWQgYXMgTWVzc2FnZUNyZWF0ZU9wdGlvbnMpXG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29udGVudDogJ1dhcm5pbmcgaGFzIGJlZW4gc2VudC4nLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1lc3NhZ2VQYXlsb2FkXG59XG4iXSwibmFtZXMiOlsiZ2V0U2V0dGluZ3MiLCJoYXNQZXJtaXNzaW9uIiwibG9nQWN0aW9uIiwiQ29sb3JzIiwiUGVybWlzc2lvbkZsYWdzQml0cyIsImxvZ2dlciIsImNvbG9yIiwiRmxhc2hjb3JlIiwiY29uZmlnIiwiZGVmYXVsdE1lbWJlclBlcm1pc3Npb25zIiwiTW9kZXJhdGVNZW1iZXJzIiwiZG1QZXJtaXNzaW9uIiwiZGVzY3JpcHRpb24iLCJvcHRpb25zIiwibmFtZSIsInR5cGUiLCJyZXF1aXJlZCIsImludGVyYWN0aW9uIiwiYW5vbnltb3VzIiwiZ2V0IiwidmFsdWUiLCJtZW1iZXIiLCJtZXNzYWdlIiwicmVhc29uIiwiZGVidWciLCJ1c2VyIiwidXNlcm5hbWUiLCJib2xkIiwiY29udGVudCIsImVwaGVtZXJhbCIsIm1lc3NhZ2VMaW5rIiwiZ3VpbGQiLCJpZCIsImNoYW5uZWwiLCJmaWVsZHMiLCJwdXNoIiwiaW5mcmFjdGlvbnMiLCJuYW1lc3BhY2UiLCJndWlsZElkIiwibmV3SW5mcmFjdGlvbnMiLCJwbHVyYWwiLCJtZXNzYWdlUGF5bG9hZCIsInRvU3RyaW5nIiwiZW1iZWRzIiwidGl0bGUiLCJ0aHVtYm5haWwiLCJ1cmwiLCJkaXNwbGF5QXZhdGFyVVJMIiwiWWVsbG93IiwiZm9vdGVyIiwidGV4dCIsImxvZ3NDaGFubmVsSWQiLCJ0ZXN0TW9kZSIsImNoYW5uZWxJZCIsInRlc3RQcmVmaXgiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJpY29uX3VybCIsInNldCIsInNlbmQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFdBQVcsUUFBUSx5QkFBd0I7QUFDcEQsU0FBU0MsYUFBYSxFQUFFQyxTQUFTLFFBQVEsc0JBQXFCO0FBQzlELFNBQVNDLE1BQU0sRUFBRUMsbUJBQW1CLFFBQVEsYUFBWTtBQUN4RCxTQUFTQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxRQUFRLFVBQVM7QUFJbEQsT0FBTyxNQUFNQyxTQUF3QjtJQUNwQ0MsMEJBQTBCTCxvQkFBb0JNLGVBQWU7SUFDN0RDLGNBQWMsS0FBSztJQUNuQkMsYUFBYSxDQUFDLGdDQUFnQyxDQUFDO0lBQy9DQyxTQUFTO1FBQ1I7WUFDQ0MsTUFBTTtZQUNORixhQUFhO1lBQ2JHLE1BQU07WUFDTkMsVUFBVSxJQUFJO1FBQ2Y7UUFDQTtZQUNDRixNQUFNO1lBQ05GLGFBQWE7WUFDYkksVUFBVSxJQUFJO1FBQ2Y7UUFDQTtZQUNDRixNQUFNO1lBQ05GLGFBQWE7UUFDZDtRQUNBO1lBQ0NFLE1BQU07WUFDTkYsYUFBYTtZQUNiRyxNQUFNO1FBQ1A7S0FDQTtBQUNGLEVBQUM7QUFFRCxlQUFlLENBQUEsT0FBT0UsY0FBNEQ7SUFDakYsTUFBTUMsWUFBWSxDQUFDRCxZQUFZSixPQUFPLENBQUNNLEdBQUcsQ0FBQyxjQUFjQyxLQUFnQixLQUFLLEtBQUs7SUFDbkYsTUFBTUMsU0FBU0osWUFBWUosT0FBTyxDQUFDTSxHQUFHLENBQUMsV0FBV0U7SUFDbEQsTUFBTUMsVUFBVUwsWUFBWUosT0FBTyxDQUFDTSxHQUFHLENBQUMsWUFBWUM7SUFDcEQsTUFBTUcsU0FBU04sWUFBWUosT0FBTyxDQUFDTSxHQUFHLENBQUMsV0FBV0M7SUFFbEQsdUJBQXVCO0lBQ3ZCLElBQUksQ0FBQ25CLGNBQWNnQixhQUFhLG9CQUFvQjtRQUNuRFosT0FBT21CLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRVAsWUFBWVEsSUFBSSxDQUFDQyxRQUFRLENBQUMsaUNBQWlDLEVBQUVwQixNQUFNcUIsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1RyxPQUFPO1lBQ05DLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQztZQUNqREMsV0FBVyxJQUFJO1FBQ2hCO0lBQ0QsQ0FBQztJQUVELElBQUlDLGNBQWM7SUFDbEIsSUFBSVIsU0FBUztRQUNaUSxjQUFjLENBQUMsNkJBQTZCLEVBQUViLFlBQVljLEtBQUssRUFBRUMsR0FBRyxDQUFDLEVBQUVmLFlBQVlnQixPQUFPLEVBQUVELEdBQUcsQ0FBQyxFQUFFVixRQUFRLENBQUM7SUFDNUcsQ0FBQztJQUVELE1BQU1ZLFNBQTBCO1FBQy9CO1lBQ0NwQixNQUFNO1lBQ05NLE9BQU9HO1FBQ1I7S0FDQTtJQUNELElBQUlPLGFBQWE7UUFDaEJJLE9BQU9DLElBQUksQ0FBQztZQUNYckIsTUFBTTtZQUNOTSxPQUFPVTtRQUNSO0lBQ0QsQ0FBQztJQUVELDBCQUEwQjtJQUMxQixNQUFNTSxjQUNMLEFBQUMsTUFBTTdCLFVBQVVZLEdBQUcsQ0FBUyxlQUFlO1FBQzNDa0IsV0FBV3BCLFlBQVlxQixPQUFPLEdBQUdqQixPQUFPVyxFQUFFO0lBQzNDLE1BQU87SUFDUixNQUFNTyxpQkFBaUJILGNBQWM7SUFDckMsTUFBTUksU0FBU0osZ0JBQWdCLElBQUksS0FBSyxHQUFHO0lBRTNDLDBCQUEwQjtJQUMxQixNQUFNSyxpQkFBZ0M7UUFDckNiLFNBQVNQLE9BQU9xQixRQUFRO1FBQ3hCQyxRQUFRO1lBQ1A7Z0JBQ0NDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztnQkFDM0JDLFdBQVc7b0JBQ1ZDLEtBQUt6QixPQUFPMEIsZ0JBQWdCO2dCQUM3QjtnQkFDQXpDLE9BQU9ILE9BQU82QyxNQUFNO2dCQUNwQmQsUUFBUUE7Z0JBQ1JlLFFBQVE7b0JBQ1BDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRWQsWUFBWSxXQUFXLEVBQUVJLE9BQU8sQ0FBQyxDQUFDO2dCQUM1RDtZQUNEO1NBQ0E7SUFDRjtJQUVBLGtEQUFrRDtJQUNsRCxNQUFNLEVBQUVXLGNBQWEsRUFBRUMsU0FBUSxFQUFFLEdBQUdwRCxZQUFZaUIsWUFBWXFCLE9BQU87SUFDbkUsSUFBSXJCLFlBQVlvQyxTQUFTLEtBQUtGLGVBQWU7UUFDNUMsTUFBTUcsYUFBYUYsV0FBVyxZQUFZLEVBQUU7UUFDNUNsRCxVQUFVZSxZQUFZcUIsT0FBTyxFQUFFO1lBQzlCSyxRQUFRO2dCQUNQO29CQUNDQyxPQUFPVSxhQUFhO29CQUNwQjFDLGFBQWEsQ0FBQyxFQUFFUyxPQUFPLGdCQUFnQixDQUFDO29CQUN4Q3dCLFdBQVc7d0JBQ1ZDLEtBQUt6QixPQUFPMEIsZ0JBQWdCO29CQUM3QjtvQkFDQXpDLE9BQU9ILE9BQU82QyxNQUFNO29CQUNwQmQsUUFBUUE7b0JBQ1JxQixXQUFXLElBQUlDLE9BQU9DLFdBQVc7b0JBQ2pDUixRQUFRO3dCQUNQUyxVQUFVekMsWUFBWVEsSUFBSSxDQUFDc0IsZ0JBQWdCO3dCQUMzQ0csTUFBTSxTQUFTakMsWUFBWVEsSUFBSSxDQUFDQyxRQUFRO29CQUN6QztnQkFDRDthQUNBO1FBQ0Y7SUFDRCxDQUFDO0lBRUQsaUNBQWlDO0lBQ2pDLElBQUkwQixVQUFVO1FBQ2IsT0FBTztZQUNOVCxRQUFRO2dCQUNQO29CQUNDQyxPQUFPO29CQUNQaEMsYUFBYTtvQkFDYk4sT0FBT0gsT0FBTzZDLE1BQU07b0JBQ3BCQyxRQUFRO3dCQUNQQyxNQUFNLEFBQUNDLENBQUFBLGdCQUFnQixRQUFRLE9BQU8sQUFBRCxJQUFLLENBQUMsNEJBQTRCLENBQUM7b0JBQ3pFO2dCQUNEO2FBQ0E7WUFDRHRCLFdBQVcsSUFBSTtRQUNoQjtJQUNELENBQUM7SUFFRCwyQkFBMkI7SUFDM0IsTUFBTXRCLFVBQVVvRCxHQUFHLENBQUMsZUFBZXBCLGdCQUFnQjtRQUNsREYsV0FBV3BCLFlBQVlxQixPQUFPLEdBQUdqQixPQUFPVyxFQUFFO0lBQzNDO0lBRUEsSUFBSWQsV0FBVztRQUNkLE1BQU1ELFlBQVlnQixPQUFPLEVBQUUyQixLQUFLbkI7UUFFaEMsT0FBTztZQUNOYixTQUFTO1lBQ1RDLFdBQVcsSUFBSTtRQUNoQjtJQUNELENBQUM7SUFFRCxPQUFPWTtBQUNSLENBQUEsRUFBQyJ9