import { getSettings } from '../../core/settings.js';
import { Modals, TextInputs } from '../../core/constants.js';
import { logger, setState } from 'robo.js';
import { ChannelType, Colors, ComponentType, TextInputStyle } from 'discord.js';
export const config = {
    description: 'Report a message anonymously',
    dmPermission: false
};
export default (async (interaction, message)=>{
    // Validate modmail channel
    const { mailChannelId  } = getSettings(interaction.guildId);
    if (!mailChannelId) {
        logger.debug(`No modmail channel set for guild ${interaction.guildId}`);
        return {
            embeds: [
                {
                    title: 'Oops, something went wrong',
                    description: `No modmail channel has set up for this server. Please contact a moderator.`,
                    color: Colors.Red
                }
            ],
            ephemeral: true
        };
    }
    const mailChannel = interaction.guild?.channels?.cache?.get(mailChannelId);
    if (!mailChannel || mailChannel.type !== ChannelType.GuildText) {
        logger.debug(`Invalid modmail channel for guild ${interaction.guildId}`);
        return {
            embeds: [
                {
                    title: 'Oops, something went wrong',
                    description: `Invalid modmail channel set up for this server. Please contact a moderator.`,
                    color: Colors.Red
                }
            ],
            ephemeral: true
        };
    }
    // Set message state to be used in modal
    setState('report-message', message, {
        namespace: interaction.guildId + '-' + interaction.user.id
    });
    // Open modal
    await interaction.showModal({
        title: 'Report message anonymously',
        custom_id: Modals.ReportMessage.id,
        components: [
            {
                type: ComponentType.ActionRow,
                components: [
                    {
                        type: ComponentType.TextInput,
                        label: 'Why are you reporting this message?',
                        style: TextInputStyle.Paragraph,
                        custom_id: TextInputs.ReportReason.id
                    }
                ]
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2NvbnRleHQvbWVzc2FnZS9SZXBvcnQgQW5vbnltb3VzbHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U2V0dGluZ3MgfSBmcm9tICcuLi8uLi9jb3JlL3NldHRpbmdzLmpzJ1xuaW1wb3J0IHsgTW9kYWxzLCBUZXh0SW5wdXRzIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyBsb2dnZXIsIHNldFN0YXRlIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB7IENoYW5uZWxUeXBlLCBDb2xvcnMsIENvbXBvbmVudFR5cGUsIFRleHRJbnB1dFN0eWxlIH0gZnJvbSAnZGlzY29yZC5qcydcbmltcG9ydCB0eXBlIHsgQ29udGV4dENvbmZpZyB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgdHlwZSB7IE1lc3NhZ2VDb250ZXh0TWVudUNvbW1hbmRJbnRlcmFjdGlvbiwgTWVzc2FnZSB9IGZyb20gJ2Rpc2NvcmQuanMnXG5cbmV4cG9ydCBjb25zdCBjb25maWc6IENvbnRleHRDb25maWcgPSB7XG5cdGRlc2NyaXB0aW9uOiAnUmVwb3J0IGEgbWVzc2FnZSBhbm9ueW1vdXNseScsXG5cdGRtUGVybWlzc2lvbjogZmFsc2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBNZXNzYWdlQ29udGV4dE1lbnVDb21tYW5kSW50ZXJhY3Rpb24sIG1lc3NhZ2U6IE1lc3NhZ2UpID0+IHtcblx0Ly8gVmFsaWRhdGUgbW9kbWFpbCBjaGFubmVsXG5cdGNvbnN0IHsgbWFpbENoYW5uZWxJZCB9ID0gZ2V0U2V0dGluZ3MoaW50ZXJhY3Rpb24uZ3VpbGRJZClcblx0aWYgKCFtYWlsQ2hhbm5lbElkKSB7XG5cdFx0bG9nZ2VyLmRlYnVnKGBObyBtb2RtYWlsIGNoYW5uZWwgc2V0IGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZW1iZWRzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aXRsZTogJ09vcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogYE5vIG1vZG1haWwgY2hhbm5lbCBoYXMgc2V0IHVwIGZvciB0aGlzIHNlcnZlci4gUGxlYXNlIGNvbnRhY3QgYSBtb2RlcmF0b3IuYCxcblx0XHRcdFx0XHRjb2xvcjogQ29sb3JzLlJlZFxuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fVxuXHR9XG5cblx0Y29uc3QgbWFpbENoYW5uZWwgPSBpbnRlcmFjdGlvbi5ndWlsZD8uY2hhbm5lbHM/LmNhY2hlPy5nZXQobWFpbENoYW5uZWxJZClcblx0aWYgKCFtYWlsQ2hhbm5lbCB8fCBtYWlsQ2hhbm5lbC50eXBlICE9PSBDaGFubmVsVHlwZS5HdWlsZFRleHQpIHtcblx0XHRsb2dnZXIuZGVidWcoYEludmFsaWQgbW9kbWFpbCBjaGFubmVsIGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZW1iZWRzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aXRsZTogJ09vcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nJyxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogYEludmFsaWQgbW9kbWFpbCBjaGFubmVsIHNldCB1cCBmb3IgdGhpcyBzZXJ2ZXIuIFBsZWFzZSBjb250YWN0IGEgbW9kZXJhdG9yLmAsXG5cdFx0XHRcdFx0Y29sb3I6IENvbG9ycy5SZWRcblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCBtZXNzYWdlIHN0YXRlIHRvIGJlIHVzZWQgaW4gbW9kYWxcblx0c2V0U3RhdGUoJ3JlcG9ydC1tZXNzYWdlJywgbWVzc2FnZSwge1xuXHRcdG5hbWVzcGFjZTogaW50ZXJhY3Rpb24uZ3VpbGRJZCArICctJyArIGludGVyYWN0aW9uLnVzZXIuaWRcblx0fSlcblxuXHQvLyBPcGVuIG1vZGFsXG5cdGF3YWl0IGludGVyYWN0aW9uLnNob3dNb2RhbCh7XG5cdFx0dGl0bGU6ICdSZXBvcnQgbWVzc2FnZSBhbm9ueW1vdXNseScsXG5cdFx0Y3VzdG9tX2lkOiBNb2RhbHMuUmVwb3J0TWVzc2FnZS5pZCxcblx0XHRjb21wb25lbnRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IENvbXBvbmVudFR5cGUuQWN0aW9uUm93LFxuXHRcdFx0XHRjb21wb25lbnRzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dHlwZTogQ29tcG9uZW50VHlwZS5UZXh0SW5wdXQsXG5cdFx0XHRcdFx0XHRsYWJlbDogJ1doeSBhcmUgeW91IHJlcG9ydGluZyB0aGlzIG1lc3NhZ2U/Jyxcblx0XHRcdFx0XHRcdHN0eWxlOiBUZXh0SW5wdXRTdHlsZS5QYXJhZ3JhcGgsXG5cdFx0XHRcdFx0XHRjdXN0b21faWQ6IFRleHRJbnB1dHMuUmVwb3J0UmVhc29uLmlkXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0XVxuXHR9KVxufVxuIl0sIm5hbWVzIjpbImdldFNldHRpbmdzIiwiTW9kYWxzIiwiVGV4dElucHV0cyIsImxvZ2dlciIsInNldFN0YXRlIiwiQ2hhbm5lbFR5cGUiLCJDb2xvcnMiLCJDb21wb25lbnRUeXBlIiwiVGV4dElucHV0U3R5bGUiLCJjb25maWciLCJkZXNjcmlwdGlvbiIsImRtUGVybWlzc2lvbiIsImludGVyYWN0aW9uIiwibWVzc2FnZSIsIm1haWxDaGFubmVsSWQiLCJndWlsZElkIiwiZGVidWciLCJlbWJlZHMiLCJ0aXRsZSIsImNvbG9yIiwiUmVkIiwiZXBoZW1lcmFsIiwibWFpbENoYW5uZWwiLCJndWlsZCIsImNoYW5uZWxzIiwiY2FjaGUiLCJnZXQiLCJ0eXBlIiwiR3VpbGRUZXh0IiwibmFtZXNwYWNlIiwidXNlciIsImlkIiwic2hvd01vZGFsIiwiY3VzdG9tX2lkIiwiUmVwb3J0TWVzc2FnZSIsImNvbXBvbmVudHMiLCJBY3Rpb25Sb3ciLCJUZXh0SW5wdXQiLCJsYWJlbCIsInN0eWxlIiwiUGFyYWdyYXBoIiwiUmVwb3J0UmVhc29uIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxXQUFXLFFBQVEseUJBQXdCO0FBQ3BELFNBQVNDLE1BQU0sRUFBRUMsVUFBVSxRQUFRLDBCQUF5QjtBQUM1RCxTQUFTQyxNQUFNLEVBQUVDLFFBQVEsUUFBUSxVQUFTO0FBQzFDLFNBQVNDLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLGNBQWMsUUFBUSxhQUFZO0FBSS9FLE9BQU8sTUFBTUMsU0FBd0I7SUFDcENDLGFBQWE7SUFDYkMsY0FBYyxLQUFLO0FBQ3BCLEVBQUM7QUFFRCxlQUFlLENBQUEsT0FBT0MsYUFBbURDLFVBQXFCO0lBQzdGLDJCQUEyQjtJQUMzQixNQUFNLEVBQUVDLGNBQWEsRUFBRSxHQUFHZCxZQUFZWSxZQUFZRyxPQUFPO0lBQ3pELElBQUksQ0FBQ0QsZUFBZTtRQUNuQlgsT0FBT2EsS0FBSyxDQUFDLENBQUMsaUNBQWlDLEVBQUVKLFlBQVlHLE9BQU8sQ0FBQyxDQUFDO1FBQ3RFLE9BQU87WUFDTkUsUUFBUTtnQkFDUDtvQkFDQ0MsT0FBTztvQkFDUFIsYUFBYSxDQUFDLDBFQUEwRSxDQUFDO29CQUN6RlMsT0FBT2IsT0FBT2MsR0FBRztnQkFDbEI7YUFDQTtZQUNEQyxXQUFXLElBQUk7UUFDaEI7SUFDRCxDQUFDO0lBRUQsTUFBTUMsY0FBY1YsWUFBWVcsS0FBSyxFQUFFQyxVQUFVQyxPQUFPQyxJQUFJWjtJQUM1RCxJQUFJLENBQUNRLGVBQWVBLFlBQVlLLElBQUksS0FBS3RCLFlBQVl1QixTQUFTLEVBQUU7UUFDL0R6QixPQUFPYSxLQUFLLENBQUMsQ0FBQyxrQ0FBa0MsRUFBRUosWUFBWUcsT0FBTyxDQUFDLENBQUM7UUFDdkUsT0FBTztZQUNORSxRQUFRO2dCQUNQO29CQUNDQyxPQUFPO29CQUNQUixhQUFhLENBQUMsMkVBQTJFLENBQUM7b0JBQzFGUyxPQUFPYixPQUFPYyxHQUFHO2dCQUNsQjthQUNBO1lBQ0RDLFdBQVcsSUFBSTtRQUNoQjtJQUNELENBQUM7SUFFRCx3Q0FBd0M7SUFDeENqQixTQUFTLGtCQUFrQlMsU0FBUztRQUNuQ2dCLFdBQVdqQixZQUFZRyxPQUFPLEdBQUcsTUFBTUgsWUFBWWtCLElBQUksQ0FBQ0MsRUFBRTtJQUMzRDtJQUVBLGFBQWE7SUFDYixNQUFNbkIsWUFBWW9CLFNBQVMsQ0FBQztRQUMzQmQsT0FBTztRQUNQZSxXQUFXaEMsT0FBT2lDLGFBQWEsQ0FBQ0gsRUFBRTtRQUNsQ0ksWUFBWTtZQUNYO2dCQUNDUixNQUFNcEIsY0FBYzZCLFNBQVM7Z0JBQzdCRCxZQUFZO29CQUNYO3dCQUNDUixNQUFNcEIsY0FBYzhCLFNBQVM7d0JBQzdCQyxPQUFPO3dCQUNQQyxPQUFPL0IsZUFBZWdDLFNBQVM7d0JBQy9CUCxXQUFXL0IsV0FBV3VDLFlBQVksQ0FBQ1YsRUFBRTtvQkFDdEM7aUJBQ0E7WUFDRjtTQUNBO0lBQ0Y7QUFDRCxDQUFBLEVBQUMifQ==