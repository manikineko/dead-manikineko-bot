import { createAuditEmbed } from '../../commands/mod/audit.js';
import { hasPermission, isBanned } from '../../core/utils.js';
import { ID_NAMESPACE, Buttons } from '../../core/constants.js';
import { Flashcore, logger } from 'robo.js';
import { ButtonStyle, ComponentType } from 'discord.js';
export const config = {
    description: 'Audit a user',
    dmPermission: false
};
export default (async (interaction, user)=>{
    const member = interaction.guild?.members.cache.get(user.id);
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to unban users`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // See if this user is currently banned
    let status = 'Active';
    const banData = await Flashcore.get('ban', {
        namespace: ID_NAMESPACE + interaction.guildId + user.id
    });
    const isUserBanned = await isBanned(interaction.guild, user.id);
    if (isUserBanned) {
        status = ('Banned for: ' + banData?.reason) ?? 'Unknown';
    }
    const infractions = await Flashcore.get('infractions', {
        namespace: interaction.guildId + user.id
    }) ?? 0;
    return {
        embeds: [
            createAuditEmbed(user, member, status, infractions)
        ],
        components: [
            {
                type: ComponentType.ActionRow,
                components: [
                    {
                        type: ComponentType.Button,
                        style: ButtonStyle.Danger,
                        label: isUserBanned ? 'Unban' : 'Ban',
                        customId: (isUserBanned ? Buttons.Unban.id : Buttons.Ban.id) + '/' + user.id
                    }
                ]
            }
        ]
    };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2NvbnRleHQvdXNlci9BdWRpdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVBdWRpdEVtYmVkIH0gZnJvbSAnLi4vLi4vY29tbWFuZHMvbW9kL2F1ZGl0LmpzJ1xuaW1wb3J0IHsgaGFzUGVybWlzc2lvbiwgaXNCYW5uZWQgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJ1xuaW1wb3J0IHsgSURfTkFNRVNQQUNFLCBCYW5EYXRhLCBCdXR0b25zIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyBGbGFzaGNvcmUsIGxvZ2dlciB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgeyBCdXR0b25TdHlsZSwgQ29tcG9uZW50VHlwZSB9IGZyb20gJ2Rpc2NvcmQuanMnXG5pbXBvcnQgdHlwZSB7IENvbnRleHRDb25maWcgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHR5cGUgeyBHdWlsZCwgR3VpbGRNZW1iZXIsIFVzZXIsIFVzZXJDb250ZXh0TWVudUNvbW1hbmRJbnRlcmFjdGlvbiB9IGZyb20gJ2Rpc2NvcmQuanMnXG5cbmV4cG9ydCBjb25zdCBjb25maWc6IENvbnRleHRDb25maWcgPSB7XG5cdGRlc2NyaXB0aW9uOiAnQXVkaXQgYSB1c2VyJyxcblx0ZG1QZXJtaXNzaW9uOiBmYWxzZVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoaW50ZXJhY3Rpb246IFVzZXJDb250ZXh0TWVudUNvbW1hbmRJbnRlcmFjdGlvbiwgdXNlcjogVXNlcikgPT4ge1xuXHRjb25zdCBtZW1iZXIgPSBpbnRlcmFjdGlvbi5ndWlsZD8ubWVtYmVycy5jYWNoZS5nZXQodXNlci5pZCkgYXMgR3VpbGRNZW1iZXJcblxuXHQvLyBWYWxpZGF0ZSBwZXJtaXNzaW9uc1xuXHRpZiAoIWhhc1Blcm1pc3Npb24oaW50ZXJhY3Rpb24sICdNb2RlcmF0ZU1lbWJlcnMnKSkge1xuXHRcdGxvZ2dlci5kZWJ1ZyhgVXNlciBAJHtpbnRlcmFjdGlvbi51c2VyLnVzZXJuYW1lfSBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gdW5iYW4gdXNlcnNgKVxuXHRcdHJldHVybiBpbnRlcmFjdGlvbi5mb2xsb3dVcCh7XG5cdFx0XHRjb250ZW50OiBgWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcy5gLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fSlcblx0fVxuXG5cdC8vIFNlZSBpZiB0aGlzIHVzZXIgaXMgY3VycmVudGx5IGJhbm5lZFxuXHRsZXQgc3RhdHVzID0gJ0FjdGl2ZSdcblx0Y29uc3QgYmFuRGF0YSA9IGF3YWl0IEZsYXNoY29yZS5nZXQ8QmFuRGF0YT4oJ2JhbicsIHtcblx0XHRuYW1lc3BhY2U6IElEX05BTUVTUEFDRSArIGludGVyYWN0aW9uLmd1aWxkSWQgKyB1c2VyLmlkXG5cdH0pXG5cdGNvbnN0IGlzVXNlckJhbm5lZCA9IGF3YWl0IGlzQmFubmVkKGludGVyYWN0aW9uLmd1aWxkIGFzIEd1aWxkLCB1c2VyLmlkKVxuXG5cdGlmIChpc1VzZXJCYW5uZWQpIHtcblx0XHRzdGF0dXMgPSAnQmFubmVkIGZvcjogJyArIGJhbkRhdGE/LnJlYXNvbiA/PyAnVW5rbm93bidcblx0fVxuXHRjb25zdCBpbmZyYWN0aW9ucyA9XG5cdFx0KGF3YWl0IEZsYXNoY29yZS5nZXQ8bnVtYmVyPignaW5mcmFjdGlvbnMnLCB7XG5cdFx0XHRuYW1lc3BhY2U6IGludGVyYWN0aW9uLmd1aWxkSWQgKyB1c2VyLmlkXG5cdFx0fSkpID8/IDBcblxuXHRyZXR1cm4ge1xuXHRcdGVtYmVkczogW2NyZWF0ZUF1ZGl0RW1iZWQodXNlciwgbWVtYmVyLCBzdGF0dXMsIGluZnJhY3Rpb25zKV0sXG5cdFx0Y29tcG9uZW50czogW1xuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiBDb21wb25lbnRUeXBlLkFjdGlvblJvdyxcblx0XHRcdFx0Y29tcG9uZW50czogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHR5cGU6IENvbXBvbmVudFR5cGUuQnV0dG9uLFxuXHRcdFx0XHRcdFx0c3R5bGU6IEJ1dHRvblN0eWxlLkRhbmdlcixcblx0XHRcdFx0XHRcdGxhYmVsOiBpc1VzZXJCYW5uZWQgPyAnVW5iYW4nIDogJ0JhbicsXG5cdFx0XHRcdFx0XHRjdXN0b21JZDogKGlzVXNlckJhbm5lZCA/IEJ1dHRvbnMuVW5iYW4uaWQgOiBCdXR0b25zLkJhbi5pZCkgKyAnLycgKyB1c2VyLmlkXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0XVxuXHR9XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlQXVkaXRFbWJlZCIsImhhc1Blcm1pc3Npb24iLCJpc0Jhbm5lZCIsIklEX05BTUVTUEFDRSIsIkJ1dHRvbnMiLCJGbGFzaGNvcmUiLCJsb2dnZXIiLCJCdXR0b25TdHlsZSIsIkNvbXBvbmVudFR5cGUiLCJjb25maWciLCJkZXNjcmlwdGlvbiIsImRtUGVybWlzc2lvbiIsImludGVyYWN0aW9uIiwidXNlciIsIm1lbWJlciIsImd1aWxkIiwibWVtYmVycyIsImNhY2hlIiwiZ2V0IiwiaWQiLCJkZWJ1ZyIsInVzZXJuYW1lIiwiZm9sbG93VXAiLCJjb250ZW50IiwiZXBoZW1lcmFsIiwic3RhdHVzIiwiYmFuRGF0YSIsIm5hbWVzcGFjZSIsImd1aWxkSWQiLCJpc1VzZXJCYW5uZWQiLCJyZWFzb24iLCJpbmZyYWN0aW9ucyIsImVtYmVkcyIsImNvbXBvbmVudHMiLCJ0eXBlIiwiQWN0aW9uUm93IiwiQnV0dG9uIiwic3R5bGUiLCJEYW5nZXIiLCJsYWJlbCIsImN1c3RvbUlkIiwiVW5iYW4iLCJCYW4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGdCQUFnQixRQUFRLDhCQUE2QjtBQUM5RCxTQUFTQyxhQUFhLEVBQUVDLFFBQVEsUUFBUSxzQkFBcUI7QUFDN0QsU0FBU0MsWUFBWSxFQUFXQyxPQUFPLFFBQVEsMEJBQXlCO0FBQ3hFLFNBQVNDLFNBQVMsRUFBRUMsTUFBTSxRQUFRLFVBQVM7QUFDM0MsU0FBU0MsV0FBVyxFQUFFQyxhQUFhLFFBQVEsYUFBWTtBQUl2RCxPQUFPLE1BQU1DLFNBQXdCO0lBQ3BDQyxhQUFhO0lBQ2JDLGNBQWMsS0FBSztBQUNwQixFQUFDO0FBRUQsZUFBZSxDQUFBLE9BQU9DLGFBQWdEQyxPQUFlO0lBQ3BGLE1BQU1DLFNBQVNGLFlBQVlHLEtBQUssRUFBRUMsUUFBUUMsS0FBSyxDQUFDQyxHQUFHLENBQUNMLEtBQUtNLEVBQUU7SUFFM0QsdUJBQXVCO0lBQ3ZCLElBQUksQ0FBQ2xCLGNBQWNXLGFBQWEsb0JBQW9CO1FBQ25ETixPQUFPYyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUVSLFlBQVlDLElBQUksQ0FBQ1EsUUFBUSxDQUFDLHdDQUF3QyxDQUFDO1FBQ3pGLE9BQU9ULFlBQVlVLFFBQVEsQ0FBQztZQUMzQkMsU0FBUyxDQUFDLHNDQUFzQyxDQUFDO1lBQ2pEQyxXQUFXLElBQUk7UUFDaEI7SUFDRCxDQUFDO0lBRUQsdUNBQXVDO0lBQ3ZDLElBQUlDLFNBQVM7SUFDYixNQUFNQyxVQUFVLE1BQU1yQixVQUFVYSxHQUFHLENBQVUsT0FBTztRQUNuRFMsV0FBV3hCLGVBQWVTLFlBQVlnQixPQUFPLEdBQUdmLEtBQUtNLEVBQUU7SUFDeEQ7SUFDQSxNQUFNVSxlQUFlLE1BQU0zQixTQUFTVSxZQUFZRyxLQUFLLEVBQVdGLEtBQUtNLEVBQUU7SUFFdkUsSUFBSVUsY0FBYztRQUNqQkosU0FBUyxDQUFBLGlCQUFpQkMsU0FBU0ksTUFBSyxLQUFLO0lBQzlDLENBQUM7SUFDRCxNQUFNQyxjQUNMLEFBQUMsTUFBTTFCLFVBQVVhLEdBQUcsQ0FBUyxlQUFlO1FBQzNDUyxXQUFXZixZQUFZZ0IsT0FBTyxHQUFHZixLQUFLTSxFQUFFO0lBQ3pDLE1BQU87SUFFUixPQUFPO1FBQ05hLFFBQVE7WUFBQ2hDLGlCQUFpQmEsTUFBTUMsUUFBUVcsUUFBUU07U0FBYTtRQUM3REUsWUFBWTtZQUNYO2dCQUNDQyxNQUFNMUIsY0FBYzJCLFNBQVM7Z0JBQzdCRixZQUFZO29CQUNYO3dCQUNDQyxNQUFNMUIsY0FBYzRCLE1BQU07d0JBQzFCQyxPQUFPOUIsWUFBWStCLE1BQU07d0JBQ3pCQyxPQUFPVixlQUFlLFVBQVUsS0FBSzt3QkFDckNXLFVBQVUsQUFBQ1gsQ0FBQUEsZUFBZXpCLFFBQVFxQyxLQUFLLENBQUN0QixFQUFFLEdBQUdmLFFBQVFzQyxHQUFHLENBQUN2QixFQUFFLEFBQUQsSUFBSyxNQUFNTixLQUFLTSxFQUFFO29CQUM3RTtpQkFDQTtZQUNGO1NBQ0E7SUFDRjtBQUNELENBQUEsRUFBQyJ9