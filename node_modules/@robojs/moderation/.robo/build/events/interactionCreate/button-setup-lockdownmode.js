import { createSetupMessage } from '../../commands/mod/setup.js';
import { Buttons } from '../../core/constants.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { getSettings, updateSettings } from '../../core/settings.js';
import { logger } from 'robo.js';
import { Colors } from 'discord.js';
export const config = {
    description: `Toggles lockdown mode when the setup button is clicked`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isButton() || interaction.customId !== Buttons.LockdownMode.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'KickMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to toggle lockdown mode`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Toggle lcokdown mode
    logger.debug(`Toggling lockdown mode for guild ${interaction.guildId}`);
    const settings = getSettings(interaction.guildId);
    const newSettings = updateSettings(interaction.guildId, {
        lockdownMode: !settings.lockdownMode
    });
    // Update setup message
    const setupMessage = createSetupMessage(interaction, newSettings);
    await interaction.editReply({
        content: setupMessage.content,
        components: setupMessage.components
    });
    // Log action to modlogs channel
    const lockdownMode = newSettings.lockdownMode ? 'enabled' : 'disabled';
    logAction(interaction.guildId, {
        embeds: [
            {
                title: `Lockdown mode ${lockdownMode}`,
                description: `Lockdown mode has been ${lockdownMode}`,
                color: newSettings.lockdownMode ? Colors.DarkRed : Colors.Green,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9idXR0b24tc2V0dXAtbG9ja2Rvd25tb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNldHVwTWVzc2FnZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRzL21vZC9zZXR1cC5qcydcbmltcG9ydCB7IEJ1dHRvbnMgfSBmcm9tICcuLi8uLi9jb3JlL2NvbnN0YW50cy5qcydcbmltcG9ydCB7IGhhc1Blcm1pc3Npb24sIGxvZ0FjdGlvbiB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMuanMnXG5pbXBvcnQgeyBnZXRTZXR0aW5ncywgdXBkYXRlU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9jb3JlL3NldHRpbmdzLmpzJ1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB7IENvbG9ycyB9IGZyb20gJ2Rpc2NvcmQuanMnXG5pbXBvcnQgdHlwZSB7IEV2ZW50Q29uZmlnIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB0eXBlIHsgQnV0dG9uSW50ZXJhY3Rpb24gfSBmcm9tICdkaXNjb3JkLmpzJ1xuXG5leHBvcnQgY29uc3QgY29uZmlnOiBFdmVudENvbmZpZyA9IHtcblx0ZGVzY3JpcHRpb246IGBUb2dnbGVzIGxvY2tkb3duIG1vZGUgd2hlbiB0aGUgc2V0dXAgYnV0dG9uIGlzIGNsaWNrZWRgXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChpbnRlcmFjdGlvbjogQnV0dG9uSW50ZXJhY3Rpb24pID0+IHtcblx0Ly8gT25seSBoYW5kbGUgaW50ZXJhY3Rpb24gbWVhbnQgZm9yIHRoaXMgZmlsZVxuXHRpZiAoIWludGVyYWN0aW9uLmlzQnV0dG9uKCkgfHwgaW50ZXJhY3Rpb24uY3VzdG9tSWQgIT09IEJ1dHRvbnMuTG9ja2Rvd25Nb2RlLmlkKSB7XG5cdFx0cmV0dXJuXG5cdH1cblx0YXdhaXQgaW50ZXJhY3Rpb24uZGVmZXJVcGRhdGUoKVxuXG5cdC8vIFZhbGlkYXRlIHBlcm1pc3Npb25zXG5cdGlmICghaGFzUGVybWlzc2lvbihpbnRlcmFjdGlvbiwgJ0tpY2tNZW1iZXJzJykpIHtcblx0XHRsb2dnZXIuZGVidWcoYFVzZXIgQCR7aW50ZXJhY3Rpb24udXNlci51c2VybmFtZX0gZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHRvZ2dsZSBsb2NrZG93biBtb2RlYClcblx0XHRyZXR1cm4gaW50ZXJhY3Rpb24uZm9sbG93VXAoe1xuXHRcdFx0Y29udGVudDogYFlvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gdXNlIHRoaXMuYCxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBUb2dnbGUgbGNva2Rvd24gbW9kZVxuXHRsb2dnZXIuZGVidWcoYFRvZ2dsaW5nIGxvY2tkb3duIG1vZGUgZm9yIGd1aWxkICR7aW50ZXJhY3Rpb24uZ3VpbGRJZH1gKVxuXHRjb25zdCBzZXR0aW5ncyA9IGdldFNldHRpbmdzKGludGVyYWN0aW9uLmd1aWxkSWQpXG5cdGNvbnN0IG5ld1NldHRpbmdzID0gdXBkYXRlU2V0dGluZ3MoaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdGxvY2tkb3duTW9kZTogIXNldHRpbmdzLmxvY2tkb3duTW9kZVxuXHR9KVxuXG5cdC8vIFVwZGF0ZSBzZXR1cCBtZXNzYWdlXG5cdGNvbnN0IHNldHVwTWVzc2FnZSA9IGNyZWF0ZVNldHVwTWVzc2FnZShpbnRlcmFjdGlvbiwgbmV3U2V0dGluZ3MpXG5cdGF3YWl0IGludGVyYWN0aW9uLmVkaXRSZXBseSh7XG5cdFx0Y29udGVudDogc2V0dXBNZXNzYWdlLmNvbnRlbnQsXG5cdFx0Y29tcG9uZW50czogc2V0dXBNZXNzYWdlLmNvbXBvbmVudHNcblx0fSlcblxuXHQvLyBMb2cgYWN0aW9uIHRvIG1vZGxvZ3MgY2hhbm5lbFxuXHRjb25zdCBsb2NrZG93bk1vZGUgPSBuZXdTZXR0aW5ncy5sb2NrZG93bk1vZGUgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnXG5cdGxvZ0FjdGlvbihpbnRlcmFjdGlvbi5ndWlsZElkLCB7XG5cdFx0ZW1iZWRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHRpdGxlOiBgTG9ja2Rvd24gbW9kZSAke2xvY2tkb3duTW9kZX1gLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogYExvY2tkb3duIG1vZGUgaGFzIGJlZW4gJHtsb2NrZG93bk1vZGV9YCxcblx0XHRcdFx0Y29sb3I6IG5ld1NldHRpbmdzLmxvY2tkb3duTW9kZSA/IENvbG9ycy5EYXJrUmVkIDogQ29sb3JzLkdyZWVuLFxuXHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdFx0Zm9vdGVyOiB7XG5cdFx0XHRcdFx0aWNvbl91cmw6IGludGVyYWN0aW9uLnVzZXIuZGlzcGxheUF2YXRhclVSTCgpLFxuXHRcdFx0XHRcdHRleHQ6ICdieSBAJyArIGludGVyYWN0aW9uLnVzZXIudXNlcm5hbWVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdF1cblx0fSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXR1cE1lc3NhZ2UiLCJCdXR0b25zIiwiaGFzUGVybWlzc2lvbiIsImxvZ0FjdGlvbiIsImdldFNldHRpbmdzIiwidXBkYXRlU2V0dGluZ3MiLCJsb2dnZXIiLCJDb2xvcnMiLCJjb25maWciLCJkZXNjcmlwdGlvbiIsImludGVyYWN0aW9uIiwiaXNCdXR0b24iLCJjdXN0b21JZCIsIkxvY2tkb3duTW9kZSIsImlkIiwiZGVmZXJVcGRhdGUiLCJkZWJ1ZyIsInVzZXIiLCJ1c2VybmFtZSIsImZvbGxvd1VwIiwiY29udGVudCIsImVwaGVtZXJhbCIsImd1aWxkSWQiLCJzZXR0aW5ncyIsIm5ld1NldHRpbmdzIiwibG9ja2Rvd25Nb2RlIiwic2V0dXBNZXNzYWdlIiwiZWRpdFJlcGx5IiwiY29tcG9uZW50cyIsImVtYmVkcyIsInRpdGxlIiwiY29sb3IiLCJEYXJrUmVkIiwiR3JlZW4iLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmb290ZXIiLCJpY29uX3VybCIsImRpc3BsYXlBdmF0YXJVUkwiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxrQkFBa0IsUUFBUSw4QkFBNkI7QUFDaEUsU0FBU0MsT0FBTyxRQUFRLDBCQUF5QjtBQUNqRCxTQUFTQyxhQUFhLEVBQUVDLFNBQVMsUUFBUSxzQkFBcUI7QUFDOUQsU0FBU0MsV0FBVyxFQUFFQyxjQUFjLFFBQVEseUJBQXdCO0FBQ3BFLFNBQVNDLE1BQU0sUUFBUSxVQUFTO0FBQ2hDLFNBQVNDLE1BQU0sUUFBUSxhQUFZO0FBSW5DLE9BQU8sTUFBTUMsU0FBc0I7SUFDbENDLGFBQWEsQ0FBQyxzREFBc0QsQ0FBQztBQUN0RSxFQUFDO0FBRUQsZUFBZSxDQUFBLE9BQU9DLGNBQW1DO0lBQ3hELDhDQUE4QztJQUM5QyxJQUFJLENBQUNBLFlBQVlDLFFBQVEsTUFBTUQsWUFBWUUsUUFBUSxLQUFLWCxRQUFRWSxZQUFZLENBQUNDLEVBQUUsRUFBRTtRQUNoRjtJQUNELENBQUM7SUFDRCxNQUFNSixZQUFZSyxXQUFXO0lBRTdCLHVCQUF1QjtJQUN2QixJQUFJLENBQUNiLGNBQWNRLGFBQWEsZ0JBQWdCO1FBQy9DSixPQUFPVSxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUVOLFlBQVlPLElBQUksQ0FBQ0MsUUFBUSxDQUFDLGlEQUFpRCxDQUFDO1FBQ2xHLE9BQU9SLFlBQVlTLFFBQVEsQ0FBQztZQUMzQkMsU0FBUyxDQUFDLHNDQUFzQyxDQUFDO1lBQ2pEQyxXQUFXLElBQUk7UUFDaEI7SUFDRCxDQUFDO0lBRUQsdUJBQXVCO0lBQ3ZCZixPQUFPVSxLQUFLLENBQUMsQ0FBQyxpQ0FBaUMsRUFBRU4sWUFBWVksT0FBTyxDQUFDLENBQUM7SUFDdEUsTUFBTUMsV0FBV25CLFlBQVlNLFlBQVlZLE9BQU87SUFDaEQsTUFBTUUsY0FBY25CLGVBQWVLLFlBQVlZLE9BQU8sRUFBRTtRQUN2REcsY0FBYyxDQUFDRixTQUFTRSxZQUFZO0lBQ3JDO0lBRUEsdUJBQXVCO0lBQ3ZCLE1BQU1DLGVBQWUxQixtQkFBbUJVLGFBQWFjO0lBQ3JELE1BQU1kLFlBQVlpQixTQUFTLENBQUM7UUFDM0JQLFNBQVNNLGFBQWFOLE9BQU87UUFDN0JRLFlBQVlGLGFBQWFFLFVBQVU7SUFDcEM7SUFFQSxnQ0FBZ0M7SUFDaEMsTUFBTUgsZUFBZUQsWUFBWUMsWUFBWSxHQUFHLFlBQVksVUFBVTtJQUN0RXRCLFVBQVVPLFlBQVlZLE9BQU8sRUFBRTtRQUM5Qk8sUUFBUTtZQUNQO2dCQUNDQyxPQUFPLENBQUMsY0FBYyxFQUFFTCxhQUFhLENBQUM7Z0JBQ3RDaEIsYUFBYSxDQUFDLHVCQUF1QixFQUFFZ0IsYUFBYSxDQUFDO2dCQUNyRE0sT0FBT1AsWUFBWUMsWUFBWSxHQUFHbEIsT0FBT3lCLE9BQU8sR0FBR3pCLE9BQU8wQixLQUFLO2dCQUMvREMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO2dCQUNqQ0MsUUFBUTtvQkFDUEMsVUFBVTVCLFlBQVlPLElBQUksQ0FBQ3NCLGdCQUFnQjtvQkFDM0NDLE1BQU0sU0FBUzlCLFlBQVlPLElBQUksQ0FBQ0MsUUFBUTtnQkFDekM7WUFDRDtTQUNBO0lBQ0Y7QUFDRCxDQUFBLEVBQUMifQ==