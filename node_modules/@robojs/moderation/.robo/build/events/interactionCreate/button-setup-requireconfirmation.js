import { Buttons } from '../../core/constants.js';
import { getSettings, updateSettings } from '../../core/settings.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { createSetupMessage } from '../../commands/mod/setup.js';
import { logger } from 'robo.js';
import { Colors } from 'discord.js';
export const config = {
    description: `Toggles confirmation mode when the setup button is clicked`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isButton() || interaction.customId !== Buttons.RequireConfirmation.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to toggle confirmation mode`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Toggle require confirmation
    logger.debug(`Toggling confirmation mode for guild ${interaction.guildId}`);
    const settings = getSettings(interaction.guildId);
    const newSettings = updateSettings(interaction.guildId, {
        requireConfirmation: !settings.requireConfirmation
    });
    // Update setup message
    const setupMessage = createSetupMessage(interaction, newSettings);
    await interaction.editReply({
        content: setupMessage.content,
        components: setupMessage.components
    });
    // Log action to modlogs channel
    const requireConfirmation = newSettings.requireConfirmation ? 'enabled' : 'disabled';
    logAction(interaction.guildId, {
        embeds: [
            {
                title: `Confirmation mode ${requireConfirmation}`,
                description: `Confirmation mode has been ${requireConfirmation}`,
                color: newSettings.requireConfirmation ? Colors.Blurple : Colors.Greyple,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9idXR0b24tc2V0dXAtcmVxdWlyZWNvbmZpcm1hdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b25zIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyBnZXRTZXR0aW5ncywgdXBkYXRlU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9jb3JlL3NldHRpbmdzLmpzJ1xuaW1wb3J0IHsgaGFzUGVybWlzc2lvbiwgbG9nQWN0aW9uIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy5qcydcbmltcG9ydCB7IGNyZWF0ZVNldHVwTWVzc2FnZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRzL21vZC9zZXR1cC5qcydcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tICdkaXNjb3JkLmpzJ1xuaW1wb3J0IHR5cGUgeyBFdmVudENvbmZpZyB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgdHlwZSB7IEJ1dHRvbkludGVyYWN0aW9uIH0gZnJvbSAnZGlzY29yZC5qcydcblxuZXhwb3J0IGNvbnN0IGNvbmZpZzogRXZlbnRDb25maWcgPSB7XG5cdGRlc2NyaXB0aW9uOiBgVG9nZ2xlcyBjb25maXJtYXRpb24gbW9kZSB3aGVuIHRoZSBzZXR1cCBidXR0b24gaXMgY2xpY2tlZGBcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBCdXR0b25JbnRlcmFjdGlvbikgPT4ge1xuXHQvLyBPbmx5IGhhbmRsZSBpbnRlcmFjdGlvbiBtZWFudCBmb3IgdGhpcyBmaWxlXG5cdGlmICghaW50ZXJhY3Rpb24uaXNCdXR0b24oKSB8fCBpbnRlcmFjdGlvbi5jdXN0b21JZCAhPT0gQnV0dG9ucy5SZXF1aXJlQ29uZmlybWF0aW9uLmlkKSB7XG5cdFx0cmV0dXJuXG5cdH1cblx0YXdhaXQgaW50ZXJhY3Rpb24uZGVmZXJVcGRhdGUoKVxuXG5cdC8vIFZhbGlkYXRlIHBlcm1pc3Npb25zXG5cdGlmICghaGFzUGVybWlzc2lvbihpbnRlcmFjdGlvbiwgJ01vZGVyYXRlTWVtYmVycycpKSB7XG5cdFx0bG9nZ2VyLmRlYnVnKGBVc2VyIEAke2ludGVyYWN0aW9uLnVzZXIudXNlcm5hbWV9IGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byB0b2dnbGUgY29uZmlybWF0aW9uIG1vZGVgKVxuXHRcdHJldHVybiBpbnRlcmFjdGlvbi5mb2xsb3dVcCh7XG5cdFx0XHRjb250ZW50OiBgWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcy5gLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fSlcblx0fVxuXG5cdC8vIFRvZ2dsZSByZXF1aXJlIGNvbmZpcm1hdGlvblxuXHRsb2dnZXIuZGVidWcoYFRvZ2dsaW5nIGNvbmZpcm1hdGlvbiBtb2RlIGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0Y29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncyhpbnRlcmFjdGlvbi5ndWlsZElkKVxuXHRjb25zdCBuZXdTZXR0aW5ncyA9IHVwZGF0ZVNldHRpbmdzKGludGVyYWN0aW9uLmd1aWxkSWQsIHtcblx0XHRyZXF1aXJlQ29uZmlybWF0aW9uOiAhc2V0dGluZ3MucmVxdWlyZUNvbmZpcm1hdGlvblxuXHR9KVxuXG5cdC8vIFVwZGF0ZSBzZXR1cCBtZXNzYWdlXG5cdGNvbnN0IHNldHVwTWVzc2FnZSA9IGNyZWF0ZVNldHVwTWVzc2FnZShpbnRlcmFjdGlvbiwgbmV3U2V0dGluZ3MpXG5cdGF3YWl0IGludGVyYWN0aW9uLmVkaXRSZXBseSh7XG5cdFx0Y29udGVudDogc2V0dXBNZXNzYWdlLmNvbnRlbnQsXG5cdFx0Y29tcG9uZW50czogc2V0dXBNZXNzYWdlLmNvbXBvbmVudHNcblx0fSlcblxuXHQvLyBMb2cgYWN0aW9uIHRvIG1vZGxvZ3MgY2hhbm5lbFxuXHRjb25zdCByZXF1aXJlQ29uZmlybWF0aW9uID0gbmV3U2V0dGluZ3MucmVxdWlyZUNvbmZpcm1hdGlvbiA/ICdlbmFibGVkJyA6ICdkaXNhYmxlZCdcblx0bG9nQWN0aW9uKGludGVyYWN0aW9uLmd1aWxkSWQsIHtcblx0XHRlbWJlZHM6IFtcblx0XHRcdHtcblx0XHRcdFx0dGl0bGU6IGBDb25maXJtYXRpb24gbW9kZSAke3JlcXVpcmVDb25maXJtYXRpb259YCxcblx0XHRcdFx0ZGVzY3JpcHRpb246IGBDb25maXJtYXRpb24gbW9kZSBoYXMgYmVlbiAke3JlcXVpcmVDb25maXJtYXRpb259YCxcblx0XHRcdFx0Y29sb3I6IG5ld1NldHRpbmdzLnJlcXVpcmVDb25maXJtYXRpb24gPyBDb2xvcnMuQmx1cnBsZSA6IENvbG9ycy5HcmV5cGxlLFxuXHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdFx0Zm9vdGVyOiB7XG5cdFx0XHRcdFx0aWNvbl91cmw6IGludGVyYWN0aW9uLnVzZXIuZGlzcGxheUF2YXRhclVSTCgpLFxuXHRcdFx0XHRcdHRleHQ6ICdieSBAJyArIGludGVyYWN0aW9uLnVzZXIudXNlcm5hbWVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdF1cblx0fSlcbn1cbiJdLCJuYW1lcyI6WyJCdXR0b25zIiwiZ2V0U2V0dGluZ3MiLCJ1cGRhdGVTZXR0aW5ncyIsImhhc1Blcm1pc3Npb24iLCJsb2dBY3Rpb24iLCJjcmVhdGVTZXR1cE1lc3NhZ2UiLCJsb2dnZXIiLCJDb2xvcnMiLCJjb25maWciLCJkZXNjcmlwdGlvbiIsImludGVyYWN0aW9uIiwiaXNCdXR0b24iLCJjdXN0b21JZCIsIlJlcXVpcmVDb25maXJtYXRpb24iLCJpZCIsImRlZmVyVXBkYXRlIiwiZGVidWciLCJ1c2VyIiwidXNlcm5hbWUiLCJmb2xsb3dVcCIsImNvbnRlbnQiLCJlcGhlbWVyYWwiLCJndWlsZElkIiwic2V0dGluZ3MiLCJuZXdTZXR0aW5ncyIsInJlcXVpcmVDb25maXJtYXRpb24iLCJzZXR1cE1lc3NhZ2UiLCJlZGl0UmVwbHkiLCJjb21wb25lbnRzIiwiZW1iZWRzIiwidGl0bGUiLCJjb2xvciIsIkJsdXJwbGUiLCJHcmV5cGxlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZm9vdGVyIiwiaWNvbl91cmwiLCJkaXNwbGF5QXZhdGFyVVJMIiwidGV4dCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsT0FBTyxRQUFRLDBCQUF5QjtBQUNqRCxTQUFTQyxXQUFXLEVBQUVDLGNBQWMsUUFBUSx5QkFBd0I7QUFDcEUsU0FBU0MsYUFBYSxFQUFFQyxTQUFTLFFBQVEsc0JBQXFCO0FBQzlELFNBQVNDLGtCQUFrQixRQUFRLDhCQUE2QjtBQUNoRSxTQUFTQyxNQUFNLFFBQVEsVUFBUztBQUNoQyxTQUFTQyxNQUFNLFFBQVEsYUFBWTtBQUluQyxPQUFPLE1BQU1DLFNBQXNCO0lBQ2xDQyxhQUFhLENBQUMsMERBQTBELENBQUM7QUFDMUUsRUFBQztBQUVELGVBQWUsQ0FBQSxPQUFPQyxjQUFtQztJQUN4RCw4Q0FBOEM7SUFDOUMsSUFBSSxDQUFDQSxZQUFZQyxRQUFRLE1BQU1ELFlBQVlFLFFBQVEsS0FBS1osUUFBUWEsbUJBQW1CLENBQUNDLEVBQUUsRUFBRTtRQUN2RjtJQUNELENBQUM7SUFDRCxNQUFNSixZQUFZSyxXQUFXO0lBRTdCLHVCQUF1QjtJQUN2QixJQUFJLENBQUNaLGNBQWNPLGFBQWEsb0JBQW9CO1FBQ25ESixPQUFPVSxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUVOLFlBQVlPLElBQUksQ0FBQ0MsUUFBUSxDQUFDLHFEQUFxRCxDQUFDO1FBQ3RHLE9BQU9SLFlBQVlTLFFBQVEsQ0FBQztZQUMzQkMsU0FBUyxDQUFDLHNDQUFzQyxDQUFDO1lBQ2pEQyxXQUFXLElBQUk7UUFDaEI7SUFDRCxDQUFDO0lBRUQsOEJBQThCO0lBQzlCZixPQUFPVSxLQUFLLENBQUMsQ0FBQyxxQ0FBcUMsRUFBRU4sWUFBWVksT0FBTyxDQUFDLENBQUM7SUFDMUUsTUFBTUMsV0FBV3RCLFlBQVlTLFlBQVlZLE9BQU87SUFDaEQsTUFBTUUsY0FBY3RCLGVBQWVRLFlBQVlZLE9BQU8sRUFBRTtRQUN2REcscUJBQXFCLENBQUNGLFNBQVNFLG1CQUFtQjtJQUNuRDtJQUVBLHVCQUF1QjtJQUN2QixNQUFNQyxlQUFlckIsbUJBQW1CSyxhQUFhYztJQUNyRCxNQUFNZCxZQUFZaUIsU0FBUyxDQUFDO1FBQzNCUCxTQUFTTSxhQUFhTixPQUFPO1FBQzdCUSxZQUFZRixhQUFhRSxVQUFVO0lBQ3BDO0lBRUEsZ0NBQWdDO0lBQ2hDLE1BQU1ILHNCQUFzQkQsWUFBWUMsbUJBQW1CLEdBQUcsWUFBWSxVQUFVO0lBQ3BGckIsVUFBVU0sWUFBWVksT0FBTyxFQUFFO1FBQzlCTyxRQUFRO1lBQ1A7Z0JBQ0NDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRUwsb0JBQW9CLENBQUM7Z0JBQ2pEaEIsYUFBYSxDQUFDLDJCQUEyQixFQUFFZ0Isb0JBQW9CLENBQUM7Z0JBQ2hFTSxPQUFPUCxZQUFZQyxtQkFBbUIsR0FBR2xCLE9BQU95QixPQUFPLEdBQUd6QixPQUFPMEIsT0FBTztnQkFDeEVDLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztnQkFDakNDLFFBQVE7b0JBQ1BDLFVBQVU1QixZQUFZTyxJQUFJLENBQUNzQixnQkFBZ0I7b0JBQzNDQyxNQUFNLFNBQVM5QixZQUFZTyxJQUFJLENBQUNDLFFBQVE7Z0JBQ3pDO1lBQ0Q7U0FDQTtJQUNGO0FBQ0QsQ0FBQSxFQUFDIn0=