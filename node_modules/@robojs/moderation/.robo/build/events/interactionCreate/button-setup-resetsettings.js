import { Buttons } from '../../core/constants.js';
import { updateSettings } from '../../core/settings.js';
import { createSetupMessage } from '../../commands/mod/setup.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { logger } from 'robo.js';
import { Colors } from 'discord.js';
export const config = {
    description: `Resets settings when the setup button is clicked`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isButton() || interaction.customId !== Buttons.ResetSettings.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to reset settings`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Reset settings
    logger.debug(`Resetting settings for guild ${interaction.guildId}`);
    const newSettings = updateSettings(interaction.guildId, {
        auditLogsChannelId: undefined,
        logsChannelId: undefined,
        mailChannelId: undefined,
        requireConfirmation: false,
        testMode: false
    });
    // Update setup message
    const setupMessage = createSetupMessage(interaction, newSettings);
    await interaction.editReply({
        content: setupMessage.content,
        components: setupMessage.components
    });
    await interaction.followUp({
        content: 'Moderation settings have been reset.',
        ephemeral: true
    });
    // Log action to modlogs channel
    logAction(interaction.guildId, {
        embeds: [
            {
                title: 'Settings reset',
                description: `Settings have been reset`,
                color: Colors.Red,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9idXR0b24tc2V0dXAtcmVzZXRzZXR0aW5ncy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b25zIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyB1cGRhdGVTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2NvcmUvc2V0dGluZ3MuanMnXG5pbXBvcnQgeyBjcmVhdGVTZXR1cE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9jb21tYW5kcy9tb2Qvc2V0dXAuanMnXG5pbXBvcnQgeyBoYXNQZXJtaXNzaW9uLCBsb2dBY3Rpb24gfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJ1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB7IENvbG9ycyB9IGZyb20gJ2Rpc2NvcmQuanMnXG5pbXBvcnQgdHlwZSB7IEV2ZW50Q29uZmlnIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB0eXBlIHsgQnV0dG9uSW50ZXJhY3Rpb24gfSBmcm9tICdkaXNjb3JkLmpzJ1xuXG5leHBvcnQgY29uc3QgY29uZmlnOiBFdmVudENvbmZpZyA9IHtcblx0ZGVzY3JpcHRpb246IGBSZXNldHMgc2V0dGluZ3Mgd2hlbiB0aGUgc2V0dXAgYnV0dG9uIGlzIGNsaWNrZWRgXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChpbnRlcmFjdGlvbjogQnV0dG9uSW50ZXJhY3Rpb24pID0+IHtcblx0Ly8gT25seSBoYW5kbGUgaW50ZXJhY3Rpb24gbWVhbnQgZm9yIHRoaXMgZmlsZVxuXHRpZiAoIWludGVyYWN0aW9uLmlzQnV0dG9uKCkgfHwgaW50ZXJhY3Rpb24uY3VzdG9tSWQgIT09IEJ1dHRvbnMuUmVzZXRTZXR0aW5ncy5pZCkge1xuXHRcdHJldHVyblxuXHR9XG5cdGF3YWl0IGludGVyYWN0aW9uLmRlZmVyVXBkYXRlKClcblxuXHQvLyBWYWxpZGF0ZSBwZXJtaXNzaW9uc1xuXHRpZiAoIWhhc1Blcm1pc3Npb24oaW50ZXJhY3Rpb24sICdNb2RlcmF0ZU1lbWJlcnMnKSkge1xuXHRcdGxvZ2dlci5kZWJ1ZyhgVXNlciBAJHtpbnRlcmFjdGlvbi51c2VyLnVzZXJuYW1lfSBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gcmVzZXQgc2V0dGluZ3NgKVxuXHRcdHJldHVybiBpbnRlcmFjdGlvbi5mb2xsb3dVcCh7XG5cdFx0XHRjb250ZW50OiBgWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhpcy5gLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fSlcblx0fVxuXG5cdC8vIFJlc2V0IHNldHRpbmdzXG5cdGxvZ2dlci5kZWJ1ZyhgUmVzZXR0aW5nIHNldHRpbmdzIGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0Y29uc3QgbmV3U2V0dGluZ3MgPSB1cGRhdGVTZXR0aW5ncyhpbnRlcmFjdGlvbi5ndWlsZElkLCB7XG5cdFx0YXVkaXRMb2dzQ2hhbm5lbElkOiB1bmRlZmluZWQsXG5cdFx0bG9nc0NoYW5uZWxJZDogdW5kZWZpbmVkLFxuXHRcdG1haWxDaGFubmVsSWQ6IHVuZGVmaW5lZCxcblx0XHRyZXF1aXJlQ29uZmlybWF0aW9uOiBmYWxzZSxcblx0XHR0ZXN0TW9kZTogZmFsc2Vcblx0fSlcblxuXHQvLyBVcGRhdGUgc2V0dXAgbWVzc2FnZVxuXHRjb25zdCBzZXR1cE1lc3NhZ2UgPSBjcmVhdGVTZXR1cE1lc3NhZ2UoaW50ZXJhY3Rpb24sIG5ld1NldHRpbmdzKVxuXHRhd2FpdCBpbnRlcmFjdGlvbi5lZGl0UmVwbHkoe1xuXHRcdGNvbnRlbnQ6IHNldHVwTWVzc2FnZS5jb250ZW50LFxuXHRcdGNvbXBvbmVudHM6IHNldHVwTWVzc2FnZS5jb21wb25lbnRzXG5cdH0pXG5cdGF3YWl0IGludGVyYWN0aW9uLmZvbGxvd1VwKHtcblx0XHRjb250ZW50OiAnTW9kZXJhdGlvbiBzZXR0aW5ncyBoYXZlIGJlZW4gcmVzZXQuJyxcblx0XHRlcGhlbWVyYWw6IHRydWVcblx0fSlcblxuXHQvLyBMb2cgYWN0aW9uIHRvIG1vZGxvZ3MgY2hhbm5lbFxuXHRsb2dBY3Rpb24oaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdGVtYmVkczogW1xuXHRcdFx0e1xuXHRcdFx0XHR0aXRsZTogJ1NldHRpbmdzIHJlc2V0Jyxcblx0XHRcdFx0ZGVzY3JpcHRpb246IGBTZXR0aW5ncyBoYXZlIGJlZW4gcmVzZXRgLFxuXHRcdFx0XHRjb2xvcjogQ29sb3JzLlJlZCxcblx0XHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRcdGZvb3Rlcjoge1xuXHRcdFx0XHRcdGljb25fdXJsOiBpbnRlcmFjdGlvbi51c2VyLmRpc3BsYXlBdmF0YXJVUkwoKSxcblx0XHRcdFx0XHR0ZXh0OiAnYnkgQCcgKyBpbnRlcmFjdGlvbi51c2VyLnVzZXJuYW1lXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdXG5cdH0pXG59XG4iXSwibmFtZXMiOlsiQnV0dG9ucyIsInVwZGF0ZVNldHRpbmdzIiwiY3JlYXRlU2V0dXBNZXNzYWdlIiwiaGFzUGVybWlzc2lvbiIsImxvZ0FjdGlvbiIsImxvZ2dlciIsIkNvbG9ycyIsImNvbmZpZyIsImRlc2NyaXB0aW9uIiwiaW50ZXJhY3Rpb24iLCJpc0J1dHRvbiIsImN1c3RvbUlkIiwiUmVzZXRTZXR0aW5ncyIsImlkIiwiZGVmZXJVcGRhdGUiLCJkZWJ1ZyIsInVzZXIiLCJ1c2VybmFtZSIsImZvbGxvd1VwIiwiY29udGVudCIsImVwaGVtZXJhbCIsImd1aWxkSWQiLCJuZXdTZXR0aW5ncyIsImF1ZGl0TG9nc0NoYW5uZWxJZCIsInVuZGVmaW5lZCIsImxvZ3NDaGFubmVsSWQiLCJtYWlsQ2hhbm5lbElkIiwicmVxdWlyZUNvbmZpcm1hdGlvbiIsInRlc3RNb2RlIiwic2V0dXBNZXNzYWdlIiwiZWRpdFJlcGx5IiwiY29tcG9uZW50cyIsImVtYmVkcyIsInRpdGxlIiwiY29sb3IiLCJSZWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmb290ZXIiLCJpY29uX3VybCIsImRpc3BsYXlBdmF0YXJVUkwiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxPQUFPLFFBQVEsMEJBQXlCO0FBQ2pELFNBQVNDLGNBQWMsUUFBUSx5QkFBd0I7QUFDdkQsU0FBU0Msa0JBQWtCLFFBQVEsOEJBQTZCO0FBQ2hFLFNBQVNDLGFBQWEsRUFBRUMsU0FBUyxRQUFRLHNCQUFxQjtBQUM5RCxTQUFTQyxNQUFNLFFBQVEsVUFBUztBQUNoQyxTQUFTQyxNQUFNLFFBQVEsYUFBWTtBQUluQyxPQUFPLE1BQU1DLFNBQXNCO0lBQ2xDQyxhQUFhLENBQUMsZ0RBQWdELENBQUM7QUFDaEUsRUFBQztBQUVELGVBQWUsQ0FBQSxPQUFPQyxjQUFtQztJQUN4RCw4Q0FBOEM7SUFDOUMsSUFBSSxDQUFDQSxZQUFZQyxRQUFRLE1BQU1ELFlBQVlFLFFBQVEsS0FBS1gsUUFBUVksYUFBYSxDQUFDQyxFQUFFLEVBQUU7UUFDakY7SUFDRCxDQUFDO0lBQ0QsTUFBTUosWUFBWUssV0FBVztJQUU3Qix1QkFBdUI7SUFDdkIsSUFBSSxDQUFDWCxjQUFjTSxhQUFhLG9CQUFvQjtRQUNuREosT0FBT1UsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFTixZQUFZTyxJQUFJLENBQUNDLFFBQVEsQ0FBQywyQ0FBMkMsQ0FBQztRQUM1RixPQUFPUixZQUFZUyxRQUFRLENBQUM7WUFDM0JDLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQztZQUNqREMsV0FBVyxJQUFJO1FBQ2hCO0lBQ0QsQ0FBQztJQUVELGlCQUFpQjtJQUNqQmYsT0FBT1UsS0FBSyxDQUFDLENBQUMsNkJBQTZCLEVBQUVOLFlBQVlZLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLE1BQU1DLGNBQWNyQixlQUFlUSxZQUFZWSxPQUFPLEVBQUU7UUFDdkRFLG9CQUFvQkM7UUFDcEJDLGVBQWVEO1FBQ2ZFLGVBQWVGO1FBQ2ZHLHFCQUFxQixLQUFLO1FBQzFCQyxVQUFVLEtBQUs7SUFDaEI7SUFFQSx1QkFBdUI7SUFDdkIsTUFBTUMsZUFBZTNCLG1CQUFtQk8sYUFBYWE7SUFDckQsTUFBTWIsWUFBWXFCLFNBQVMsQ0FBQztRQUMzQlgsU0FBU1UsYUFBYVYsT0FBTztRQUM3QlksWUFBWUYsYUFBYUUsVUFBVTtJQUNwQztJQUNBLE1BQU10QixZQUFZUyxRQUFRLENBQUM7UUFDMUJDLFNBQVM7UUFDVEMsV0FBVyxJQUFJO0lBQ2hCO0lBRUEsZ0NBQWdDO0lBQ2hDaEIsVUFBVUssWUFBWVksT0FBTyxFQUFFO1FBQzlCVyxRQUFRO1lBQ1A7Z0JBQ0NDLE9BQU87Z0JBQ1B6QixhQUFhLENBQUMsd0JBQXdCLENBQUM7Z0JBQ3ZDMEIsT0FBTzVCLE9BQU82QixHQUFHO2dCQUNqQkMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO2dCQUNqQ0MsUUFBUTtvQkFDUEMsVUFBVS9CLFlBQVlPLElBQUksQ0FBQ3lCLGdCQUFnQjtvQkFDM0NDLE1BQU0sU0FBU2pDLFlBQVlPLElBQUksQ0FBQ0MsUUFBUTtnQkFDekM7WUFDRDtTQUNBO0lBQ0Y7QUFDRCxDQUFBLEVBQUMifQ==