import { createSetupMessage } from '../../commands/mod/setup.js';
import { Buttons } from '../../core/constants.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { getSettings, updateSettings } from '../../core/settings.js';
import { logger } from 'robo.js';
import { Colors } from 'discord.js';
export const config = {
    description: `Toggles test mode when the setup button is clicked`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isButton() || interaction.customId !== Buttons.TestMode.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to toggle test mode`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Toggle test mode
    logger.debug(`Toggling test mode for guild ${interaction.guildId}`);
    const settings = getSettings(interaction.guildId);
    const newSettings = updateSettings(interaction.guildId, {
        testMode: !settings.testMode
    });
    // Update setup message
    const setupMessage = createSetupMessage(interaction, newSettings);
    await interaction.editReply({
        content: setupMessage.content,
        components: setupMessage.components
    });
    // Log action to modlogs channel
    const testMode = newSettings.testMode ? 'enabled' : 'disabled';
    logAction(interaction.guildId, {
        embeds: [
            {
                title: `Test mode ${testMode}`,
                description: `Test mode has been ${testMode}`,
                color: newSettings.testMode ? Colors.Blurple : Colors.Greyple,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9idXR0b24tc2V0dXAtdGVzdG1vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2V0dXBNZXNzYWdlIH0gZnJvbSAnLi4vLi4vY29tbWFuZHMvbW9kL3NldHVwLmpzJ1xuaW1wb3J0IHsgQnV0dG9ucyB9IGZyb20gJy4uLy4uL2NvcmUvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHsgaGFzUGVybWlzc2lvbiwgbG9nQWN0aW9uIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy5qcydcbmltcG9ydCB7IGdldFNldHRpbmdzLCB1cGRhdGVTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2NvcmUvc2V0dGluZ3MuanMnXG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSAnZGlzY29yZC5qcydcbmltcG9ydCB0eXBlIHsgRXZlbnRDb25maWcgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHR5cGUgeyBCdXR0b25JbnRlcmFjdGlvbiB9IGZyb20gJ2Rpc2NvcmQuanMnXG5cbmV4cG9ydCBjb25zdCBjb25maWc6IEV2ZW50Q29uZmlnID0ge1xuXHRkZXNjcmlwdGlvbjogYFRvZ2dsZXMgdGVzdCBtb2RlIHdoZW4gdGhlIHNldHVwIGJ1dHRvbiBpcyBjbGlja2VkYFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoaW50ZXJhY3Rpb246IEJ1dHRvbkludGVyYWN0aW9uKSA9PiB7XG5cdC8vIE9ubHkgaGFuZGxlIGludGVyYWN0aW9uIG1lYW50IGZvciB0aGlzIGZpbGVcblx0aWYgKCFpbnRlcmFjdGlvbi5pc0J1dHRvbigpIHx8IGludGVyYWN0aW9uLmN1c3RvbUlkICE9PSBCdXR0b25zLlRlc3RNb2RlLmlkKSB7XG5cdFx0cmV0dXJuXG5cdH1cblx0YXdhaXQgaW50ZXJhY3Rpb24uZGVmZXJVcGRhdGUoKVxuXG5cdC8vIFZhbGlkYXRlIHBlcm1pc3Npb25zXG5cdGlmICghaGFzUGVybWlzc2lvbihpbnRlcmFjdGlvbiwgJ01vZGVyYXRlTWVtYmVycycpKSB7XG5cdFx0bG9nZ2VyLmRlYnVnKGBVc2VyIEAke2ludGVyYWN0aW9uLnVzZXIudXNlcm5hbWV9IGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byB0b2dnbGUgdGVzdCBtb2RlYClcblx0XHRyZXR1cm4gaW50ZXJhY3Rpb24uZm9sbG93VXAoe1xuXHRcdFx0Y29udGVudDogYFlvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gdXNlIHRoaXMuYCxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBUb2dnbGUgdGVzdCBtb2RlXG5cdGxvZ2dlci5kZWJ1ZyhgVG9nZ2xpbmcgdGVzdCBtb2RlIGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0Y29uc3Qgc2V0dGluZ3MgPSBnZXRTZXR0aW5ncyhpbnRlcmFjdGlvbi5ndWlsZElkKVxuXHRjb25zdCBuZXdTZXR0aW5ncyA9IHVwZGF0ZVNldHRpbmdzKGludGVyYWN0aW9uLmd1aWxkSWQsIHtcblx0XHR0ZXN0TW9kZTogIXNldHRpbmdzLnRlc3RNb2RlXG5cdH0pXG5cblx0Ly8gVXBkYXRlIHNldHVwIG1lc3NhZ2Vcblx0Y29uc3Qgc2V0dXBNZXNzYWdlID0gY3JlYXRlU2V0dXBNZXNzYWdlKGludGVyYWN0aW9uLCBuZXdTZXR0aW5ncylcblx0YXdhaXQgaW50ZXJhY3Rpb24uZWRpdFJlcGx5KHtcblx0XHRjb250ZW50OiBzZXR1cE1lc3NhZ2UuY29udGVudCxcblx0XHRjb21wb25lbnRzOiBzZXR1cE1lc3NhZ2UuY29tcG9uZW50c1xuXHR9KVxuXG5cdC8vIExvZyBhY3Rpb24gdG8gbW9kbG9ncyBjaGFubmVsXG5cdGNvbnN0IHRlc3RNb2RlID0gbmV3U2V0dGluZ3MudGVzdE1vZGUgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnXG5cdGxvZ0FjdGlvbihpbnRlcmFjdGlvbi5ndWlsZElkLCB7XG5cdFx0ZW1iZWRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHRpdGxlOiBgVGVzdCBtb2RlICR7dGVzdE1vZGV9YCxcblx0XHRcdFx0ZGVzY3JpcHRpb246IGBUZXN0IG1vZGUgaGFzIGJlZW4gJHt0ZXN0TW9kZX1gLFxuXHRcdFx0XHRjb2xvcjogbmV3U2V0dGluZ3MudGVzdE1vZGUgPyBDb2xvcnMuQmx1cnBsZSA6IENvbG9ycy5HcmV5cGxlLFxuXHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdFx0Zm9vdGVyOiB7XG5cdFx0XHRcdFx0aWNvbl91cmw6IGludGVyYWN0aW9uLnVzZXIuZGlzcGxheUF2YXRhclVSTCgpLFxuXHRcdFx0XHRcdHRleHQ6ICdieSBAJyArIGludGVyYWN0aW9uLnVzZXIudXNlcm5hbWVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdF1cblx0fSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXR1cE1lc3NhZ2UiLCJCdXR0b25zIiwiaGFzUGVybWlzc2lvbiIsImxvZ0FjdGlvbiIsImdldFNldHRpbmdzIiwidXBkYXRlU2V0dGluZ3MiLCJsb2dnZXIiLCJDb2xvcnMiLCJjb25maWciLCJkZXNjcmlwdGlvbiIsImludGVyYWN0aW9uIiwiaXNCdXR0b24iLCJjdXN0b21JZCIsIlRlc3RNb2RlIiwiaWQiLCJkZWZlclVwZGF0ZSIsImRlYnVnIiwidXNlciIsInVzZXJuYW1lIiwiZm9sbG93VXAiLCJjb250ZW50IiwiZXBoZW1lcmFsIiwiZ3VpbGRJZCIsInNldHRpbmdzIiwibmV3U2V0dGluZ3MiLCJ0ZXN0TW9kZSIsInNldHVwTWVzc2FnZSIsImVkaXRSZXBseSIsImNvbXBvbmVudHMiLCJlbWJlZHMiLCJ0aXRsZSIsImNvbG9yIiwiQmx1cnBsZSIsIkdyZXlwbGUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmb290ZXIiLCJpY29uX3VybCIsImRpc3BsYXlBdmF0YXJVUkwiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxrQkFBa0IsUUFBUSw4QkFBNkI7QUFDaEUsU0FBU0MsT0FBTyxRQUFRLDBCQUF5QjtBQUNqRCxTQUFTQyxhQUFhLEVBQUVDLFNBQVMsUUFBUSxzQkFBcUI7QUFDOUQsU0FBU0MsV0FBVyxFQUFFQyxjQUFjLFFBQVEseUJBQXdCO0FBQ3BFLFNBQVNDLE1BQU0sUUFBUSxVQUFTO0FBQ2hDLFNBQVNDLE1BQU0sUUFBUSxhQUFZO0FBSW5DLE9BQU8sTUFBTUMsU0FBc0I7SUFDbENDLGFBQWEsQ0FBQyxrREFBa0QsQ0FBQztBQUNsRSxFQUFDO0FBRUQsZUFBZSxDQUFBLE9BQU9DLGNBQW1DO0lBQ3hELDhDQUE4QztJQUM5QyxJQUFJLENBQUNBLFlBQVlDLFFBQVEsTUFBTUQsWUFBWUUsUUFBUSxLQUFLWCxRQUFRWSxRQUFRLENBQUNDLEVBQUUsRUFBRTtRQUM1RTtJQUNELENBQUM7SUFDRCxNQUFNSixZQUFZSyxXQUFXO0lBRTdCLHVCQUF1QjtJQUN2QixJQUFJLENBQUNiLGNBQWNRLGFBQWEsb0JBQW9CO1FBQ25ESixPQUFPVSxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUVOLFlBQVlPLElBQUksQ0FBQ0MsUUFBUSxDQUFDLDZDQUE2QyxDQUFDO1FBQzlGLE9BQU9SLFlBQVlTLFFBQVEsQ0FBQztZQUMzQkMsU0FBUyxDQUFDLHNDQUFzQyxDQUFDO1lBQ2pEQyxXQUFXLElBQUk7UUFDaEI7SUFDRCxDQUFDO0lBRUQsbUJBQW1CO0lBQ25CZixPQUFPVSxLQUFLLENBQUMsQ0FBQyw2QkFBNkIsRUFBRU4sWUFBWVksT0FBTyxDQUFDLENBQUM7SUFDbEUsTUFBTUMsV0FBV25CLFlBQVlNLFlBQVlZLE9BQU87SUFDaEQsTUFBTUUsY0FBY25CLGVBQWVLLFlBQVlZLE9BQU8sRUFBRTtRQUN2REcsVUFBVSxDQUFDRixTQUFTRSxRQUFRO0lBQzdCO0lBRUEsdUJBQXVCO0lBQ3ZCLE1BQU1DLGVBQWUxQixtQkFBbUJVLGFBQWFjO0lBQ3JELE1BQU1kLFlBQVlpQixTQUFTLENBQUM7UUFDM0JQLFNBQVNNLGFBQWFOLE9BQU87UUFDN0JRLFlBQVlGLGFBQWFFLFVBQVU7SUFDcEM7SUFFQSxnQ0FBZ0M7SUFDaEMsTUFBTUgsV0FBV0QsWUFBWUMsUUFBUSxHQUFHLFlBQVksVUFBVTtJQUM5RHRCLFVBQVVPLFlBQVlZLE9BQU8sRUFBRTtRQUM5Qk8sUUFBUTtZQUNQO2dCQUNDQyxPQUFPLENBQUMsVUFBVSxFQUFFTCxTQUFTLENBQUM7Z0JBQzlCaEIsYUFBYSxDQUFDLG1CQUFtQixFQUFFZ0IsU0FBUyxDQUFDO2dCQUM3Q00sT0FBT1AsWUFBWUMsUUFBUSxHQUFHbEIsT0FBT3lCLE9BQU8sR0FBR3pCLE9BQU8wQixPQUFPO2dCQUM3REMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO2dCQUNqQ0MsUUFBUTtvQkFDUEMsVUFBVTVCLFlBQVlPLElBQUksQ0FBQ3NCLGdCQUFnQjtvQkFDM0NDLE1BQU0sU0FBUzlCLFlBQVlPLElBQUksQ0FBQ0MsUUFBUTtnQkFDekM7WUFDRDtTQUNBO0lBQ0Y7QUFDRCxDQUFBLEVBQUMifQ==