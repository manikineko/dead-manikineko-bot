import { Buttons, ID_NAMESPACE } from '../../core/constants.js';
import { getSettings } from '../../core/settings.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { Flashcore, logger } from 'robo.js';
import { ButtonStyle, Colors, ComponentType } from 'discord.js';
export const config = {
    description: `Unbans a user when clicked`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isButton() || !interaction.customId.startsWith(Buttons.Unban.id)) {
        return;
    }
    await interaction.deferUpdate();
    // Get settings
    const { logsChannelId , testMode  } = getSettings(interaction.guildId);
    // Validate permissions
    if (!hasPermission(interaction, 'BanMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to unban users`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Get ban data
    const parts = interaction.customId.split('/');
    const userId = parts[parts.length - 1];
    const namespace = ID_NAMESPACE + interaction.guildId + userId;
    const banData = await Flashcore.get('ban', {
        namespace
    });
    if (!banData) {
        return interaction.followUp({
            content: 'Ban not found',
            ephemeral: true
        });
    }
    // Get user data
    const user = await interaction.client.users.fetch(userId);
    const userAvatar = user.avatarURL();
    // Do the unban
    logger.debug(`Unbanning user @${user.username} from guild ${interaction.guildId}:`, banData);
    if (!testMode) {
        await interaction.guild?.members?.unban(userId);
        await Flashcore.delete('ban', {
            namespace
        });
    }
    // Log action to modlogs channel
    if (interaction.channelId !== logsChannelId) {
        const testPrefix = testMode ? '[TEST] ' : '';
        logAction(interaction.guildId, {
            embeds: [
                {
                    title: testPrefix + `Unban`,
                    description: `User <@${userId}> has been unbanned`,
                    thumbnail: userAvatar ? {
                        url: userAvatar
                    } : undefined,
                    color: Colors.Green,
                    timestamp: new Date().toISOString(),
                    footer: {
                        icon_url: interaction.user.displayAvatarURL(),
                        text: 'by @' + interaction.user.username
                    }
                }
            ]
        });
    }
    return interaction.followUp({
        embeds: [
            {
                color: Colors.DarkRed,
                title: `${user.username} was unbanned`,
                thumbnail: {
                    url: user.displayAvatarURL()
                },
                fields: [
                    {
                        name: 'Member',
                        value: user.toString()
                    }
                ]
            }
        ],
        components: [
            {
                type: ComponentType.ActionRow,
                components: [
                    {
                        type: ComponentType.Button,
                        label: 'Unban',
                        style: ButtonStyle.Danger,
                        customId: Buttons.Unban.id + '/' + user.id
                    }
                ]
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9idXR0b24tdW5iYW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9ucywgSURfTkFNRVNQQUNFIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyBnZXRTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2NvcmUvc2V0dGluZ3MuanMnXG5pbXBvcnQgeyBoYXNQZXJtaXNzaW9uLCBsb2dBY3Rpb24gfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJ1xuaW1wb3J0IHsgRmxhc2hjb3JlLCBsb2dnZXIgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHsgQnV0dG9uU3R5bGUsIENvbG9ycywgQ29tcG9uZW50VHlwZSB9IGZyb20gJ2Rpc2NvcmQuanMnXG5pbXBvcnQgdHlwZSB7IEV2ZW50Q29uZmlnIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB0eXBlIHsgQnV0dG9uSW50ZXJhY3Rpb24gfSBmcm9tICdkaXNjb3JkLmpzJ1xuXG5leHBvcnQgY29uc3QgY29uZmlnOiBFdmVudENvbmZpZyA9IHtcblx0ZGVzY3JpcHRpb246IGBVbmJhbnMgYSB1c2VyIHdoZW4gY2xpY2tlZGBcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBCdXR0b25JbnRlcmFjdGlvbikgPT4ge1xuXHQvLyBPbmx5IGhhbmRsZSBpbnRlcmFjdGlvbiBtZWFudCBmb3IgdGhpcyBmaWxlXG5cdGlmICghaW50ZXJhY3Rpb24uaXNCdXR0b24oKSB8fCAhaW50ZXJhY3Rpb24uY3VzdG9tSWQuc3RhcnRzV2l0aChCdXR0b25zLlVuYmFuLmlkKSkge1xuXHRcdHJldHVyblxuXHR9XG5cdGF3YWl0IGludGVyYWN0aW9uLmRlZmVyVXBkYXRlKClcblxuXHQvLyBHZXQgc2V0dGluZ3Ncblx0Y29uc3QgeyBsb2dzQ2hhbm5lbElkLCB0ZXN0TW9kZSB9ID0gZ2V0U2V0dGluZ3MoaW50ZXJhY3Rpb24uZ3VpbGRJZClcblxuXHQvLyBWYWxpZGF0ZSBwZXJtaXNzaW9uc1xuXHRpZiAoIWhhc1Blcm1pc3Npb24oaW50ZXJhY3Rpb24sICdCYW5NZW1iZXJzJykpIHtcblx0XHRsb2dnZXIuZGVidWcoYFVzZXIgQCR7aW50ZXJhY3Rpb24udXNlci51c2VybmFtZX0gZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHVuYmFuIHVzZXJzYClcblx0XHRyZXR1cm4gaW50ZXJhY3Rpb24uZm9sbG93VXAoe1xuXHRcdFx0Y29udGVudDogYFlvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gdXNlIHRoaXMuYCxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBHZXQgYmFuIGRhdGFcblx0Y29uc3QgcGFydHMgPSBpbnRlcmFjdGlvbi5jdXN0b21JZC5zcGxpdCgnLycpXG5cdGNvbnN0IHVzZXJJZCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXG5cdGNvbnN0IG5hbWVzcGFjZSA9IElEX05BTUVTUEFDRSArIGludGVyYWN0aW9uLmd1aWxkSWQgKyB1c2VySWRcblx0Y29uc3QgYmFuRGF0YSA9IGF3YWl0IEZsYXNoY29yZS5nZXQoJ2JhbicsIHsgbmFtZXNwYWNlIH0pXG5cblx0aWYgKCFiYW5EYXRhKSB7XG5cdFx0cmV0dXJuIGludGVyYWN0aW9uLmZvbGxvd1VwKHtcblx0XHRcdGNvbnRlbnQ6ICdCYW4gbm90IGZvdW5kJyxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBHZXQgdXNlciBkYXRhXG5cdGNvbnN0IHVzZXIgPSBhd2FpdCBpbnRlcmFjdGlvbi5jbGllbnQudXNlcnMuZmV0Y2godXNlcklkKVxuXHRjb25zdCB1c2VyQXZhdGFyID0gdXNlci5hdmF0YXJVUkwoKVxuXG5cdC8vIERvIHRoZSB1bmJhblxuXHRsb2dnZXIuZGVidWcoYFVuYmFubmluZyB1c2VyIEAke3VzZXIudXNlcm5hbWV9IGZyb20gZ3VpbGQgJHtpbnRlcmFjdGlvbi5ndWlsZElkfTpgLCBiYW5EYXRhKVxuXHRpZiAoIXRlc3RNb2RlKSB7XG5cdFx0YXdhaXQgaW50ZXJhY3Rpb24uZ3VpbGQ/Lm1lbWJlcnM/LnVuYmFuKHVzZXJJZClcblx0XHRhd2FpdCBGbGFzaGNvcmUuZGVsZXRlKCdiYW4nLCB7IG5hbWVzcGFjZSB9KVxuXHR9XG5cblx0Ly8gTG9nIGFjdGlvbiB0byBtb2Rsb2dzIGNoYW5uZWxcblx0aWYgKGludGVyYWN0aW9uLmNoYW5uZWxJZCAhPT0gbG9nc0NoYW5uZWxJZCkge1xuXHRcdGNvbnN0IHRlc3RQcmVmaXggPSB0ZXN0TW9kZSA/ICdbVEVTVF0gJyA6ICcnXG5cdFx0bG9nQWN0aW9uKGludGVyYWN0aW9uLmd1aWxkSWQsIHtcblx0XHRcdGVtYmVkczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGl0bGU6IHRlc3RQcmVmaXggKyBgVW5iYW5gLFxuXHRcdFx0XHRcdGRlc2NyaXB0aW9uOiBgVXNlciA8QCR7dXNlcklkfT4gaGFzIGJlZW4gdW5iYW5uZWRgLFxuXHRcdFx0XHRcdHRodW1ibmFpbDogdXNlckF2YXRhclxuXHRcdFx0XHRcdFx0PyB7XG5cdFx0XHRcdFx0XHRcdFx0dXJsOiB1c2VyQXZhdGFyXG5cdFx0XHRcdFx0XHQgIH1cblx0XHRcdFx0XHRcdDogdW5kZWZpbmVkLFxuXHRcdFx0XHRcdGNvbG9yOiBDb2xvcnMuR3JlZW4sXG5cdFx0XHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRcdFx0Zm9vdGVyOiB7XG5cdFx0XHRcdFx0XHRpY29uX3VybDogaW50ZXJhY3Rpb24udXNlci5kaXNwbGF5QXZhdGFyVVJMKCksXG5cdFx0XHRcdFx0XHR0ZXh0OiAnYnkgQCcgKyBpbnRlcmFjdGlvbi51c2VyLnVzZXJuYW1lXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRdXG5cdFx0fSlcblx0fVxuXG5cdHJldHVybiBpbnRlcmFjdGlvbi5mb2xsb3dVcCh7XG5cdFx0ZW1iZWRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbG9yOiBDb2xvcnMuRGFya1JlZCxcblx0XHRcdFx0dGl0bGU6IGAke3VzZXIudXNlcm5hbWV9IHdhcyB1bmJhbm5lZGAsXG5cdFx0XHRcdHRodW1ibmFpbDoge1xuXHRcdFx0XHRcdHVybDogdXNlci5kaXNwbGF5QXZhdGFyVVJMKClcblx0XHRcdFx0fSxcblx0XHRcdFx0ZmllbGRzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bmFtZTogJ01lbWJlcicsXG5cdFx0XHRcdFx0XHR2YWx1ZTogdXNlci50b1N0cmluZygpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRjb21wb25lbnRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IENvbXBvbmVudFR5cGUuQWN0aW9uUm93LFxuXHRcdFx0XHRjb21wb25lbnRzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dHlwZTogQ29tcG9uZW50VHlwZS5CdXR0b24sXG5cdFx0XHRcdFx0XHRsYWJlbDogJ1VuYmFuJyxcblx0XHRcdFx0XHRcdHN0eWxlOiBCdXR0b25TdHlsZS5EYW5nZXIsXG5cdFx0XHRcdFx0XHRjdXN0b21JZDogQnV0dG9ucy5VbmJhbi5pZCArICcvJyArIHVzZXIuaWRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRdXG5cdH0pXG59XG4iXSwibmFtZXMiOlsiQnV0dG9ucyIsIklEX05BTUVTUEFDRSIsImdldFNldHRpbmdzIiwiaGFzUGVybWlzc2lvbiIsImxvZ0FjdGlvbiIsIkZsYXNoY29yZSIsImxvZ2dlciIsIkJ1dHRvblN0eWxlIiwiQ29sb3JzIiwiQ29tcG9uZW50VHlwZSIsImNvbmZpZyIsImRlc2NyaXB0aW9uIiwiaW50ZXJhY3Rpb24iLCJpc0J1dHRvbiIsImN1c3RvbUlkIiwic3RhcnRzV2l0aCIsIlVuYmFuIiwiaWQiLCJkZWZlclVwZGF0ZSIsImxvZ3NDaGFubmVsSWQiLCJ0ZXN0TW9kZSIsImd1aWxkSWQiLCJkZWJ1ZyIsInVzZXIiLCJ1c2VybmFtZSIsImZvbGxvd1VwIiwiY29udGVudCIsImVwaGVtZXJhbCIsInBhcnRzIiwic3BsaXQiLCJ1c2VySWQiLCJsZW5ndGgiLCJuYW1lc3BhY2UiLCJiYW5EYXRhIiwiZ2V0IiwiY2xpZW50IiwidXNlcnMiLCJmZXRjaCIsInVzZXJBdmF0YXIiLCJhdmF0YXJVUkwiLCJndWlsZCIsIm1lbWJlcnMiLCJ1bmJhbiIsImRlbGV0ZSIsImNoYW5uZWxJZCIsInRlc3RQcmVmaXgiLCJlbWJlZHMiLCJ0aXRsZSIsInRodW1ibmFpbCIsInVybCIsInVuZGVmaW5lZCIsImNvbG9yIiwiR3JlZW4iLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmb290ZXIiLCJpY29uX3VybCIsImRpc3BsYXlBdmF0YXJVUkwiLCJ0ZXh0IiwiRGFya1JlZCIsImZpZWxkcyIsIm5hbWUiLCJ2YWx1ZSIsInRvU3RyaW5nIiwiY29tcG9uZW50cyIsInR5cGUiLCJBY3Rpb25Sb3ciLCJCdXR0b24iLCJsYWJlbCIsInN0eWxlIiwiRGFuZ2VyIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxPQUFPLEVBQUVDLFlBQVksUUFBUSwwQkFBeUI7QUFDL0QsU0FBU0MsV0FBVyxRQUFRLHlCQUF3QjtBQUNwRCxTQUFTQyxhQUFhLEVBQUVDLFNBQVMsUUFBUSxzQkFBcUI7QUFDOUQsU0FBU0MsU0FBUyxFQUFFQyxNQUFNLFFBQVEsVUFBUztBQUMzQyxTQUFTQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsYUFBYSxRQUFRLGFBQVk7QUFJL0QsT0FBTyxNQUFNQyxTQUFzQjtJQUNsQ0MsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0FBQzFDLEVBQUM7QUFFRCxlQUFlLENBQUEsT0FBT0MsY0FBbUM7SUFDeEQsOENBQThDO0lBQzlDLElBQUksQ0FBQ0EsWUFBWUMsUUFBUSxNQUFNLENBQUNELFlBQVlFLFFBQVEsQ0FBQ0Ms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