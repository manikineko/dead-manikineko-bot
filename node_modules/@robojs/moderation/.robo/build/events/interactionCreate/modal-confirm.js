import { Modals, TextInputs } from '../../core/constants.js';
import { getState, logger, setState } from 'robo.js';
export const config = {
    description: `Submits a report to the modmail channel when the report message modal is submitted`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isModalSubmit() || interaction.customId !== Modals.Confirm.id) {
        return;
    }
    // Get confirmation
    const confirmation = interaction.fields.getTextInputValue(TextInputs.Confirm.id);
    if (confirmation?.toLowerCase() !== 'yes') {
        interaction.reply({
            content: 'Action failed. Type `yes` next time to confirm.',
            ephemeral: true
        });
        return;
    }
    // Get and validate confirmation callback
    const { callback  } = getState('modal-confirm', {
        namespace: interaction.guildId + interaction.user.id
    }) ?? {};
    if (!callback) {
        console.log(`No callback found for guild ${interaction.guildId}`);
        interaction.reply({
            content: 'Oops, something went wrong',
            ephemeral: true
        });
        return;
    }
    // Run callback then clear state
    logger.debug(`Running callback for guild ${interaction.guildId}`);
    callback(interaction);
    setState('modal-confirm', null, {
        namespace: interaction.guildId + interaction.user.id
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9tb2RhbC1jb25maXJtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGFscywgVGV4dElucHV0cyB9IGZyb20gJy4uLy4uL2NvcmUvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHsgZ2V0U3RhdGUsIGxvZ2dlciwgc2V0U3RhdGUgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHR5cGUgeyBFdmVudENvbmZpZyB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgdHlwZSB7IE1vZGFsU3VibWl0SW50ZXJhY3Rpb24gfSBmcm9tICdkaXNjb3JkLmpzJ1xuXG5leHBvcnQgY29uc3QgY29uZmlnOiBFdmVudENvbmZpZyA9IHtcblx0ZGVzY3JpcHRpb246IGBTdWJtaXRzIGEgcmVwb3J0IHRvIHRoZSBtb2RtYWlsIGNoYW5uZWwgd2hlbiB0aGUgcmVwb3J0IG1lc3NhZ2UgbW9kYWwgaXMgc3VibWl0dGVkYFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoaW50ZXJhY3Rpb246IE1vZGFsU3VibWl0SW50ZXJhY3Rpb24pID0+IHtcblx0Ly8gT25seSBoYW5kbGUgaW50ZXJhY3Rpb24gbWVhbnQgZm9yIHRoaXMgZmlsZVxuXHRpZiAoIWludGVyYWN0aW9uLmlzTW9kYWxTdWJtaXQoKSB8fCBpbnRlcmFjdGlvbi5jdXN0b21JZCAhPT0gTW9kYWxzLkNvbmZpcm0uaWQpIHtcblx0XHRyZXR1cm5cblx0fVxuXG5cdC8vIEdldCBjb25maXJtYXRpb25cblx0Y29uc3QgY29uZmlybWF0aW9uID0gaW50ZXJhY3Rpb24uZmllbGRzLmdldFRleHRJbnB1dFZhbHVlKFRleHRJbnB1dHMuQ29uZmlybS5pZClcblx0aWYgKGNvbmZpcm1hdGlvbj8udG9Mb3dlckNhc2UoKSAhPT0gJ3llcycpIHtcblx0XHRpbnRlcmFjdGlvbi5yZXBseSh7XG5cdFx0XHRjb250ZW50OiAnQWN0aW9uIGZhaWxlZC4gVHlwZSBgeWVzYCBuZXh0IHRpbWUgdG8gY29uZmlybS4nLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fSlcblx0XHRyZXR1cm5cblx0fVxuXG5cdC8vIEdldCBhbmQgdmFsaWRhdGUgY29uZmlybWF0aW9uIGNhbGxiYWNrXG5cdGNvbnN0IHsgY2FsbGJhY2sgfSA9XG5cdFx0Z2V0U3RhdGU8eyBjYWxsYmFjazogKGludGVyYWN0aW9uOiBNb2RhbFN1Ym1pdEludGVyYWN0aW9uKSA9PiB2b2lkIH0+KCdtb2RhbC1jb25maXJtJywge1xuXHRcdFx0bmFtZXNwYWNlOiBpbnRlcmFjdGlvbi5ndWlsZElkICsgaW50ZXJhY3Rpb24udXNlci5pZFxuXHRcdH0pID8/IHt9XG5cblx0aWYgKCFjYWxsYmFjaykge1xuXHRcdGNvbnNvbGUubG9nKGBObyBjYWxsYmFjayBmb3VuZCBmb3IgZ3VpbGQgJHtpbnRlcmFjdGlvbi5ndWlsZElkfWApXG5cdFx0aW50ZXJhY3Rpb24ucmVwbHkoe1xuXHRcdFx0Y29udGVudDogJ09vcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nJyxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdFx0cmV0dXJuXG5cdH1cblxuXHQvLyBSdW4gY2FsbGJhY2sgdGhlbiBjbGVhciBzdGF0ZVxuXHRsb2dnZXIuZGVidWcoYFJ1bm5pbmcgY2FsbGJhY2sgZm9yIGd1aWxkICR7aW50ZXJhY3Rpb24uZ3VpbGRJZH1gKVxuXHRjYWxsYmFjayhpbnRlcmFjdGlvbilcblx0c2V0U3RhdGUoJ21vZGFsLWNvbmZpcm0nLCBudWxsLCB7XG5cdFx0bmFtZXNwYWNlOiBpbnRlcmFjdGlvbi5ndWlsZElkICsgaW50ZXJhY3Rpb24udXNlci5pZFxuXHR9KVxufVxuIl0sIm5hbWVzIjpbIk1vZGFscyIsIlRleHRJbnB1dHMiLCJnZXRTdGF0ZSIsImxvZ2dlciIsInNldFN0YXRlIiwiY29uZmlnIiwiZGVzY3JpcHRpb24iLCJpbnRlcmFjdGlvbiIsImlzTW9kYWxTdWJtaXQiLCJjdXN0b21JZCIsIkNvbmZpcm0iLCJpZCIsImNvbmZpcm1hdGlvbiIsImZpZWxkcyIsImdldFRleHRJbnB1dFZhbHVlIiwidG9Mb3dlckNhc2UiLCJyZXBseSIsImNvbnRlbnQiLCJlcGhlbWVyYWwiLCJjYWxsYmFjayIsIm5hbWVzcGFjZSIsImd1aWxkSWQiLCJ1c2VyIiwiY29uc29sZSIsImxvZyIsImRlYnVnIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxNQUFNLEVBQUVDLFVBQVUsUUFBUSwwQkFBeUI7QUFDNUQsU0FBU0MsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsUUFBUSxVQUFTO0FBSXBELE9BQU8sTUFBTUMsU0FBc0I7SUFDbENDLGFBQWEsQ0FBQyxrRkFBa0YsQ0FBQztBQUNsRyxFQUFDO0FBRUQsZUFBZSxDQUFBLE9BQU9DLGNBQXdDO0lBQzdELDhDQUE4QztJQUM5QyxJQUFJLENBQUNBLFlBQVlDLGFBQWEsTUFBTUQsWUFBWUUsUUFBUSxLQUFLVCxPQUFPVSxPQUFPLENBQUNDLEVBQUUsRUFBRTtRQUMvRTtJQUNELENBQUM7SUFFRCxtQkFBbUI7SUFDbkIsTUFBTUMsZUFBZUwsWUFBWU0sTUFBTSxDQUFDQyxpQkFBaUIsQ0FBQ2IsV0FBV1MsT0FBTyxDQUFDQyxFQUFFO0lBQy9FLElBQUlDLGNBQWNHLGtCQUFrQixPQUFPO1FBQzFDUixZQUFZUyxLQUFLLENBQUM7WUFDakJDLFNBQVM7WUFDVEMsV0FBVyxJQUFJO1FBQ2hCO1FBQ0E7SUFDRCxDQUFDO0lBRUQseUNBQXlDO0lBQ3pDLE1BQU0sRUFBRUMsU0FBUSxFQUFFLEdBQ2pCakIsU0FBc0UsaUJBQWlCO1FBQ3RGa0IsV0FBV2IsWUFBWWMsT0FBTyxHQUFHZCxZQUFZZSxJQUFJLENBQUNYLEVBQUU7SUFDckQsTUFBTSxDQUFDO0lBRVIsSUFBSSxDQUFDUSxVQUFVO1FBQ2RJLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLDRCQUE0QixFQUFFakIsWUFBWWMsT0FBTyxDQUFDLENBQUM7UUFDaEVkLFlBQVlTLEtBQUssQ0FBQztZQUNqQkMsU0FBUztZQUNUQyxXQUFXLElBQUk7UUFDaEI7UUFDQTtJQUNELENBQUM7SUFFRCxnQ0FBZ0M7SUFDaENmLE9BQU9zQixLQUFLLENBQUMsQ0FBQywyQkFBMkIsRUFBRWxCLFlBQVljLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFRixTQUFTWjtJQUNUSCxTQUFTLGlCQUFpQixJQUFJLEVBQUU7UUFDL0JnQixXQUFXYixZQUFZYyxPQUFPLEdBQUdkLFlBQVllLElBQUksQ0FBQ1gsRUFBRTtJQUNyRDtBQUNELENBQUEsRUFBQyJ9