import { Selects } from '../../core/constants.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { getState, logger } from 'robo.js';
import { Colors } from 'discord.js';
export const config = {
    description: `Adds roles to moderation channels when the roles select menu is used`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isRoleSelectMenu() || interaction.customId !== Selects.ModChannelRoles.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to change audit logs channel`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Get and validate channels created
    const channelsCreated = getState('modchannels-created', {
        namespace: interaction.guildId + '-' + interaction.user.id
    });
    if (!channelsCreated) {
        logger.warn(`No moderation channels created for guild ${interaction.guildId}`);
        return interaction.followUp({
            content: `No channels created. Please try again.`,
            ephemeral: true
        });
    }
    // Add roles to moderation channels
    for (const role of interaction.roles.values()){
        for (const channel of channelsCreated){
            await channel.permissionOverwrites.edit(role.id, {
                ViewChannel: true
            });
        }
    }
    // Log action to modlogs channel
    logAction(interaction.guildId, {
        embeds: [
            {
                title: 'Roles added to moderation channels',
                description: `The following roles were added:\n${[
                    ...interaction.roles.values()
                ].join('\n')}`,
                color: Colors.Blurple,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
    // Follow up
    logger.debug(`Successfully added roles to moderation channels for guild ${interaction.guildId}`);
    await interaction.followUp({
        content: `Roles added to moderation channels.`,
        ephemeral: true
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9zZWxlY3QtbW9kY2hhbm5lbC1yb2xlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWxlY3RzIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyBoYXNQZXJtaXNzaW9uLCBsb2dBY3Rpb24gfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJ1xuaW1wb3J0IHsgZ2V0U3RhdGUsIGxvZ2dlciB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tICdkaXNjb3JkLmpzJ1xuaW1wb3J0IHR5cGUgeyBFdmVudENvbmZpZyB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgdHlwZSB7IFJvbGVTZWxlY3RNZW51SW50ZXJhY3Rpb24sIFRleHRDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcydcblxuZXhwb3J0IGNvbnN0IGNvbmZpZzogRXZlbnRDb25maWcgPSB7XG5cdGRlc2NyaXB0aW9uOiBgQWRkcyByb2xlcyB0byBtb2RlcmF0aW9uIGNoYW5uZWxzIHdoZW4gdGhlIHJvbGVzIHNlbGVjdCBtZW51IGlzIHVzZWRgXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChpbnRlcmFjdGlvbjogUm9sZVNlbGVjdE1lbnVJbnRlcmFjdGlvbikgPT4ge1xuXHQvLyBPbmx5IGhhbmRsZSBpbnRlcmFjdGlvbiBtZWFudCBmb3IgdGhpcyBmaWxlXG5cdGlmICghaW50ZXJhY3Rpb24uaXNSb2xlU2VsZWN0TWVudSgpIHx8IGludGVyYWN0aW9uLmN1c3RvbUlkICE9PSBTZWxlY3RzLk1vZENoYW5uZWxSb2xlcy5pZCkge1xuXHRcdHJldHVyblxuXHR9XG5cdGF3YWl0IGludGVyYWN0aW9uLmRlZmVyVXBkYXRlKClcblxuXHQvLyBWYWxpZGF0ZSBwZXJtaXNzaW9uc1xuXHRpZiAoIWhhc1Blcm1pc3Npb24oaW50ZXJhY3Rpb24sICdNb2RlcmF0ZU1lbWJlcnMnKSkge1xuXHRcdGxvZ2dlci5kZWJ1ZyhgVXNlciBAJHtpbnRlcmFjdGlvbi51c2VyLnVzZXJuYW1lfSBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gY2hhbmdlIGF1ZGl0IGxvZ3MgY2hhbm5lbGApXG5cdFx0cmV0dXJuIGludGVyYWN0aW9uLmZvbGxvd1VwKHtcblx0XHRcdGNvbnRlbnQ6IGBZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHVzZSB0aGlzLmAsXG5cdFx0XHRlcGhlbWVyYWw6IHRydWVcblx0XHR9KVxuXHR9XG5cblx0Ly8gR2V0IGFuZCB2YWxpZGF0ZSBjaGFubmVscyBjcmVhdGVkXG5cdGNvbnN0IGNoYW5uZWxzQ3JlYXRlZCA9IGdldFN0YXRlPFRleHRDaGFubmVsW10+KCdtb2RjaGFubmVscy1jcmVhdGVkJywge1xuXHRcdG5hbWVzcGFjZTogaW50ZXJhY3Rpb24uZ3VpbGRJZCArICctJyArIGludGVyYWN0aW9uLnVzZXIuaWRcblx0fSlcblxuXHRpZiAoIWNoYW5uZWxzQ3JlYXRlZCkge1xuXHRcdGxvZ2dlci53YXJuKGBObyBtb2RlcmF0aW9uIGNoYW5uZWxzIGNyZWF0ZWQgZm9yIGd1aWxkICR7aW50ZXJhY3Rpb24uZ3VpbGRJZH1gKVxuXHRcdHJldHVybiBpbnRlcmFjdGlvbi5mb2xsb3dVcCh7XG5cdFx0XHRjb250ZW50OiBgTm8gY2hhbm5lbHMgY3JlYXRlZC4gUGxlYXNlIHRyeSBhZ2Fpbi5gLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fSlcblx0fVxuXG5cdC8vIEFkZCByb2xlcyB0byBtb2RlcmF0aW9uIGNoYW5uZWxzXG5cdGZvciAoY29uc3Qgcm9sZSBvZiBpbnRlcmFjdGlvbi5yb2xlcy52YWx1ZXMoKSkge1xuXHRcdGZvciAoY29uc3QgY2hhbm5lbCBvZiBjaGFubmVsc0NyZWF0ZWQpIHtcblx0XHRcdGF3YWl0IGNoYW5uZWwucGVybWlzc2lvbk92ZXJ3cml0ZXMuZWRpdChyb2xlLmlkLCB7XG5cdFx0XHRcdFZpZXdDaGFubmVsOiB0cnVlXG5cdFx0XHR9KVxuXHRcdH1cblx0fVxuXG5cdC8vIExvZyBhY3Rpb24gdG8gbW9kbG9ncyBjaGFubmVsXG5cdGxvZ0FjdGlvbihpbnRlcmFjdGlvbi5ndWlsZElkLCB7XG5cdFx0ZW1iZWRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHRpdGxlOiAnUm9sZXMgYWRkZWQgdG8gbW9kZXJhdGlvbiBjaGFubmVscycsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBgVGhlIGZvbGxvd2luZyByb2xlcyB3ZXJlIGFkZGVkOlxcbiR7Wy4uLmludGVyYWN0aW9uLnJvbGVzLnZhbHVlcygpXS5qb2luKCdcXG4nKX1gLFxuXHRcdFx0XHRjb2xvcjogQ29sb3JzLkJsdXJwbGUsXG5cdFx0XHRcdHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuXHRcdFx0XHRmb290ZXI6IHtcblx0XHRcdFx0XHRpY29uX3VybDogaW50ZXJhY3Rpb24udXNlci5kaXNwbGF5QXZhdGFyVVJMKCksXG5cdFx0XHRcdFx0dGV4dDogJ2J5IEAnICsgaW50ZXJhY3Rpb24udXNlci51c2VybmFtZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XVxuXHR9KVxuXG5cdC8vIEZvbGxvdyB1cFxuXHRsb2dnZXIuZGVidWcoYFN1Y2Nlc3NmdWxseSBhZGRlZCByb2xlcyB0byBtb2RlcmF0aW9uIGNoYW5uZWxzIGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0YXdhaXQgaW50ZXJhY3Rpb24uZm9sbG93VXAoe1xuXHRcdGNvbnRlbnQ6IGBSb2xlcyBhZGRlZCB0byBtb2RlcmF0aW9uIGNoYW5uZWxzLmAsXG5cdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdH0pXG59XG4iXSwibmFtZXMiOlsiU2VsZWN0cyIsImhhc1Blcm1pc3Npb24iLCJsb2dBY3Rpb24iLCJnZXRTdGF0ZSIsImxvZ2dlciIsIkNvbG9ycyIsImNvbmZpZyIsImRlc2NyaXB0aW9uIiwiaW50ZXJhY3Rpb24iLCJpc1JvbGVTZWxlY3RNZW51IiwiY3VzdG9tSWQiLCJNb2RDaGFubmVsUm9sZXMiLCJpZCIsImRlZmVyVXBkYXRlIiwiZGVidWciLCJ1c2VyIiwidXNlcm5hbWUiLCJmb2xsb3dVcCIsImNvbnRlbnQiLCJlcGhlbWVyYWwiLCJjaGFubmVsc0NyZWF0ZWQiLCJuYW1lc3BhY2UiLCJndWlsZElkIiwid2FybiIsInJvbGUiLCJyb2xlcyIsInZhbHVlcyIsImNoYW5uZWwiLCJwZXJtaXNzaW9uT3ZlcndyaXRlcyIsImVkaXQiLCJWaWV3Q2hhbm5lbCIsImVtYmVkcyIsInRpdGxlIiwiam9pbiIsImNvbG9yIiwiQmx1cnBsZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImZvb3RlciIsImljb25fdXJsIiwiZGlzcGxheUF2YXRhclVSTCIsInRleHQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLE9BQU8sUUFBUSwwQkFBeUI7QUFDakQsU0FBU0MsYUFBYSxFQUFFQyxTQUFTLFFBQVEsc0JBQXFCO0FBQzlELFNBQVNDLFFBQVEsRUFBRUMsTUFBTSxRQUFRLFVBQVM7QUFDMUMsU0FBU0MsTUFBTSxRQUFRLGFBQVk7QUFJbkMsT0FBTyxNQUFNQyxTQUFzQjtJQUNsQ0MsYUFBYSxDQUFDLG9FQUFvRSxDQUFDO0FBQ3BGLEVBQUM7QUFFRCxlQUFlLENBQUEsT0FBT0MsY0FBMkM7SUFDaEUsOENBQThDO0lBQzlDLElBQUksQ0FBQ0EsWUFBWUMsZ0JBQWdCLE1BQU1ELFlBQVlFLFFBQVEsS0FBS1YsUUFBUVcsZUFBZSxDQUFDQyxFQUFFLEVBQUU7UUFDM0Y7SUFDRCxDQUFDO0lBQ0QsTUFBTUosWUFBWUssV0FBVztJQUU3Qix1QkFBdUI7SUFDdkIsSUFBSSxDQUFDWixjQUFjTyxhQUFhLG9CQUFvQjtRQUNuREosT0FBT1UsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFTixZQUFZTyxJQUFJLENBQUNDLFFBQVEsQ0FBQyxzREFBc0QsQ0FBQztRQUN2RyxPQUFPUixZQUFZUyxRQUFRLENBQUM7WUFDM0JDLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQztZQUNqREMsV0FBVyxJQUFJO1FBQ2hCO0lBQ0QsQ0FBQztJQUVELG9DQUFvQztJQUNwQyxNQUFNQyxrQkFBa0JqQixTQUF3Qix1QkFBdUI7UUFDdEVrQixXQUFXYixZQUFZYyxPQUFPLEdBQUcsTUFBTWQsWUFBWU8sSUFBSSxDQUFDSCxFQUFFO0lBQzNEO0lBRUEsSUFBSSxDQUFDUSxpQkFBaUI7UUFDckJoQixPQUFPbUIsSUFBSSxDQUFDLENBQUMseUNBQXlDLEVBQUVmLFlBQVljLE9BQU8sQ0FBQyxDQUFDO1FBQzdFLE9BQU9kLFlBQVlTLFFBQVEsQ0FBQztZQUMzQkMsU0FBUyxDQUFDLHNDQUFzQyxDQUFDO1lBQ2pEQyxXQUFXLElBQUk7UUFDaEI7SUFDRCxDQUFDO0lBRUQsbUNBQW1DO0lBQ25DLEtBQUssTUFBTUssUUFBUWhCLFlBQVlpQixLQUFLLENBQUNDLE1BQU0sR0FBSTtRQUM5QyxLQUFLLE1BQU1DLFdBQVdQLGdCQUFpQjtZQUN0QyxNQUFNTyxRQUFRQyxvQkFBb0IsQ0FBQ0MsSUFBSSxDQUFDTCxLQUFLWixFQUFFLEVBQUU7Z0JBQ2hEa0IsYUFBYSxJQUFJO1lBQ2xCO1FBQ0Q7SUFDRDtJQUVBLGdDQUFnQztJQUNoQzVCLFVBQVVNLFlBQVljLE9BQU8sRUFBRTtRQUM5QlMsUUFBUTtZQUNQO2dCQUNDQyxPQUFPO2dCQUNQekIsYUFBYSxDQUFDLGlDQUFpQyxFQUFFO3VCQUFJQyxZQUFZaUIsS0FBSyxDQUFDQyxNQUFNO2lCQUFHLENBQUNPLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQzdGQyxPQUFPN0IsT0FBTzhCLE9BQU87Z0JBQ3JCQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ2pDQyxRQUFRO29CQUNQQyxVQUFVaEMsWUFBWU8sSUFBSSxDQUFDMEIsZ0JBQWdCO29CQUMzQ0MsTUFBTSxTQUFTbEMsWUFBWU8sSUFBSSxDQUFDQyxRQUFRO2dCQUN6QztZQUNEO1NBQ0E7SUFDRjtJQUVBLFlBQVk7SUFDWlosT0FBT1UsS0FBSyxDQUFDLENBQUMsMERBQTBELEVBQUVOLFlBQVljLE9BQU8sQ0FBQyxDQUFDO0lBQy9GLE1BQU1kLFlBQVlTLFFBQVEsQ0FBQztRQUMxQkMsU0FBUyxDQUFDLG1DQUFtQyxDQUFDO1FBQzlDQyxXQUFXLElBQUk7SUFDaEI7QUFDRCxDQUFBLEVBQUMifQ==