import { createSetupMessage } from '../../commands/mod/setup.js';
import { Selects } from '../../core/constants.js';
import { updateSettings } from '../../core/settings.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { logger } from 'robo.js';
import { ChannelType, Colors } from 'discord.js';
export const config = {
    description: `Sets the audit logs channel when the setup select menu is used`
};
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isChannelSelectMenu() || interaction.customId !== Selects.ChannelAudit.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to change audit logs channel`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Validate channel
    const channel = interaction.channels.first();
    if (!channel || channel.type !== ChannelType.GuildText) {
        return interaction.followUp({
            content: 'Please select a valid channel.',
            ephemeral: true
        });
    }
    // Add self to logs channel if needed
    const selfId = interaction.member?.user?.id;
    if (!channel.permissionsFor(selfId)?.has('ReadMessageHistory') || !channel.permissionsFor(selfId)?.has('SendMessages') || !channel.permissionsFor(selfId)?.has('ViewChannel')) {
        logger.debug(`Adding self to channel #${channel.name} for guild ${interaction.guildId}`);
        await channel.permissionOverwrites.edit(selfId, {
            ReadMessageHistory: true,
            SendMessages: true,
            ViewChannel: true
        });
    }
    // Set logs channel
    const newSettings = updateSettings(interaction.guildId, {
        auditLogsChannelId: channel.id
    });
    // Update setup message
    logger.debug(`Set audit logs channel for guild ${interaction.guildId} to #${channel.name}`);
    const setupMessage = createSetupMessage(interaction, newSettings);
    await interaction.editReply({
        content: setupMessage.content,
        components: setupMessage.components
    });
    // Log action to modlogs channel
    logAction(interaction.guildId, {
        embeds: [
            {
                title: 'Channel set',
                description: `Audit logs channel has been set to ${channel}`,
                color: Colors.Blurple,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9zZWxlY3Qtc2V0dXAtYXVkaXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2V0dXBNZXNzYWdlIH0gZnJvbSAnLi4vLi4vY29tbWFuZHMvbW9kL3NldHVwLmpzJ1xuaW1wb3J0IHsgU2VsZWN0cyB9IGZyb20gJy4uLy4uL2NvcmUvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHsgdXBkYXRlU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9jb3JlL3NldHRpbmdzLmpzJ1xuaW1wb3J0IHsgaGFzUGVybWlzc2lvbiwgbG9nQWN0aW9uIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy5qcydcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3JvYm8uanMnXG5pbXBvcnQgeyBDaGFubmVsVHlwZSwgQ29sb3JzIH0gZnJvbSAnZGlzY29yZC5qcydcbmltcG9ydCB0eXBlIHsgRXZlbnRDb25maWcgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHR5cGUgeyBDaGFubmVsLCBDaGFubmVsU2VsZWN0TWVudUludGVyYWN0aW9uIH0gZnJvbSAnZGlzY29yZC5qcydcblxuZXhwb3J0IGNvbnN0IGNvbmZpZzogRXZlbnRDb25maWcgPSB7XG5cdGRlc2NyaXB0aW9uOiBgU2V0cyB0aGUgYXVkaXQgbG9ncyBjaGFubmVsIHdoZW4gdGhlIHNldHVwIHNlbGVjdCBtZW51IGlzIHVzZWRgXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChpbnRlcmFjdGlvbjogQ2hhbm5lbFNlbGVjdE1lbnVJbnRlcmFjdGlvbikgPT4ge1xuXHQvLyBPbmx5IGhhbmRsZSBpbnRlcmFjdGlvbiBtZWFudCBmb3IgdGhpcyBmaWxlXG5cdGlmICghaW50ZXJhY3Rpb24uaXNDaGFubmVsU2VsZWN0TWVudSgpIHx8IGludGVyYWN0aW9uLmN1c3RvbUlkICE9PSBTZWxlY3RzLkNoYW5uZWxBdWRpdC5pZCkge1xuXHRcdHJldHVyblxuXHR9XG5cdGF3YWl0IGludGVyYWN0aW9uLmRlZmVyVXBkYXRlKClcblxuXHQvLyBWYWxpZGF0ZSBwZXJtaXNzaW9uc1xuXHRpZiAoIWhhc1Blcm1pc3Npb24oaW50ZXJhY3Rpb24sICdNb2RlcmF0ZU1lbWJlcnMnKSkge1xuXHRcdGxvZ2dlci5kZWJ1ZyhgVXNlciBAJHtpbnRlcmFjdGlvbi51c2VyLnVzZXJuYW1lfSBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb24gdG8gY2hhbmdlIGF1ZGl0IGxvZ3MgY2hhbm5lbGApXG5cdFx0cmV0dXJuIGludGVyYWN0aW9uLmZvbGxvd1VwKHtcblx0XHRcdGNvbnRlbnQ6IGBZb3UgZG9uJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHVzZSB0aGlzLmAsXG5cdFx0XHRlcGhlbWVyYWw6IHRydWVcblx0XHR9KVxuXHR9XG5cblx0Ly8gVmFsaWRhdGUgY2hhbm5lbFxuXHRjb25zdCBjaGFubmVsID0gaW50ZXJhY3Rpb24uY2hhbm5lbHMuZmlyc3QoKSBhcyBDaGFubmVsIHwgdW5kZWZpbmVkXG5cdGlmICghY2hhbm5lbCB8fCBjaGFubmVsLnR5cGUgIT09IENoYW5uZWxUeXBlLkd1aWxkVGV4dCkge1xuXHRcdHJldHVybiBpbnRlcmFjdGlvbi5mb2xsb3dVcCh7XG5cdFx0XHRjb250ZW50OiAnUGxlYXNlIHNlbGVjdCBhIHZhbGlkIGNoYW5uZWwuJyxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBBZGQgc2VsZiB0byBsb2dzIGNoYW5uZWwgaWYgbmVlZGVkXG5cdGNvbnN0IHNlbGZJZCA9IGludGVyYWN0aW9uLm1lbWJlcj8udXNlcj8uaWQgYXMgc3RyaW5nXG5cdGlmIChcblx0XHQhY2hhbm5lbC5wZXJtaXNzaW9uc0ZvcihzZWxmSWQpPy5oYXMoJ1JlYWRNZXNzYWdlSGlzdG9yeScpIHx8XG5cdFx0IWNoYW5uZWwucGVybWlzc2lvbnNGb3Ioc2VsZklkKT8uaGFzKCdTZW5kTWVzc2FnZXMnKSB8fFxuXHRcdCFjaGFubmVsLnBlcm1pc3Npb25zRm9yKHNlbGZJZCk/LmhhcygnVmlld0NoYW5uZWwnKVxuXHQpIHtcblx0XHRsb2dnZXIuZGVidWcoYEFkZGluZyBzZWxmIHRvIGNoYW5uZWwgIyR7Y2hhbm5lbC5uYW1lfSBmb3IgZ3VpbGQgJHtpbnRlcmFjdGlvbi5ndWlsZElkfWApXG5cdFx0YXdhaXQgY2hhbm5lbC5wZXJtaXNzaW9uT3ZlcndyaXRlcy5lZGl0KHNlbGZJZCwge1xuXHRcdFx0UmVhZE1lc3NhZ2VIaXN0b3J5OiB0cnVlLFxuXHRcdFx0U2VuZE1lc3NhZ2VzOiB0cnVlLFxuXHRcdFx0Vmlld0NoYW5uZWw6IHRydWVcblx0XHR9KVxuXHR9XG5cblx0Ly8gU2V0IGxvZ3MgY2hhbm5lbFxuXHRjb25zdCBuZXdTZXR0aW5ncyA9IHVwZGF0ZVNldHRpbmdzKGludGVyYWN0aW9uLmd1aWxkSWQsIHtcblx0XHRhdWRpdExvZ3NDaGFubmVsSWQ6IGNoYW5uZWwuaWRcblx0fSlcblxuXHQvLyBVcGRhdGUgc2V0dXAgbWVzc2FnZVxuXHRsb2dnZXIuZGVidWcoYFNldCBhdWRpdCBsb2dzIGNoYW5uZWwgZm9yIGd1aWxkICR7aW50ZXJhY3Rpb24uZ3VpbGRJZH0gdG8gIyR7Y2hhbm5lbC5uYW1lfWApXG5cdGNvbnN0IHNldHVwTWVzc2FnZSA9IGNyZWF0ZVNldHVwTWVzc2FnZShpbnRlcmFjdGlvbiwgbmV3U2V0dGluZ3MpXG5cdGF3YWl0IGludGVyYWN0aW9uLmVkaXRSZXBseSh7XG5cdFx0Y29udGVudDogc2V0dXBNZXNzYWdlLmNvbnRlbnQsXG5cdFx0Y29tcG9uZW50czogc2V0dXBNZXNzYWdlLmNvbXBvbmVudHNcblx0fSlcblxuXHQvLyBMb2cgYWN0aW9uIHRvIG1vZGxvZ3MgY2hhbm5lbFxuXHRsb2dBY3Rpb24oaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdGVtYmVkczogW1xuXHRcdFx0e1xuXHRcdFx0XHR0aXRsZTogJ0NoYW5uZWwgc2V0Jyxcblx0XHRcdFx0ZGVzY3JpcHRpb246IGBBdWRpdCBsb2dzIGNoYW5uZWwgaGFzIGJlZW4gc2V0IHRvICR7Y2hhbm5lbH1gLFxuXHRcdFx0XHRjb2xvcjogQ29sb3JzLkJsdXJwbGUsXG5cdFx0XHRcdHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuXHRcdFx0XHRmb290ZXI6IHtcblx0XHRcdFx0XHRpY29uX3VybDogaW50ZXJhY3Rpb24udXNlci5kaXNwbGF5QXZhdGFyVVJMKCksXG5cdFx0XHRcdFx0dGV4dDogJ2J5IEAnICsgaW50ZXJhY3Rpb24udXNlci51c2VybmFtZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XVxuXHR9KVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZVNldHVwTWVzc2FnZSIsIlNlbGVjdHMiLCJ1cGRhdGVTZXR0aW5ncyIsImhhc1Blcm1pc3Npb24iLCJsb2dBY3Rpb24iLCJsb2dnZXIiLCJDaGFubmVsVHlwZSIsIkNvbG9ycyIsImNvbmZpZyIsImRlc2NyaXB0aW9uIiwiaW50ZXJhY3Rpb24iLCJpc0NoYW5uZWxTZWxlY3RNZW51IiwiY3VzdG9tSWQiLCJDaGFubmVsQXVkaXQiLCJpZCIsImRlZmVyVXBkYXRlIiwiZGVidWciLCJ1c2VyIiwidXNlcm5hbWUiLCJmb2xsb3dVcCIsImNvbnRlbnQiLCJlcGhlbWVyYWwiLCJjaGFubmVsIiwiY2hhbm5lbHMiLCJmaXJzdCIsInR5cGUiLCJHdWlsZFRleHQiLCJzZWxmSWQiLCJtZW1iZXIiLCJwZXJtaXNzaW9uc0ZvciIsImhhcyIsIm5hbWUiLCJndWlsZElkIiwicGVybWlzc2lvbk92ZXJ3cml0ZXMiLCJlZGl0IiwiUmVhZE1lc3NhZ2VIaXN0b3J5IiwiU2VuZE1lc3NhZ2VzIiwiVmlld0NoYW5uZWwiLCJuZXdTZXR0aW5ncyIsImF1ZGl0TG9nc0NoYW5uZWxJZCIsInNldHVwTWVzc2FnZSIsImVkaXRSZXBseSIsImNvbXBvbmVudHMiLCJlbWJlZHMiLCJ0aXRsZSIsImNvbG9yIiwiQmx1cnBsZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImZvb3RlciIsImljb25fdXJsIiwiZGlzcGxheUF2YXRhclVSTCIsInRleHQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGtCQUFrQixRQUFRLDhCQUE2QjtBQUNoRSxTQUFTQyxPQUFPLFFBQVEsMEJBQXlCO0FBQ2pELFNBQVNDLGNBQWMsUUFBUSx5QkFBd0I7QUFDdkQsU0FBU0MsYUFBYSxFQUFFQyxTQUFTLFFBQVEsc0JBQXFCO0FBQzlELFNBQVNDLE1BQU0sUUFBUSxVQUFTO0FBQ2hDLFNBQVNDLFdBQVcsRUFBRUMsTUFBTSxRQUFRLGFBQVk7QUFJaEQsT0FBTyxNQUFNQyxTQUFzQjtJQUNsQ0MsYUFBYSxDQUFDLDhEQUE4RCxDQUFDO0FBQzlFLEVBQUM7QUFFRCxlQUFlLENBQUEsT0FBT0MsY0FBOEM7SUFDbkUsOENBQThDO0lBQzlDLElBQUksQ0FBQ0EsWUFBWUMsbUJBQW1CLE1BQU1ELFlBQVlFLFFBQVEsS0FBS1gsUUFBUVksWUFBWSxDQUFDQyxFQUFFLEVBQUU7UUFDM0Y7SUFDRCxDQUFDO0lBQ0QsTUFBTUosWUFBWUssV0FBVztJQUU3Qix1QkFBdUI7SUFDdkIsSUFBSSxDQUFDWixjQUFjTyxhQUFhLG9CQUFvQjtRQUNuREwsT0FBT1csS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFTixZQUFZTyxJQUFJLENBQUNDLFFBQVEsQ0FBQyxzREFBc0QsQ0FBQztRQUN2RyxPQUFPUixZQUFZUyxRQUFRLENBQUM7WUFDM0JDLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQztZQUNqREMsV0FBVyxJQUFJO1FBQ2hCO0lBQ0QsQ0FBQztJQUVELG1CQUFtQjtJQUNuQixNQUFNQyxVQUFVWixZQUFZYSxRQUFRLENBQUNDLEtBQUs7SUFDMUMsSUFBSSxDQUFDRixXQUFXQSxRQUFRRyxJQUFJLEtBQUtuQixZQUFZb0IsU0FBUyxFQUFFO1FBQ3ZELE9BQU9oQixZQUFZUyxRQUFRLENBQUM7WUFDM0JDLFNBQVM7WUFDVEMsV0FBVyxJQUFJO1FBQ2hCO0lBQ0QsQ0FBQztJQUVELHFDQUFxQztJQUNyQyxNQUFNTSxTQUFTakIsWUFBWWtCLE1BQU0sRUFBRVgsTUFBTUg7SUFDekMsSUFDQyxDQUFDUSxRQUFRTyxjQUFjLENBQUNGLFNBQVNHLElBQUkseUJBQ3JDLENBQUNSLFFBQVFPLGNBQWMsQ0FBQ0YsU0FBU0csSUFBSSxtQkFDckMsQ0FBQ1IsUUFBUU8sY0FBYyxDQUFDRixTQUFTRyxJQUFJLGdCQUNwQztRQUNEekIsT0FBT1csS0FBSyxDQUFDLENBQUMsd0JBQXdCLEVBQUVNLFFBQVFTLElBQUksQ0FBQyxXQUFXLEVBQUVyQixZQUFZc0IsT0FBTyxDQUFDLENBQUM7UUFDdkYsTUFBTVYsUUFBUVcsb0JBQW9CLENBQUNDLElBQUksQ0FBQ1AsUUFBUTtZQUMvQ1Esb0JBQW9CLElBQUk7WUFDeEJDLGNBQWMsSUFBSTtZQUNsQkMsYUFBYSxJQUFJO1FBQ2xCO0lBQ0QsQ0FBQztJQUVELG1CQUFtQjtJQUNuQixNQUFNQyxjQUFjcEMsZUFBZVEsWUFBWXNCLE9BQU8sRUFBRTtRQUN2RE8sb0JBQW9CakIsUUFBUVIsRUFBRTtJQUMvQjtJQUVBLHVCQUF1QjtJQUN2QlQsT0FBT1csS0FBSyxDQUFDLENBQUMsaUNBQWlDLEVBQUVOLFlBQVlzQixPQUFPLENBQUMsS0FBSyxFQUFFVixRQUFRUyxJQUFJLENBQUMsQ0FBQztJQUMxRixNQUFNUyxlQUFleEMsbUJBQW1CVSxhQUFhNEI7SUFDckQsTUFBTTVCLFlBQVkrQixTQUFTLENBQUM7UUFDM0JyQixTQUFTb0IsYUFBYXBCLE9BQU87UUFDN0JzQixZQUFZRixhQUFhRSxVQUFVO0lBQ3BDO0lBRUEsZ0NBQWdDO0lBQ2hDdEMsVUFBVU0sWUFBWXNCLE9BQU8sRUFBRTtRQUM5QlcsUUFBUTtZQUNQO2dCQUNDQyxPQUFPO2dCQUNQbkMsYUFBYSxDQUFDLG1DQUFtQyxFQUFFYSxRQUFRLENBQUM7Z0JBQzVEdUIsT0FBT3RDLE9BQU91QyxPQUFPO2dCQUNyQkMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO2dCQUNqQ0MsUUFBUTtvQkFDUEMsVUFBVXpDLFlBQVlPLElBQUksQ0FBQ21DLGdCQUFnQjtvQkFDM0NDLE1BQU0sU0FBUzNDLFlBQVlPLElBQUksQ0FBQ0MsUUFBUTtnQkFDekM7WUFDRDtTQUNBO0lBQ0Y7QUFDRCxDQUFBLEVBQUMifQ==