import { createSetupMessage } from '../../commands/mod/setup.js';
import { Selects } from '../../core/constants.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { updateSettings } from '../../core/settings.js';
import { logger } from 'robo.js';
import { ChannelType, Colors } from 'discord.js';
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isChannelSelectMenu() || interaction.customId !== Selects.ChannelLogs.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to change moderator logs channel`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Validate channel
    const channel = interaction.channels.first();
    if (!channel || channel.type !== ChannelType.GuildText) {
        return interaction.followUp({
            content: 'Please select a valid channel.',
            ephemeral: true
        });
    }
    // Add self to logs channel if needed
    const selfId = interaction.member?.user?.id;
    if (!channel.permissionsFor(selfId)?.has('ReadMessageHistory') || !channel.permissionsFor(selfId)?.has('SendMessages') || !channel.permissionsFor(selfId)?.has('ViewChannel')) {
        logger.debug(`Adding self to channel #${channel.name} for guild ${interaction.guildId}`);
        await channel.permissionOverwrites.edit(selfId, {
            ReadMessageHistory: true,
            SendMessages: true,
            ViewChannel: true
        });
    }
    // Set logs channel
    const newSettings = updateSettings(interaction.guildId, {
        logsChannelId: channel.id
    });
    // Update setup message
    logger.debug(`Set logs channel for guild ${interaction.guildId} to #${channel.name}`);
    const setupMessage = createSetupMessage(interaction, newSettings);
    await interaction.editReply({
        content: setupMessage.content,
        components: setupMessage.components
    });
    // Log action to modlogs channel
    logAction(interaction.guildId, {
        embeds: [
            {
                title: 'Channel set',
                description: `Moderation logs channel has been set to ${channel}`,
                color: Colors.Blurple,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9zZWxlY3Qtc2V0dXAtbG9ncy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZXR1cE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9jb21tYW5kcy9tb2Qvc2V0dXAuanMnXG5pbXBvcnQgeyBTZWxlY3RzIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyBoYXNQZXJtaXNzaW9uLCBsb2dBY3Rpb24gfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJ1xuaW1wb3J0IHsgdXBkYXRlU2V0dGluZ3MgfSBmcm9tICcuLi8uLi9jb3JlL3NldHRpbmdzLmpzJ1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB7IENoYW5uZWxUeXBlLCBDb2xvcnMgfSBmcm9tICdkaXNjb3JkLmpzJ1xuaW1wb3J0IHR5cGUgeyBDaGFubmVsLCBDaGFubmVsU2VsZWN0TWVudUludGVyYWN0aW9uIH0gZnJvbSAnZGlzY29yZC5qcydcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBDaGFubmVsU2VsZWN0TWVudUludGVyYWN0aW9uKSA9PiB7XG5cdC8vIE9ubHkgaGFuZGxlIGludGVyYWN0aW9uIG1lYW50IGZvciB0aGlzIGZpbGVcblx0aWYgKCFpbnRlcmFjdGlvbi5pc0NoYW5uZWxTZWxlY3RNZW51KCkgfHwgaW50ZXJhY3Rpb24uY3VzdG9tSWQgIT09IFNlbGVjdHMuQ2hhbm5lbExvZ3MuaWQpIHtcblx0XHRyZXR1cm5cblx0fVxuXHRhd2FpdCBpbnRlcmFjdGlvbi5kZWZlclVwZGF0ZSgpXG5cblx0Ly8gVmFsaWRhdGUgcGVybWlzc2lvbnNcblx0aWYgKCFoYXNQZXJtaXNzaW9uKGludGVyYWN0aW9uLCAnTW9kZXJhdGVNZW1iZXJzJykpIHtcblx0XHRsb2dnZXIuZGVidWcoYFVzZXIgQCR7aW50ZXJhY3Rpb24udXNlci51c2VybmFtZX0gZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGNoYW5nZSBtb2RlcmF0b3IgbG9ncyBjaGFubmVsYClcblx0XHRyZXR1cm4gaW50ZXJhY3Rpb24uZm9sbG93VXAoe1xuXHRcdFx0Y29udGVudDogYFlvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gdXNlIHRoaXMuYCxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBWYWxpZGF0ZSBjaGFubmVsXG5cdGNvbnN0IGNoYW5uZWwgPSBpbnRlcmFjdGlvbi5jaGFubmVscy5maXJzdCgpIGFzIENoYW5uZWwgfCB1bmRlZmluZWRcblx0aWYgKCFjaGFubmVsIHx8IGNoYW5uZWwudHlwZSAhPT0gQ2hhbm5lbFR5cGUuR3VpbGRUZXh0KSB7XG5cdFx0cmV0dXJuIGludGVyYWN0aW9uLmZvbGxvd1VwKHtcblx0XHRcdGNvbnRlbnQ6ICdQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgY2hhbm5lbC4nLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fSlcblx0fVxuXG5cdC8vIEFkZCBzZWxmIHRvIGxvZ3MgY2hhbm5lbCBpZiBuZWVkZWRcblx0Y29uc3Qgc2VsZklkID0gaW50ZXJhY3Rpb24ubWVtYmVyPy51c2VyPy5pZCBhcyBzdHJpbmdcblx0aWYgKFxuXHRcdCFjaGFubmVsLnBlcm1pc3Npb25zRm9yKHNlbGZJZCk/LmhhcygnUmVhZE1lc3NhZ2VIaXN0b3J5JykgfHxcblx0XHQhY2hhbm5lbC5wZXJtaXNzaW9uc0ZvcihzZWxmSWQpPy5oYXMoJ1NlbmRNZXNzYWdlcycpIHx8XG5cdFx0IWNoYW5uZWwucGVybWlzc2lvbnNGb3Ioc2VsZklkKT8uaGFzKCdWaWV3Q2hhbm5lbCcpXG5cdCkge1xuXHRcdGxvZ2dlci5kZWJ1ZyhgQWRkaW5nIHNlbGYgdG8gY2hhbm5lbCAjJHtjaGFubmVsLm5hbWV9IGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0XHRhd2FpdCBjaGFubmVsLnBlcm1pc3Npb25PdmVyd3JpdGVzLmVkaXQoc2VsZklkLCB7XG5cdFx0XHRSZWFkTWVzc2FnZUhpc3Rvcnk6IHRydWUsXG5cdFx0XHRTZW5kTWVzc2FnZXM6IHRydWUsXG5cdFx0XHRWaWV3Q2hhbm5lbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBTZXQgbG9ncyBjaGFubmVsXG5cdGNvbnN0IG5ld1NldHRpbmdzID0gdXBkYXRlU2V0dGluZ3MoaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdGxvZ3NDaGFubmVsSWQ6IGNoYW5uZWwuaWRcblx0fSlcblxuXHQvLyBVcGRhdGUgc2V0dXAgbWVzc2FnZVxuXHRsb2dnZXIuZGVidWcoYFNldCBsb2dzIGNoYW5uZWwgZm9yIGd1aWxkICR7aW50ZXJhY3Rpb24uZ3VpbGRJZH0gdG8gIyR7Y2hhbm5lbC5uYW1lfWApXG5cdGNvbnN0IHNldHVwTWVzc2FnZSA9IGNyZWF0ZVNldHVwTWVzc2FnZShpbnRlcmFjdGlvbiwgbmV3U2V0dGluZ3MpXG5cdGF3YWl0IGludGVyYWN0aW9uLmVkaXRSZXBseSh7XG5cdFx0Y29udGVudDogc2V0dXBNZXNzYWdlLmNvbnRlbnQsXG5cdFx0Y29tcG9uZW50czogc2V0dXBNZXNzYWdlLmNvbXBvbmVudHNcblx0fSlcblxuXHQvLyBMb2cgYWN0aW9uIHRvIG1vZGxvZ3MgY2hhbm5lbFxuXHRsb2dBY3Rpb24oaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdGVtYmVkczogW1xuXHRcdFx0e1xuXHRcdFx0XHR0aXRsZTogJ0NoYW5uZWwgc2V0Jyxcblx0XHRcdFx0ZGVzY3JpcHRpb246IGBNb2RlcmF0aW9uIGxvZ3MgY2hhbm5lbCBoYXMgYmVlbiBzZXQgdG8gJHtjaGFubmVsfWAsXG5cdFx0XHRcdGNvbG9yOiBDb2xvcnMuQmx1cnBsZSxcblx0XHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRcdGZvb3Rlcjoge1xuXHRcdFx0XHRcdGljb25fdXJsOiBpbnRlcmFjdGlvbi51c2VyLmRpc3BsYXlBdmF0YXJVUkwoKSxcblx0XHRcdFx0XHR0ZXh0OiAnYnkgQCcgKyBpbnRlcmFjdGlvbi51c2VyLnVzZXJuYW1lXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdXG5cdH0pXG59XG4iXSwibmFtZXMiOlsiY3JlYXRlU2V0dXBNZXNzYWdlIiwiU2VsZWN0cyIsImhhc1Blcm1pc3Npb24iLCJsb2dBY3Rpb24iLCJ1cGRhdGVTZXR0aW5ncyIsImxvZ2dlciIsIkNoYW5uZWxUeXBlIiwiQ29sb3JzIiwiaW50ZXJhY3Rpb24iLCJpc0NoYW5uZWxTZWxlY3RNZW51IiwiY3VzdG9tSWQiLCJDaGFubmVsTG9ncyIsImlkIiwiZGVmZXJVcGRhdGUiLCJkZWJ1ZyIsInVzZXIiLCJ1c2VybmFtZSIsImZvbGxvd1VwIiwiY29udGVudCIsImVwaGVtZXJhbCIsImNoYW5uZWwiLCJjaGFubmVscyIsImZpcnN0IiwidHlwZSIsIkd1aWxkVGV4dCIsInNlbGZJZCIsIm1lbWJlciIsInBlcm1pc3Npb25zRm9yIiwiaGFzIiwibmFtZSIsImd1aWxkSWQiLCJwZXJtaXNzaW9uT3ZlcndyaXRlcyIsImVkaXQiLCJSZWFkTWVzc2FnZUhpc3RvcnkiLCJTZW5kTWVzc2FnZXMiLCJWaWV3Q2hhbm5lbCIsIm5ld1NldHRpbmdzIiwibG9nc0NoYW5uZWxJZCIsInNldHVwTWVzc2FnZSIsImVkaXRSZXBseSIsImNvbXBvbmVudHMiLCJlbWJlZHMiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiY29sb3IiLCJCbHVycGxlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZm9vdGVyIiwiaWNvbl91cmwiLCJkaXNwbGF5QXZhdGFyVVJMIiwidGV4dCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0Esa0JBQWtCLFFBQVEsOEJBQTZCO0FBQ2hFLFNBQVNDLE9BQU8sUUFBUSwwQkFBeUI7QUFDakQsU0FBU0MsYUFBYSxFQUFFQyxTQUFTLFFBQVEsc0JB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