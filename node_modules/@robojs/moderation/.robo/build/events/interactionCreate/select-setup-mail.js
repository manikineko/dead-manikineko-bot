import { createSetupMessage } from '../../commands/mod/setup.js';
import { Selects } from '../../core/constants.js';
import { updateSettings } from '../../core/settings.js';
import { hasPermission, logAction } from '../../core/utils.js';
import { logger } from 'robo.js';
import { ChannelType, Colors } from 'discord.js';
export default (async (interaction)=>{
    // Only handle interaction meant for this file
    if (!interaction.isChannelSelectMenu() || interaction.customId !== Selects.ChannelMail.id) {
        return;
    }
    await interaction.deferUpdate();
    // Validate permissions
    if (!hasPermission(interaction, 'ModerateMembers')) {
        logger.debug(`User @${interaction.user.username} does not have permission to change moderator mail channel`);
        return interaction.followUp({
            content: `You don't have permission to use this.`,
            ephemeral: true
        });
    }
    // Validate channel
    const channel = interaction.channels.first();
    if (!channel || channel.type !== ChannelType.GuildText) {
        return interaction.followUp({
            content: 'Please select a valid channel.',
            ephemeral: true
        });
    }
    // Add self to logs channel if needed
    const selfId = interaction.member?.user?.id;
    if (!channel.permissionsFor(selfId)?.has('ReadMessageHistory') || !channel.permissionsFor(selfId)?.has('SendMessages') || !channel.permissionsFor(selfId)?.has('ViewChannel')) {
        logger.debug(`Adding self to channel #${channel.name} for guild ${interaction.guildId}`);
        await channel.permissionOverwrites.edit(selfId, {
            ReadMessageHistory: true,
            SendMessages: true,
            ViewChannel: true
        });
    }
    // Set mail channel
    const newSettings = updateSettings(interaction.guildId, {
        mailChannelId: channel.id
    });
    // Update setup message
    logger.debug(`Set mail channel for guild ${interaction.guildId} to #${channel.name}`);
    const setupMessage = createSetupMessage(interaction, newSettings);
    await interaction.editReply({
        content: setupMessage.content,
        components: setupMessage.components
    });
    // Log action to modlogs channel
    logAction(interaction.guildId, {
        embeds: [
            {
                title: 'Channel set',
                description: `Moderator mail channel has been set to ${channel}`,
                color: Colors.Blurple,
                timestamp: new Date().toISOString(),
                footer: {
                    icon_url: interaction.user.displayAvatarURL(),
                    text: 'by @' + interaction.user.username
                }
            }
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3JvYm8uanMvcm9iby5qcy9wYWNrYWdlcy9wbHVnaW4tbW9kdG9vbHMvc3JjL2V2ZW50cy9pbnRlcmFjdGlvbkNyZWF0ZS9zZWxlY3Qtc2V0dXAtbWFpbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZXR1cE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9jb21tYW5kcy9tb2Qvc2V0dXAuanMnXG5pbXBvcnQgeyBTZWxlY3RzIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMuanMnXG5pbXBvcnQgeyB1cGRhdGVTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2NvcmUvc2V0dGluZ3MuanMnXG5pbXBvcnQgeyBoYXNQZXJtaXNzaW9uLCBsb2dBY3Rpb24gfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJ1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAncm9iby5qcydcbmltcG9ydCB7IENoYW5uZWxUeXBlLCBDb2xvcnMgfSBmcm9tICdkaXNjb3JkLmpzJ1xuaW1wb3J0IHR5cGUgeyBDaGFubmVsLCBDaGFubmVsU2VsZWN0TWVudUludGVyYWN0aW9uIH0gZnJvbSAnZGlzY29yZC5qcydcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBDaGFubmVsU2VsZWN0TWVudUludGVyYWN0aW9uKSA9PiB7XG5cdC8vIE9ubHkgaGFuZGxlIGludGVyYWN0aW9uIG1lYW50IGZvciB0aGlzIGZpbGVcblx0aWYgKCFpbnRlcmFjdGlvbi5pc0NoYW5uZWxTZWxlY3RNZW51KCkgfHwgaW50ZXJhY3Rpb24uY3VzdG9tSWQgIT09IFNlbGVjdHMuQ2hhbm5lbE1haWwuaWQpIHtcblx0XHRyZXR1cm5cblx0fVxuXHRhd2FpdCBpbnRlcmFjdGlvbi5kZWZlclVwZGF0ZSgpXG5cblx0Ly8gVmFsaWRhdGUgcGVybWlzc2lvbnNcblx0aWYgKCFoYXNQZXJtaXNzaW9uKGludGVyYWN0aW9uLCAnTW9kZXJhdGVNZW1iZXJzJykpIHtcblx0XHRsb2dnZXIuZGVidWcoYFVzZXIgQCR7aW50ZXJhY3Rpb24udXNlci51c2VybmFtZX0gZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGNoYW5nZSBtb2RlcmF0b3IgbWFpbCBjaGFubmVsYClcblx0XHRyZXR1cm4gaW50ZXJhY3Rpb24uZm9sbG93VXAoe1xuXHRcdFx0Y29udGVudDogYFlvdSBkb24ndCBoYXZlIHBlcm1pc3Npb24gdG8gdXNlIHRoaXMuYCxcblx0XHRcdGVwaGVtZXJhbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBWYWxpZGF0ZSBjaGFubmVsXG5cdGNvbnN0IGNoYW5uZWwgPSBpbnRlcmFjdGlvbi5jaGFubmVscy5maXJzdCgpIGFzIENoYW5uZWwgfCB1bmRlZmluZWRcblx0aWYgKCFjaGFubmVsIHx8IGNoYW5uZWwudHlwZSAhPT0gQ2hhbm5lbFR5cGUuR3VpbGRUZXh0KSB7XG5cdFx0cmV0dXJuIGludGVyYWN0aW9uLmZvbGxvd1VwKHtcblx0XHRcdGNvbnRlbnQ6ICdQbGVhc2Ugc2VsZWN0IGEgdmFsaWQgY2hhbm5lbC4nLFxuXHRcdFx0ZXBoZW1lcmFsOiB0cnVlXG5cdFx0fSlcblx0fVxuXG5cdC8vIEFkZCBzZWxmIHRvIGxvZ3MgY2hhbm5lbCBpZiBuZWVkZWRcblx0Y29uc3Qgc2VsZklkID0gaW50ZXJhY3Rpb24ubWVtYmVyPy51c2VyPy5pZCBhcyBzdHJpbmdcblx0aWYgKFxuXHRcdCFjaGFubmVsLnBlcm1pc3Npb25zRm9yKHNlbGZJZCk/LmhhcygnUmVhZE1lc3NhZ2VIaXN0b3J5JykgfHxcblx0XHQhY2hhbm5lbC5wZXJtaXNzaW9uc0ZvcihzZWxmSWQpPy5oYXMoJ1NlbmRNZXNzYWdlcycpIHx8XG5cdFx0IWNoYW5uZWwucGVybWlzc2lvbnNGb3Ioc2VsZklkKT8uaGFzKCdWaWV3Q2hhbm5lbCcpXG5cdCkge1xuXHRcdGxvZ2dlci5kZWJ1ZyhgQWRkaW5nIHNlbGYgdG8gY2hhbm5lbCAjJHtjaGFubmVsLm5hbWV9IGZvciBndWlsZCAke2ludGVyYWN0aW9uLmd1aWxkSWR9YClcblx0XHRhd2FpdCBjaGFubmVsLnBlcm1pc3Npb25PdmVyd3JpdGVzLmVkaXQoc2VsZklkLCB7XG5cdFx0XHRSZWFkTWVzc2FnZUhpc3Rvcnk6IHRydWUsXG5cdFx0XHRTZW5kTWVzc2FnZXM6IHRydWUsXG5cdFx0XHRWaWV3Q2hhbm5lbDogdHJ1ZVxuXHRcdH0pXG5cdH1cblxuXHQvLyBTZXQgbWFpbCBjaGFubmVsXG5cdGNvbnN0IG5ld1NldHRpbmdzID0gdXBkYXRlU2V0dGluZ3MoaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdG1haWxDaGFubmVsSWQ6IGNoYW5uZWwuaWRcblx0fSlcblxuXHQvLyBVcGRhdGUgc2V0dXAgbWVzc2FnZVxuXHRsb2dnZXIuZGVidWcoYFNldCBtYWlsIGNoYW5uZWwgZm9yIGd1aWxkICR7aW50ZXJhY3Rpb24uZ3VpbGRJZH0gdG8gIyR7Y2hhbm5lbC5uYW1lfWApXG5cdGNvbnN0IHNldHVwTWVzc2FnZSA9IGNyZWF0ZVNldHVwTWVzc2FnZShpbnRlcmFjdGlvbiwgbmV3U2V0dGluZ3MpXG5cdGF3YWl0IGludGVyYWN0aW9uLmVkaXRSZXBseSh7XG5cdFx0Y29udGVudDogc2V0dXBNZXNzYWdlLmNvbnRlbnQsXG5cdFx0Y29tcG9uZW50czogc2V0dXBNZXNzYWdlLmNvbXBvbmVudHNcblx0fSlcblxuXHQvLyBMb2cgYWN0aW9uIHRvIG1vZGxvZ3MgY2hhbm5lbFxuXHRsb2dBY3Rpb24oaW50ZXJhY3Rpb24uZ3VpbGRJZCwge1xuXHRcdGVtYmVkczogW1xuXHRcdFx0e1xuXHRcdFx0XHR0aXRsZTogJ0NoYW5uZWwgc2V0Jyxcblx0XHRcdFx0ZGVzY3JpcHRpb246IGBNb2RlcmF0b3IgbWFpbCBjaGFubmVsIGhhcyBiZWVuIHNldCB0byAke2NoYW5uZWx9YCxcblx0XHRcdFx0Y29sb3I6IENvbG9ycy5CbHVycGxlLFxuXHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdFx0Zm9vdGVyOiB7XG5cdFx0XHRcdFx0aWNvbl91cmw6IGludGVyYWN0aW9uLnVzZXIuZGlzcGxheUF2YXRhclVSTCgpLFxuXHRcdFx0XHRcdHRleHQ6ICdieSBAJyArIGludGVyYWN0aW9uLnVzZXIudXNlcm5hbWVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdF1cblx0fSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVTZXR1cE1lc3NhZ2UiLCJTZWxlY3RzIiwidXBkYXRlU2V0dGluZ3MiLCJoYXNQZXJtaXNzaW9uIiwibG9nQWN0aW9uIiwibG9nZ2VyIiwiQ2hhbm5lbFR5cGUiLCJDb2xvcnMiLCJpbnRlcmFjdGlvbiIsImlzQ2hhbm5lbFNlbGVjdE1lbnUiLCJjdXN0b21JZCIsIkNoYW5uZWxNYWlsIiwiaWQiLCJkZWZlclVwZGF0ZSIsImRlYnVnIiwidXNlciIsInVzZXJuYW1lIiwiZm9sbG93VXAiLCJjb250ZW50IiwiZXBoZW1lcmFsIiwiY2hhbm5lbCIsImNoYW5uZWxzIiwiZmlyc3QiLCJ0eXBlIiwiR3VpbGRUZXh0Iiwic2VsZklkIiwibWVtYmVyIiwicGVybWlzc2lvbnNGb3IiLCJoYXMiLCJuYW1lIiwiZ3VpbGRJZCIsInBlcm1pc3Npb25PdmVyd3JpdGVzIiwiZWRpdCIsIlJlYWRNZXNzYWdlSGlzdG9yeSIsIlNlbmRNZXNzYWdlcyIsIlZpZXdDaGFubmVsIiwibmV3U2V0dGluZ3MiLCJtYWlsQ2hhbm5lbElkIiwic2V0dXBNZXNzYWdlIiwiZWRpdFJlcGx5IiwiY29tcG9uZW50cyIsImVtYmVkcyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJjb2xvciIsIkJsdXJwbGUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJmb290ZXIiLCJpY29uX3VybCIsImRpc3BsYXlBdmF0YXJVUkwiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxrQkFBa0IsUUFBUSw4QkFBNkI7QUFDaEUsU0FBU0MsT0FBTyxRQUFRLDBCQUF5QjtBQUNqRCxTQUFTQyxjQUFjLFFBQVEseUJBQXdCO0FBQ3ZELFNB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