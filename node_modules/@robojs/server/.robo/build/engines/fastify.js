import { handlePublicFile } from "../../../.robo/build/core/handler.js";
import { logger } from "../core/logger.js";
import { BaseEngine } from "./base.js";
import { RoboResponse } from "../../../.robo/build/core/robo-response.js";
import { createReadStream } from "node:fs";
import url from "node:url";
import { color, composeColors } from "robo.js";
export class FastifyEngine extends BaseEngine {
    async init(options) {
        const { fastify  } = await import("fastify");
        this._server = fastify();
        this._vite = options.vite;
        this._server.setErrorHandler((error, _request, reply)=>{
            logger.error(error);
            reply.status(500).send({
                ok: false
            });
        });
        this._server.setNotFoundHandler((request, reply)=>{
            logger.debug(color.bold(request.method), request.raw.url);
            if (this._vite) {
                logger.debug(`Forwarding to Vite:`, request.url);
                this._vite.middlewares(request.raw, reply.raw);
                return;
            }
            const run = async ()=>{
                try {
                    const callback = async (filePath, mimeType)=>{
                        await reply.header('Content-Type', mimeType).header('X-Content-Type-Options', 'nosniff').type(mimeType).send(createReadStream(filePath));
                    };
                    const parsedUrl = url.parse(request.url, true);
                    if (await handlePublicFile(parsedUrl, callback)) {
                        return;
                    }
                } catch (error) {
                    if (error instanceof RoboResponse) {
                        if (error?.status >= 400) {
                            logger.error(error);
                        }
                        Object.entries(error.headers ?? {}).forEach(([key, value])=>{
                            reply.header(key, value);
                        });
                        reply.code(error.status ?? 500).send(error.data ?? error.message);
                        return;
                    } else {
                        logger.error(error);
                    }
                }
                reply.status(404).send({
                    message: `Route ${request.method}:${request.url} not found`,
                    error: 'Not Found',
                    statusCode: 404
                });
            };
            run();
        });
    }
    getHttpServer() {
        return this._server?.server;
    }
    isRunning() {
        return this._isRunning;
    }
    registerRoute(path, handler) {
        this._server.all(path, async (request, reply)=>{
            // Prepare request and reply wrappers for easier usage
            const requestWrapper = {
                req: request.raw,
                body: request.body,
                method: request.method,
                query: request.query,
                params: request.params
            };
            const replyWrapper = {
                res: reply.raw,
                hasSent: false,
                code: function(statusCode) {
                    reply.code(statusCode);
                    return this;
                },
                json: function(data) {
                    reply.header('Content-Type', 'application/json').send(JSON.stringify(data));
                    this.hasSent = true;
                    return this;
                },
                send: function(data) {
                    reply.send(data);
                    this.hasSent = true;
                    return this;
                },
                header: function(name, value) {
                    reply.header(name, value);
                    return this;
                }
            };
            try {
                logger.debug(color.bold(request.method), request.raw.url);
                const result = await handler(requestWrapper, replyWrapper);
                if (!replyWrapper.hasSent && result) {
                    replyWrapper.code(200).json(result);
                }
            } catch (error) {
                logger.error(error);
                replyWrapper.code(500).json({
                    ok: false,
                    errors: Array.isArray(error) ? error.map((e)=>e.message) : [
                        error.message
                    ]
                });
            }
        });
    }
    registerWebsocket() {
        logger.error(`Websockets are not supported in Fastify engine yet.`);
    }
    setupVite(vite) {
        this._vite = vite;
    }
    async start(options) {
        const { port  } = options;
        return new Promise((resolve)=>{
            const run = async ()=>{
                if (this._isRunning) {
                    logger.warn('Fastify server is already up and running. No action taken.');
                    resolve();
                    return;
                }
                // Start server
                this._isRunning = true;
                this._server.listen({
                    port
                }, ()=>{
                    logger.ready(`Fastify server is live at`, composeColors(color.bold, color.blue)(`http://localhost:${port}`));
                    resolve();
                });
            };
            run();
        });
    }
    async stop() {
        const serverPromise = new Promise((resolve)=>{
            if (!this._server) {
                logger.debug(`Fastify server isn't running. Nothing to stop here.`);
                resolve();
                return;
            }
            this._server.close().then(()=>{
                this._isRunning = false;
                logger.debug('Fastify server has been stopped successfully.');
                resolve();
            }).catch((err)=>{
                logger.error(`Error stopping the Fastify server: ${err}`);
            });
        });
        const vitePromise = this._vite?.close();
        await Promise.allSettled([
            serverPromise,
            vitePromise
        ]);
    }
    constructor(...args){
        super(...args);
        this._isRunning = false;
        this._server = null;
        this._vite = null;
    }
}

//# sourceMappingURL=data:application/json;base64,